/* Generated by Cython 3.0.11 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/io/usr/local/cuda-12.6/include/cuda.h",
            "/io/usr/local/cuda-12.6/include/cudaProfiler.h",
            "/io/usr/local/cuda-12.6/include/cuda_runtime_api.h",
            "/io/usr/local/cuda-12.6/include/device_types.h",
            "/io/usr/local/cuda-12.6/include/driver_types.h",
            "/io/usr/local/cuda-12.6/include/library_types.h",
            "/io/usr/local/cuda-12.6/include/surface_types.h",
            "/io/usr/local/cuda-12.6/include/texture_types.h",
            "/io/usr/local/cuda-12.6/include/vector_types.h",
            "cuda/bindings"
        ],
        "extra_compile_args": [
            "-std=c++14",
            "-fpermissive",
            "-Wno-deprecated-declarations",
            "-D _GLIBCXX_ASSERTIONS",
            "-fno-var-tracking-assignments",
            "-O3"
        ],
        "include_dirs": [
            "cuda/bindings",
            "/opt/python/cp310-cp310/include",
            "/io/usr/local/cuda-12.6/include"
        ],
        "language": "c++",
        "library_dirs": [
            "/opt/python/cp310-cp310/lib/python3.10/site-packages",
            "/opt/python/cp310-cp310/lib"
        ],
        "name": "cuda.bindings._lib.cyruntime.cyruntime",
        "sources": [
            "cuda/bindings/_lib/cyruntime/cyruntime.pyx"
        ]
    },
    "module_name": "cuda.bindings._lib.cyruntime.cyruntime"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_11" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000BF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__cuda__bindings___lib__cyruntime__cyruntime
#define __PYX_HAVE_API__cuda__bindings___lib__cyruntime__cyruntime
/* Early includes */
#include <stdint.h>
#include "cuda.h"
#include "cudaProfiler.h"
#include "vector_types.h"
#include "driver_types.h"
#include "surface_types.h"
#include "texture_types.h"
#include "library_types.h"
#include "cuda_runtime_api.h"
#include "device_types.h"
#include <string.h>
#include <stdlib.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <dlfcn.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "cuda/bindings/_lib/cyruntime/cyruntime.pyx",
  "cuda/bindings/_lib/cyruntime/utils.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* #### Code section: numeric_typedefs ### */

/* "cuda/bindings/cydriver.pxd":2392
 * ctypedef CUGLmap_flags_enum CUGLmap_flags
 * 
 * ctypedef unsigned int GLenum             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int GLuint
 */
typedef unsigned int __pyx_t_4cuda_8bindings_8cydriver_GLenum;

/* "cuda/bindings/cydriver.pxd":2394
 * ctypedef unsigned int GLenum
 * 
 * ctypedef unsigned int GLuint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_8bindings_8cydriver_GLuint;

/* "cuda/bindings/cydriver.pxd":2406
 * ctypedef void* EGLStreamKHR
 * 
 * ctypedef unsigned int EGLint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_8bindings_8cydriver_EGLint;

/* "cuda/bindings/cydriver.pxd":2413
 * ctypedef void* EGLSyncKHR
 * 
 * ctypedef uint32_t VdpDevice             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned long long VdpGetProcAddress
 */
typedef uint32_t __pyx_t_4cuda_8bindings_8cydriver_VdpDevice;

/* "cuda/bindings/cydriver.pxd":2415
 * ctypedef uint32_t VdpDevice
 * 
 * ctypedef unsigned long long VdpGetProcAddress             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpVideoSurface
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_8bindings_8cydriver_VdpGetProcAddress;

/* "cuda/bindings/cydriver.pxd":2417
 * ctypedef unsigned long long VdpGetProcAddress
 * 
 * ctypedef uint32_t VdpVideoSurface             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpOutputSurface
 */
typedef uint32_t __pyx_t_4cuda_8bindings_8cydriver_VdpVideoSurface;

/* "cuda/bindings/cydriver.pxd":2419
 * ctypedef uint32_t VdpVideoSurface
 * 
 * ctypedef uint32_t VdpOutputSurface             # <<<<<<<<<<<<<<
 * 
 * cdef CUresult cuGetErrorString(CUresult error, const char** pStr) except ?CUDA_ERROR_NOT_FOUND nogil
 */
typedef uint32_t __pyx_t_4cuda_8bindings_8cydriver_VdpOutputSurface;

/* "cuda/bindings/cyruntime.pxd":1438
 *         cudaRoundMinInf = 3
 * 
 * ctypedef unsigned int GLenum             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int GLuint
 */
typedef unsigned int __pyx_t_4cuda_8bindings_9cyruntime_GLenum;

/* "cuda/bindings/cyruntime.pxd":1440
 * ctypedef unsigned int GLenum
 * 
 * ctypedef unsigned int GLuint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_8bindings_9cyruntime_GLuint;

/* "cuda/bindings/cyruntime.pxd":1452
 * ctypedef void* EGLStreamKHR
 * 
 * ctypedef unsigned int EGLint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef unsigned int __pyx_t_4cuda_8bindings_9cyruntime_EGLint;

/* "cuda/bindings/cyruntime.pxd":1459
 * ctypedef void* EGLSyncKHR
 * 
 * ctypedef uint32_t VdpDevice             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned long long VdpGetProcAddress
 */
typedef uint32_t __pyx_t_4cuda_8bindings_9cyruntime_VdpDevice;

/* "cuda/bindings/cyruntime.pxd":1461
 * ctypedef uint32_t VdpDevice
 * 
 * ctypedef unsigned long long VdpGetProcAddress             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpVideoSurface
 */
typedef unsigned PY_LONG_LONG __pyx_t_4cuda_8bindings_9cyruntime_VdpGetProcAddress;

/* "cuda/bindings/cyruntime.pxd":1463
 * ctypedef unsigned long long VdpGetProcAddress
 * 
 * ctypedef uint32_t VdpVideoSurface             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpOutputSurface
 */
typedef uint32_t __pyx_t_4cuda_8bindings_9cyruntime_VdpVideoSurface;

/* "cuda/bindings/cyruntime.pxd":1465
 * ctypedef uint32_t VdpVideoSurface
 * 
 * ctypedef uint32_t VdpOutputSurface             # <<<<<<<<<<<<<<
 * 
 * ctypedef cudaLaunchAttributeID cudaStreamAttrID
 */
typedef uint32_t __pyx_t_4cuda_8bindings_9cyruntime_VdpOutputSurface;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal;
union __pyx_t_4cuda_8bindings_8cydriver_anon_union14;
struct __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame_st;

/* "cuda/bindings/cydriver.pxd":2222
 *     ctypedef CUoutput_mode_enum CUoutput_mode
 * 
 * cdef enum CUeglFrameType_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_FRAME_TYPE_ARRAY = 0
 *     CU_EGL_FRAME_TYPE_PITCH = 1
 */
enum __pyx_t_4cuda_8bindings_8cydriver_CUeglFrameType_enum {
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_FRAME_TYPE_ARRAY = 0,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_FRAME_TYPE_PITCH = 1
};

/* "cuda/bindings/cydriver.pxd":2228
 * ctypedef CUeglFrameType_enum CUeglFrameType
 * 
 * cdef enum CUeglResourceLocationFlags_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_RESOURCE_LOCATION_SYSMEM = 0
 *     CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
 */
enum __pyx_t_4cuda_8bindings_8cydriver_CUeglResourceLocationFlags_enum {
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_RESOURCE_LOCATION_SYSMEM = 0,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
};

/* "cuda/bindings/cydriver.pxd":2234
 * ctypedef CUeglResourceLocationFlags_enum CUeglResourceLocationFlags
 * 
 * cdef enum CUeglColorFormat_enum:             # <<<<<<<<<<<<<<
 *     CU_EGL_COLOR_FORMAT_YUV420_PLANAR = 0
 *     CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR = 1
 */
enum __pyx_t_4cuda_8bindings_8cydriver_CUeglColorFormat_enum {
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV420_PLANAR = 0,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR = 1,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV422_PLANAR = 2,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV422_SEMIPLANAR = 3,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_RGB = 4,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BGR = 5,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_ARGB = 6,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_RGBA = 7,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_L = 8,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_R = 9,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV444_PLANAR = 10,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV444_SEMIPLANAR = 11,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUYV_422 = 12,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_UYVY_422 = 13,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_ABGR = 14,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BGRA = 15,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_A = 16,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_RG = 17,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_AYUV = 18,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU444_SEMIPLANAR = 19,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU422_SEMIPLANAR = 20,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR = 21,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR = 22,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR = 23,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR = 24,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR = 25,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_VYUY_ER = 26,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_UYVY_ER = 27,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUYV_ER = 28,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVYU_ER = 29,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV_ER = 30,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUVA_ER = 31,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_AYUV_ER = 32,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV444_PLANAR_ER = 33,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV422_PLANAR_ER = 34,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_ER = 35,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV444_SEMIPLANAR_ER = 36,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV422_SEMIPLANAR_ER = 37,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_ER = 38,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU444_PLANAR_ER = 39,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU422_PLANAR_ER = 40,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_ER = 41,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU444_SEMIPLANAR_ER = 42,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU422_SEMIPLANAR_ER = 43,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_ER = 44,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_RGGB = 45,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_BGGR = 46,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_GRBG = 47,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_GBRG = 48,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER10_RGGB = 49,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER10_BGGR = 50,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER10_GRBG = 51,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER10_GBRG = 52,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER12_RGGB = 53,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER12_BGGR = 54,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER12_GRBG = 55,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER12_GBRG = 56,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER14_RGGB = 57,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER14_BGGR = 58,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER14_GRBG = 59,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER14_GBRG = 60,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER20_RGGB = 61,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER20_BGGR = 62,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER20_GRBG = 63,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER20_GBRG = 64,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU444_PLANAR = 65,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU422_PLANAR = 66,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU420_PLANAR = 67,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_ISP_RGGB = 68,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_ISP_BGGR = 69,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_ISP_GRBG = 70,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_ISP_GBRG = 71,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_BCCR = 72,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_RCCB = 73,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_CRBC = 74,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER_CBRC = 75,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER10_CCCC = 76,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER12_BCCR = 77,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER12_RCCB = 78,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER12_CRBC = 79,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER12_CBRC = 80,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_BAYER12_CCCC = 81,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y = 82,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_2020 = 83,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_2020 = 84,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_2020 = 85,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_2020 = 86,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR_709 = 87,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR_709 = 88,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV420_PLANAR_709 = 89,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVU420_PLANAR_709 = 90,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_709 = 91,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_2020 = 92,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR_2020 = 93,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR = 94,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10V10U10_422_SEMIPLANAR_709 = 95,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y_ER = 96,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y_709_ER = 97,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10_ER = 98,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10_709_ER = 99,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y12_ER = 0x64,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y12_709_ER = 0x65,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUVA = 0x66,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YUV = 0x67,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_YVYU = 0x68,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_VYUY = 0x69,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_ER = 0x6A,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR_709_ER = 0x6B,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR_ER = 0x6C,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y10V10U10_444_SEMIPLANAR_709_ER = 0x6D,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR_ER = 0x6E,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR_709_ER = 0x6F,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR_ER = 0x70,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_Y12V12U12_444_SEMIPLANAR_709_ER = 0x71,
  __pyx_e_4cuda_8bindings_8cydriver_CU_EGL_COLOR_FORMAT_MAX = 0x72
};

/* "cuda/bindings/cydriver.pxd":2378
 * ctypedef CUeglStreamConnection_st* CUeglStreamConnection
 * 
 * cdef enum CUGLDeviceList_enum:             # <<<<<<<<<<<<<<
 *     CU_GL_DEVICE_LIST_ALL = 1
 *     CU_GL_DEVICE_LIST_CURRENT_FRAME = 2
 */
enum __pyx_t_4cuda_8bindings_8cydriver_CUGLDeviceList_enum {
  __pyx_e_4cuda_8bindings_8cydriver_CU_GL_DEVICE_LIST_ALL = 1,
  __pyx_e_4cuda_8bindings_8cydriver_CU_GL_DEVICE_LIST_CURRENT_FRAME = 2,
  __pyx_e_4cuda_8bindings_8cydriver_CU_GL_DEVICE_LIST_NEXT_FRAME = 3
};

/* "cuda/bindings/cydriver.pxd":2385
 * ctypedef CUGLDeviceList_enum CUGLDeviceList
 * 
 * cdef enum CUGLmap_flags_enum:             # <<<<<<<<<<<<<<
 *     CU_GL_MAP_RESOURCE_FLAGS_NONE = 0
 *     CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY = 1
 */
enum __pyx_t_4cuda_8bindings_8cydriver_CUGLmap_flags_enum {
  __pyx_e_4cuda_8bindings_8cydriver_CU_GL_MAP_RESOURCE_FLAGS_NONE = 0,
  __pyx_e_4cuda_8bindings_8cydriver_CU_GL_MAP_RESOURCE_FLAGS_READ_ONLY = 1,
  __pyx_e_4cuda_8bindings_8cydriver_CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 2
};

/* "cuda/bindings/cydriver.pxd":3333
 * cdef CUresult cuGraphicsVDPAURegisterOutputSurface(CUgraphicsResource* pCudaResource, VdpOutputSurface vdpSurface, unsigned int flags) except ?CUDA_ERROR_NOT_FOUND nogil
 * 
 * cdef enum: CUDA_VERSION = 12060             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_IPC_HANDLE_SIZE = 64
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_VERSION = 0x2F1C
};

/* "cuda/bindings/cydriver.pxd":3335
 * cdef enum: CUDA_VERSION = 12060
 * 
 * cdef enum: CU_IPC_HANDLE_SIZE = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_LEGACY = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_IPC_HANDLE_SIZE = 64
};

/* "cuda/bindings/cydriver.pxd":3337
 * cdef enum: CU_IPC_HANDLE_SIZE = 64
 * 
 * cdef enum: CU_STREAM_LEGACY = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_PER_THREAD = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_STREAM_LEGACY = 1
};

/* "cuda/bindings/cydriver.pxd":3339
 * cdef enum: CU_STREAM_LEGACY = 1
 * 
 * cdef enum: CU_STREAM_PER_THREAD = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_COMPUTE_ACCELERATED_TARGET_BASE = 65536
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_STREAM_PER_THREAD = 2
};

/* "cuda/bindings/cydriver.pxd":3341
 * cdef enum: CU_STREAM_PER_THREAD = 2
 * 
 * cdef enum: CU_COMPUTE_ACCELERATED_TARGET_BASE = 65536             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_COND_ASSIGN_DEFAULT = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_COMPUTE_ACCELERATED_TARGET_BASE = 0x10000
};

/* "cuda/bindings/cydriver.pxd":3343
 * cdef enum: CU_COMPUTE_ACCELERATED_TARGET_BASE = 65536
 * 
 * cdef enum: CU_GRAPH_COND_ASSIGN_DEFAULT = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_GRAPH_COND_ASSIGN_DEFAULT = 1
};

/* "cuda/bindings/cydriver.pxd":3345
 * cdef enum: CU_GRAPH_COND_ASSIGN_DEFAULT = 1
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0
};

/* "cuda/bindings/cydriver.pxd":3347
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_DEFAULT = 0
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1
};

/* "cuda/bindings/cydriver.pxd":3349
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_PROGRAMMATIC = 1
 * 
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2
};

/* "cuda/bindings/cydriver.pxd":3351
 * cdef enum: CU_GRAPH_KERNEL_NODE_PORT_LAUNCH_ORDER = 2
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
};

/* "cuda/bindings/cydriver.pxd":3353
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
};

/* "cuda/bindings/cydriver.pxd":3355
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_COOPERATIVE = 2
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4
};

/* "cuda/bindings/cydriver.pxd":3357
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_DIMENSION = 4
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5
};

/* "cuda/bindings/cydriver.pxd":3359
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_CLUSTER_SCHEDULING_POLICY_PREFERENCE = 5
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8
};

/* "cuda/bindings/cydriver.pxd":3361
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PRIORITY = 8
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
};

/* "cuda/bindings/cydriver.pxd":3363
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_DEVICE_UPDATABLE_KERNEL_NODE = 13
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
};

/* "cuda/bindings/cydriver.pxd":3365
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_DEVICE_UPDATABLE_KERNEL_NODE = 13             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = 14
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_KERNEL_NODE_ATTRIBUTE_DEVICE_UPDATABLE_KERNEL_NODE = 13
};

/* "cuda/bindings/cydriver.pxd":3367
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_DEVICE_UPDATABLE_KERNEL_NODE = 13
 * 
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = 14             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_KERNEL_NODE_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = 14
};

/* "cuda/bindings/cydriver.pxd":3369
 * cdef enum: CU_KERNEL_NODE_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = 14
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
};

/* "cuda/bindings/cydriver.pxd":3371
 * cdef enum: CU_STREAM_ATTRIBUTE_ACCESS_POLICY_WINDOW = 1
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_PRIORITY = 8
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
};

/* "cuda/bindings/cydriver.pxd":3373
 * cdef enum: CU_STREAM_ATTRIBUTE_SYNCHRONIZATION_POLICY = 3
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_PRIORITY = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_STREAM_ATTRIBUTE_PRIORITY = 8
};

/* "cuda/bindings/cydriver.pxd":3375
 * cdef enum: CU_STREAM_ATTRIBUTE_PRIORITY = 8
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
};

/* "cuda/bindings/cydriver.pxd":3377
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN_MAP = 9
 * 
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
};

/* "cuda/bindings/cydriver.pxd":3379
 * cdef enum: CU_STREAM_ATTRIBUTE_MEM_SYNC_DOMAIN = 10
 * 
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_MEMHOSTALLOC_PORTABLE = 1
};

/* "cuda/bindings/cydriver.pxd":3381
 * cdef enum: CU_MEMHOSTALLOC_PORTABLE = 1
 * 
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_MEMHOSTALLOC_DEVICEMAP = 2
};

/* "cuda/bindings/cydriver.pxd":3383
 * cdef enum: CU_MEMHOSTALLOC_DEVICEMAP = 2
 * 
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_MEMHOSTALLOC_WRITECOMBINED = 4
};

/* "cuda/bindings/cydriver.pxd":3385
 * cdef enum: CU_MEMHOSTALLOC_WRITECOMBINED = 4
 * 
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_MEMHOSTREGISTER_PORTABLE = 1
};

/* "cuda/bindings/cydriver.pxd":3387
 * cdef enum: CU_MEMHOSTREGISTER_PORTABLE = 1
 * 
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_MEMHOSTREGISTER_DEVICEMAP = 2
};

/* "cuda/bindings/cydriver.pxd":3389
 * cdef enum: CU_MEMHOSTREGISTER_DEVICEMAP = 2
 * 
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_MEMHOSTREGISTER_IOMEMORY = 4
};

/* "cuda/bindings/cydriver.pxd":3391
 * cdef enum: CU_MEMHOSTREGISTER_IOMEMORY = 4
 * 
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_MEMHOSTREGISTER_READ_ONLY = 8
};

/* "cuda/bindings/cydriver.pxd":3393
 * cdef enum: CU_MEMHOSTREGISTER_READ_ONLY = 8
 * 
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TENSOR_MAP_NUM_QWORDS = 16
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
};

/* "cuda/bindings/cydriver.pxd":3395
 * cdef enum: CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL = 1
 * 
 * cdef enum: CU_TENSOR_MAP_NUM_QWORDS = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_TENSOR_MAP_NUM_QWORDS = 16
};

/* "cuda/bindings/cydriver.pxd":3397
 * cdef enum: CU_TENSOR_MAP_NUM_QWORDS = 16
 * 
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_EXTERNAL_MEMORY_DEDICATED = 1
};

/* "cuda/bindings/cydriver.pxd":3399
 * cdef enum: CUDA_EXTERNAL_MEMORY_DEDICATED = 1
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
};

/* "cuda/bindings/cydriver.pxd":3401
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC = 1
 * 
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
};

/* "cuda/bindings/cydriver.pxd":3403
 * cdef enum: CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC = 2
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_NVSCISYNC_ATTR_SIGNAL = 1
};

/* "cuda/bindings/cydriver.pxd":3405
 * cdef enum: CUDA_NVSCISYNC_ATTR_SIGNAL = 1
 * 
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_NVSCISYNC_ATTR_WAIT = 2
};

/* "cuda/bindings/cydriver.pxd":3407
 * cdef enum: CUDA_NVSCISYNC_ATTR_WAIT = 2
 * 
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_MEM_CREATE_USAGE_TILE_POOL = 1
};

/* "cuda/bindings/cydriver.pxd":3409
 * cdef enum: CU_MEM_CREATE_USAGE_TILE_POOL = 1
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
};

/* "cuda/bindings/cydriver.pxd":3411
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC = 1
 * 
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
};

/* "cuda/bindings/cydriver.pxd":3413
 * cdef enum: CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC = 2
 * 
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_ARRAY3D_LAYERED = 1
};

/* "cuda/bindings/cydriver.pxd":3415
 * cdef enum: CUDA_ARRAY3D_LAYERED = 1
 * 
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_ARRAY3D_2DARRAY = 1
};

/* "cuda/bindings/cydriver.pxd":3417
 * cdef enum: CUDA_ARRAY3D_2DARRAY = 1
 * 
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_ARRAY3D_SURFACE_LDST = 2
};

/* "cuda/bindings/cydriver.pxd":3419
 * cdef enum: CUDA_ARRAY3D_SURFACE_LDST = 2
 * 
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_ARRAY3D_CUBEMAP = 4
};

/* "cuda/bindings/cydriver.pxd":3421
 * cdef enum: CUDA_ARRAY3D_CUBEMAP = 4
 * 
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_ARRAY3D_TEXTURE_GATHER = 8
};

/* "cuda/bindings/cydriver.pxd":3423
 * cdef enum: CUDA_ARRAY3D_TEXTURE_GATHER = 8
 * 
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_ARRAY3D_DEPTH_TEXTURE = 16
};

/* "cuda/bindings/cydriver.pxd":3425
 * cdef enum: CUDA_ARRAY3D_DEPTH_TEXTURE = 16
 * 
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
};

/* "cuda/bindings/cydriver.pxd":3427
 * cdef enum: CUDA_ARRAY3D_COLOR_ATTACHMENT = 32
 * 
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_ARRAY3D_SPARSE = 64
};

/* "cuda/bindings/cydriver.pxd":3429
 * cdef enum: CUDA_ARRAY3D_SPARSE = 64
 * 
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_ARRAY3D_VIDEO_ENCODE_DECODE = 256
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_ARRAY3D_DEFERRED_MAPPING = 0x80
};

/* "cuda/bindings/cydriver.pxd":3431
 * cdef enum: CUDA_ARRAY3D_DEFERRED_MAPPING = 128
 * 
 * cdef enum: CUDA_ARRAY3D_VIDEO_ENCODE_DECODE = 256             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_ARRAY3D_VIDEO_ENCODE_DECODE = 0x100
};

/* "cuda/bindings/cydriver.pxd":3433
 * cdef enum: CUDA_ARRAY3D_VIDEO_ENCODE_DECODE = 256
 * 
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_TRSA_OVERRIDE_FORMAT = 1
};

/* "cuda/bindings/cydriver.pxd":3435
 * cdef enum: CU_TRSA_OVERRIDE_FORMAT = 1
 * 
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_TRSF_READ_AS_INTEGER = 1
};

/* "cuda/bindings/cydriver.pxd":3437
 * cdef enum: CU_TRSF_READ_AS_INTEGER = 1
 * 
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_SRGB = 16
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_TRSF_NORMALIZED_COORDINATES = 2
};

/* "cuda/bindings/cydriver.pxd":3439
 * cdef enum: CU_TRSF_NORMALIZED_COORDINATES = 2
 * 
 * cdef enum: CU_TRSF_SRGB = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_TRSF_SRGB = 16
};

/* "cuda/bindings/cydriver.pxd":3441
 * cdef enum: CU_TRSF_SRGB = 16
 * 
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
};

/* "cuda/bindings/cydriver.pxd":3443
 * cdef enum: CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION = 32
 * 
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_END_AS_INT = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_TRSF_SEAMLESS_CUBEMAP = 64
};

/* "cuda/bindings/cydriver.pxd":3445
 * cdef enum: CU_TRSF_SEAMLESS_CUBEMAP = 64
 * 
 * cdef enum: CU_LAUNCH_PARAM_END_AS_INT = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_END = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_LAUNCH_PARAM_END_AS_INT = 0
};

/* "cuda/bindings/cydriver.pxd":3447
 * cdef enum: CU_LAUNCH_PARAM_END_AS_INT = 0
 * 
 * cdef enum: CU_LAUNCH_PARAM_END = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_LAUNCH_PARAM_END = 0
};

/* "cuda/bindings/cydriver.pxd":3449
 * cdef enum: CU_LAUNCH_PARAM_END = 0
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1
};

/* "cuda/bindings/cydriver.pxd":3451
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT = 1
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_LAUNCH_PARAM_BUFFER_POINTER = 1
};

/* "cuda/bindings/cydriver.pxd":3453
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_POINTER = 1
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2
};

/* "cuda/bindings/cydriver.pxd":3455
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT = 2
 * 
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_PARAM_TR_DEFAULT = -1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_LAUNCH_PARAM_BUFFER_SIZE = 2
};

/* "cuda/bindings/cydriver.pxd":3457
 * cdef enum: CU_LAUNCH_PARAM_BUFFER_SIZE = 2
 * 
 * cdef enum: CU_PARAM_TR_DEFAULT = -1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_DEVICE_CPU = -1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_PARAM_TR_DEFAULT = -1L
};

/* "cuda/bindings/cydriver.pxd":3459
 * cdef enum: CU_PARAM_TR_DEFAULT = -1
 * 
 * cdef enum: CU_DEVICE_CPU = -1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CU_DEVICE_INVALID = -2
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_DEVICE_CPU = -1L
};

/* "cuda/bindings/cydriver.pxd":3461
 * cdef enum: CU_DEVICE_CPU = -1
 * 
 * cdef enum: CU_DEVICE_INVALID = -2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: RESOURCE_ABI_VERSION = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CU_DEVICE_INVALID = -2L
};

/* "cuda/bindings/cydriver.pxd":3463
 * cdef enum: CU_DEVICE_INVALID = -2
 * 
 * cdef enum: RESOURCE_ABI_VERSION = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: RESOURCE_ABI_EXTERNAL_BYTES = 48
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_RESOURCE_ABI_VERSION = 1
};

/* "cuda/bindings/cydriver.pxd":3465
 * cdef enum: RESOURCE_ABI_VERSION = 1
 * 
 * cdef enum: RESOURCE_ABI_EXTERNAL_BYTES = 48             # <<<<<<<<<<<<<<
 * 
 * cdef enum: MAX_PLANES = 3
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_RESOURCE_ABI_EXTERNAL_BYTES = 48
};

/* "cuda/bindings/cydriver.pxd":3467
 * cdef enum: RESOURCE_ABI_EXTERNAL_BYTES = 48
 * 
 * cdef enum: MAX_PLANES = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EGL_INFINITE_TIMEOUT = 4294967295
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_MAX_PLANES = 3
};

/* "cuda/bindings/cydriver.pxd":3469
 * cdef enum: MAX_PLANES = 3
 * 
 * cdef enum: CUDA_EGL_INFINITE_TIMEOUT = 4294967295             # <<<<<<<<<<<<<<
 */
enum  {
  __pyx_e_4cuda_8bindings_8cydriver_CUDA_EGL_INFINITE_TIMEOUT = 0xFFFFFFFF
};

/* "cuda/bindings/cydriver.pxd":2226
 *     CU_EGL_FRAME_TYPE_PITCH = 1
 * 
 * ctypedef CUeglFrameType_enum CUeglFrameType             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUeglResourceLocationFlags_enum:
 */
typedef enum __pyx_t_4cuda_8bindings_8cydriver_CUeglFrameType_enum __pyx_t_4cuda_8bindings_8cydriver_CUeglFrameType;

/* "cuda/bindings/cydriver.pxd":2232
 *     CU_EGL_RESOURCE_LOCATION_VIDMEM = 1
 * 
 * ctypedef CUeglResourceLocationFlags_enum CUeglResourceLocationFlags             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUeglColorFormat_enum:
 */
typedef enum __pyx_t_4cuda_8bindings_8cydriver_CUeglResourceLocationFlags_enum __pyx_t_4cuda_8bindings_8cydriver_CUeglResourceLocationFlags;

/* "cuda/bindings/cydriver.pxd":2351
 *     CU_EGL_COLOR_FORMAT_MAX = 114
 * 
 * ctypedef CUeglColorFormat_enum CUeglColorFormat             # <<<<<<<<<<<<<<
 * 
 * cdef union anon_union14:
 */
typedef enum __pyx_t_4cuda_8bindings_8cydriver_CUeglColorFormat_enum __pyx_t_4cuda_8bindings_8cydriver_CUeglColorFormat;

/* "cuda/bindings/cydriver.pxd":2353
 * ctypedef CUeglColorFormat_enum CUeglColorFormat
 * 
 * cdef union anon_union14:             # <<<<<<<<<<<<<<
 *     CUarray pArray[3]
 *     void* pPitch[3]
 */
union __pyx_t_4cuda_8bindings_8cydriver_anon_union14 {
  CUarray pArray[3];
  void *pPitch[3];
};

/* "cuda/bindings/cydriver.pxd":2357
 *     void* pPitch[3]
 * 
 * cdef struct CUeglFrame_st:             # <<<<<<<<<<<<<<
 *     anon_union14 frame
 *     unsigned int width
 */
struct __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame_st {
  union __pyx_t_4cuda_8bindings_8cydriver_anon_union14 frame;
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  unsigned int pitch;
  unsigned int planeCount;
  unsigned int numChannels;
  __pyx_t_4cuda_8bindings_8cydriver_CUeglFrameType frameType;
  __pyx_t_4cuda_8bindings_8cydriver_CUeglColorFormat eglColorFormat;
  CUarray_format cuFormat;
};

/* "cuda/bindings/cydriver.pxd":2369
 *     CUarray_format cuFormat
 * 
 * ctypedef CUeglFrame_st CUeglFrame_v1             # <<<<<<<<<<<<<<
 * 
 * ctypedef CUeglFrame_v1 CUeglFrame
 */
typedef struct __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame_st __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame_v1;

/* "cuda/bindings/cydriver.pxd":2371
 * ctypedef CUeglFrame_st CUeglFrame_v1
 * 
 * ctypedef CUeglFrame_v1 CUeglFrame             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame_v1 __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame;

/* "cuda/bindings/cydriver.pxd":2376
 *     cdef struct CUeglStreamConnection_st:
 *         pass
 * ctypedef CUeglStreamConnection_st* CUeglStreamConnection             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUGLDeviceList_enum:
 */
typedef struct CUeglStreamConnection_st *__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection;

/* "cuda/bindings/cydriver.pxd":2383
 *     CU_GL_DEVICE_LIST_NEXT_FRAME = 3
 * 
 * ctypedef CUGLDeviceList_enum CUGLDeviceList             # <<<<<<<<<<<<<<
 * 
 * cdef enum CUGLmap_flags_enum:
 */
typedef enum __pyx_t_4cuda_8bindings_8cydriver_CUGLDeviceList_enum __pyx_t_4cuda_8bindings_8cydriver_CUGLDeviceList;

/* "cuda/bindings/cydriver.pxd":2390
 *     CU_GL_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 2
 * 
 * ctypedef CUGLmap_flags_enum CUGLmap_flags             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int GLenum
 */
typedef enum __pyx_t_4cuda_8bindings_8cydriver_CUGLmap_flags_enum __pyx_t_4cuda_8bindings_8cydriver_CUGLmap_flags;

/* "cuda/bindings/cydriver.pxd":2399
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLImageKHR             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef void *__pyx_t_4cuda_8bindings_8cydriver_EGLImageKHR;

/* "cuda/bindings/cydriver.pxd":2404
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLStreamKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int EGLint
 */
typedef void *__pyx_t_4cuda_8bindings_8cydriver_EGLStreamKHR;

/* "cuda/bindings/cydriver.pxd":2411
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLSyncKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpDevice
 */
typedef void *__pyx_t_4cuda_8bindings_8cydriver_EGLSyncKHR;
struct __pyx_t_4cuda_8bindings_9cyruntime_cudaEglPlaneDesc_st;
union __pyx_t_4cuda_8bindings_9cyruntime_anon_union10;
struct __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame_st;

/* "cuda/bindings/cyruntime.pxd":1475
 * ctypedef cudaLaunchAttributeValue cudaKernelNodeAttrValue
 * 
 * cdef enum cudaEglFrameType_enum:             # <<<<<<<<<<<<<<
 *     cudaEglFrameTypeArray = 0
 *     cudaEglFrameTypePitch = 1
 */
enum __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrameType_enum {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglFrameTypeArray = 0,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglFrameTypePitch = 1
};

/* "cuda/bindings/cyruntime.pxd":1481
 * ctypedef cudaEglFrameType_enum cudaEglFrameType
 * 
 * cdef enum cudaEglResourceLocationFlags_enum:             # <<<<<<<<<<<<<<
 *     cudaEglResourceLocationSysmem = 0
 *     cudaEglResourceLocationVidmem = 1
 */
enum __pyx_t_4cuda_8bindings_9cyruntime_cudaEglResourceLocationFlags_enum {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglResourceLocationSysmem = 0,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglResourceLocationVidmem = 1
};

/* "cuda/bindings/cyruntime.pxd":1487
 * ctypedef cudaEglResourceLocationFlags_enum cudaEglResourceLocationFlags
 * 
 * cdef enum cudaEglColorFormat_enum:             # <<<<<<<<<<<<<<
 *     cudaEglColorFormatYUV420Planar = 0
 *     cudaEglColorFormatYUV420SemiPlanar = 1
 */
enum __pyx_t_4cuda_8bindings_9cyruntime_cudaEglColorFormat_enum {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV420Planar = 0,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV420SemiPlanar = 1,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV422Planar = 2,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV422SemiPlanar = 3,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatARGB = 6,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatRGBA = 7,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatL = 8,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatR = 9,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV444Planar = 10,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV444SemiPlanar = 11,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUYV422 = 12,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatUYVY422 = 13,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatABGR = 14,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBGRA = 15,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatA = 16,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatRG = 17,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatAYUV = 18,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU444SemiPlanar = 19,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU422SemiPlanar = 20,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU420SemiPlanar = 21,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10V10U10_444SemiPlanar = 22,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10V10U10_420SemiPlanar = 23,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY12V12U12_444SemiPlanar = 24,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY12V12U12_420SemiPlanar = 25,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatVYUY_ER = 26,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatUYVY_ER = 27,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUYV_ER = 28,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVYU_ER = 29,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUVA_ER = 31,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatAYUV_ER = 32,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV444Planar_ER = 33,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV422Planar_ER = 34,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV420Planar_ER = 35,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV444SemiPlanar_ER = 36,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV422SemiPlanar_ER = 37,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV420SemiPlanar_ER = 38,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU444Planar_ER = 39,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU422Planar_ER = 40,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU420Planar_ER = 41,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU444SemiPlanar_ER = 42,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU422SemiPlanar_ER = 43,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU420SemiPlanar_ER = 44,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerRGGB = 45,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerBGGR = 46,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerGRBG = 47,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerGBRG = 48,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer10RGGB = 49,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer10BGGR = 50,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer10GRBG = 51,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer10GBRG = 52,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer12RGGB = 53,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer12BGGR = 54,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer12GRBG = 55,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer12GBRG = 56,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer14RGGB = 57,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer14BGGR = 58,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer14GRBG = 59,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer14GBRG = 60,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer20RGGB = 61,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer20BGGR = 62,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer20GRBG = 63,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer20GBRG = 64,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU444Planar = 65,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU422Planar = 66,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU420Planar = 67,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerIspRGGB = 68,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerIspBGGR = 69,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerIspGRBG = 70,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerIspGBRG = 71,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerBCCR = 72,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerRCCB = 73,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerCRBC = 74,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayerCBRC = 75,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer10CCCC = 76,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer12BCCR = 77,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer12RCCB = 78,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer12CRBC = 79,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer12CBRC = 80,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatBayer12CCCC = 81,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY = 82,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV420SemiPlanar_2020 = 83,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU420SemiPlanar_2020 = 84,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV420Planar_2020 = 85,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU420Planar_2020 = 86,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV420SemiPlanar_709 = 87,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU420SemiPlanar_709 = 88,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUV420Planar_709 = 89,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVU420Planar_709 = 90,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10V10U10_420SemiPlanar_709 = 91,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10V10U10_420SemiPlanar_2020 = 92,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10V10U10_422SemiPlanar_2020 = 93,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10V10U10_422SemiPlanar = 94,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10V10U10_422SemiPlanar_709 = 95,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY_ER = 96,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY_709_ER = 97,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10_ER = 98,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10_709_ER = 99,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY12_ER = 0x64,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY12_709_ER = 0x65,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYUVA = 0x66,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatYVYU = 0x68,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatVYUY = 0x69,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10V10U10_420SemiPlanar_ER = 0x6A,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10V10U10_420SemiPlanar_709_ER = 0x6B,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10V10U10_444SemiPlanar_ER = 0x6C,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY10V10U10_444SemiPlanar_709_ER = 0x6D,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY12V12U12_420SemiPlanar_ER = 0x6E,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY12V12U12_420SemiPlanar_709_ER = 0x6F,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY12V12U12_444SemiPlanar_ER = 0x70,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEglColorFormatY12V12U12_444SemiPlanar_709_ER = 0x71
};

/* "cuda/bindings/cyruntime.pxd":1630
 * ctypedef CUeglStreamConnection_st* cudaEglStreamConnection
 * 
 * cdef enum cudaGLDeviceList:             # <<<<<<<<<<<<<<
 *     cudaGLDeviceListAll = 1
 *     cudaGLDeviceListCurrentFrame = 2
 */
enum __pyx_t_4cuda_8bindings_9cyruntime_cudaGLDeviceList {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaGLDeviceListAll = 1,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaGLDeviceListCurrentFrame = 2,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaGLDeviceListNextFrame = 3
};

/* "cuda/bindings/cyruntime.pxd":1635
 *     cudaGLDeviceListNextFrame = 3
 * 
 * cdef enum cudaGLMapFlags:             # <<<<<<<<<<<<<<
 *     cudaGLMapFlagsNone = 0
 *     cudaGLMapFlagsReadOnly = 1
 */
enum __pyx_t_4cuda_8bindings_9cyruntime_cudaGLMapFlags {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaGLMapFlagsNone = 0,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaGLMapFlagsReadOnly = 1,
  __pyx_e_4cuda_8bindings_9cyruntime_cudaGLMapFlagsWriteDiscard = 2
};

/* "cuda/bindings/cyruntime.pxd":2236
 * cdef cudaError_t getLocalRuntimeVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil
 * 
 * cdef enum: cudaHostAllocDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostAllocPortable = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaHostAllocDefault = 0
};

/* "cuda/bindings/cyruntime.pxd":2238
 * cdef enum: cudaHostAllocDefault = 0
 * 
 * cdef enum: cudaHostAllocPortable = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostAllocMapped = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaHostAllocPortable = 1
};

/* "cuda/bindings/cyruntime.pxd":2240
 * cdef enum: cudaHostAllocPortable = 1
 * 
 * cdef enum: cudaHostAllocMapped = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostAllocWriteCombined = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaHostAllocMapped = 2
};

/* "cuda/bindings/cyruntime.pxd":2242
 * cdef enum: cudaHostAllocMapped = 2
 * 
 * cdef enum: cudaHostAllocWriteCombined = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterDefault = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaHostAllocWriteCombined = 4
};

/* "cuda/bindings/cyruntime.pxd":2244
 * cdef enum: cudaHostAllocWriteCombined = 4
 * 
 * cdef enum: cudaHostRegisterDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterPortable = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaHostRegisterDefault = 0
};

/* "cuda/bindings/cyruntime.pxd":2246
 * cdef enum: cudaHostRegisterDefault = 0
 * 
 * cdef enum: cudaHostRegisterPortable = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterMapped = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaHostRegisterPortable = 1
};

/* "cuda/bindings/cyruntime.pxd":2248
 * cdef enum: cudaHostRegisterPortable = 1
 * 
 * cdef enum: cudaHostRegisterMapped = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterIoMemory = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaHostRegisterMapped = 2
};

/* "cuda/bindings/cyruntime.pxd":2250
 * cdef enum: cudaHostRegisterMapped = 2
 * 
 * cdef enum: cudaHostRegisterIoMemory = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaHostRegisterReadOnly = 8
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaHostRegisterIoMemory = 4
};

/* "cuda/bindings/cyruntime.pxd":2252
 * cdef enum: cudaHostRegisterIoMemory = 4
 * 
 * cdef enum: cudaHostRegisterReadOnly = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaPeerAccessDefault = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaHostRegisterReadOnly = 8
};

/* "cuda/bindings/cyruntime.pxd":2254
 * cdef enum: cudaHostRegisterReadOnly = 8
 * 
 * cdef enum: cudaPeerAccessDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamDefault = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaPeerAccessDefault = 0
};

/* "cuda/bindings/cyruntime.pxd":2256
 * cdef enum: cudaPeerAccessDefault = 0
 * 
 * cdef enum: cudaStreamDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamNonBlocking = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaStreamDefault = 0
};

/* "cuda/bindings/cyruntime.pxd":2258
 * cdef enum: cudaStreamDefault = 0
 * 
 * cdef enum: cudaStreamNonBlocking = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamLegacy = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaStreamNonBlocking = 1
};

/* "cuda/bindings/cyruntime.pxd":2260
 * cdef enum: cudaStreamNonBlocking = 1
 * 
 * cdef enum: cudaStreamLegacy = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamPerThread = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaStreamLegacy = 1
};

/* "cuda/bindings/cyruntime.pxd":2262
 * cdef enum: cudaStreamLegacy = 1
 * 
 * cdef enum: cudaStreamPerThread = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventDefault = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaStreamPerThread = 2
};

/* "cuda/bindings/cyruntime.pxd":2264
 * cdef enum: cudaStreamPerThread = 2
 * 
 * cdef enum: cudaEventDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventBlockingSync = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEventDefault = 0
};

/* "cuda/bindings/cyruntime.pxd":2266
 * cdef enum: cudaEventDefault = 0
 * 
 * cdef enum: cudaEventBlockingSync = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventDisableTiming = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEventBlockingSync = 1
};

/* "cuda/bindings/cyruntime.pxd":2268
 * cdef enum: cudaEventBlockingSync = 1
 * 
 * cdef enum: cudaEventDisableTiming = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventInterprocess = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEventDisableTiming = 2
};

/* "cuda/bindings/cyruntime.pxd":2270
 * cdef enum: cudaEventDisableTiming = 2
 * 
 * cdef enum: cudaEventInterprocess = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventRecordDefault = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEventInterprocess = 4
};

/* "cuda/bindings/cyruntime.pxd":2272
 * cdef enum: cudaEventInterprocess = 4
 * 
 * cdef enum: cudaEventRecordDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventRecordExternal = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEventRecordDefault = 0
};

/* "cuda/bindings/cyruntime.pxd":2274
 * cdef enum: cudaEventRecordDefault = 0
 * 
 * cdef enum: cudaEventRecordExternal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventWaitDefault = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEventRecordExternal = 1
};

/* "cuda/bindings/cyruntime.pxd":2276
 * cdef enum: cudaEventRecordExternal = 1
 * 
 * cdef enum: cudaEventWaitDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaEventWaitExternal = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEventWaitDefault = 0
};

/* "cuda/bindings/cyruntime.pxd":2278
 * cdef enum: cudaEventWaitDefault = 0
 * 
 * cdef enum: cudaEventWaitExternal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleAuto = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaEventWaitExternal = 1
};

/* "cuda/bindings/cyruntime.pxd":2280
 * cdef enum: cudaEventWaitExternal = 1
 * 
 * cdef enum: cudaDeviceScheduleAuto = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleSpin = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleAuto = 0
};

/* "cuda/bindings/cyruntime.pxd":2282
 * cdef enum: cudaDeviceScheduleAuto = 0
 * 
 * cdef enum: cudaDeviceScheduleSpin = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleYield = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleSpin = 1
};

/* "cuda/bindings/cyruntime.pxd":2284
 * cdef enum: cudaDeviceScheduleSpin = 1
 * 
 * cdef enum: cudaDeviceScheduleYield = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleBlockingSync = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleYield = 2
};

/* "cuda/bindings/cyruntime.pxd":2286
 * cdef enum: cudaDeviceScheduleYield = 2
 * 
 * cdef enum: cudaDeviceScheduleBlockingSync = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceBlockingSync = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleBlockingSync = 4
};

/* "cuda/bindings/cyruntime.pxd":2288
 * cdef enum: cudaDeviceScheduleBlockingSync = 4
 * 
 * cdef enum: cudaDeviceBlockingSync = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceScheduleMask = 7
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceBlockingSync = 4
};

/* "cuda/bindings/cyruntime.pxd":2290
 * cdef enum: cudaDeviceBlockingSync = 4
 * 
 * cdef enum: cudaDeviceScheduleMask = 7             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceMapHost = 8
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleMask = 7
};

/* "cuda/bindings/cyruntime.pxd":2292
 * cdef enum: cudaDeviceScheduleMask = 7
 * 
 * cdef enum: cudaDeviceMapHost = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceLmemResizeToMax = 16
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceMapHost = 8
};

/* "cuda/bindings/cyruntime.pxd":2294
 * cdef enum: cudaDeviceMapHost = 8
 * 
 * cdef enum: cudaDeviceLmemResizeToMax = 16             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceSyncMemops = 128
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceLmemResizeToMax = 16
};

/* "cuda/bindings/cyruntime.pxd":2296
 * cdef enum: cudaDeviceLmemResizeToMax = 16
 * 
 * cdef enum: cudaDeviceSyncMemops = 128             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaDeviceMask = 255
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceSyncMemops = 0x80
};

/* "cuda/bindings/cyruntime.pxd":2298
 * cdef enum: cudaDeviceSyncMemops = 128
 * 
 * cdef enum: cudaDeviceMask = 255             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayDefault = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceMask = 0xFF
};

/* "cuda/bindings/cyruntime.pxd":2300
 * cdef enum: cudaDeviceMask = 255
 * 
 * cdef enum: cudaArrayDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayLayered = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaArrayDefault = 0
};

/* "cuda/bindings/cyruntime.pxd":2302
 * cdef enum: cudaArrayDefault = 0
 * 
 * cdef enum: cudaArrayLayered = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArraySurfaceLoadStore = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaArrayLayered = 1
};

/* "cuda/bindings/cyruntime.pxd":2304
 * cdef enum: cudaArrayLayered = 1
 * 
 * cdef enum: cudaArraySurfaceLoadStore = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayCubemap = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaArraySurfaceLoadStore = 2
};

/* "cuda/bindings/cyruntime.pxd":2306
 * cdef enum: cudaArraySurfaceLoadStore = 2
 * 
 * cdef enum: cudaArrayCubemap = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayTextureGather = 8
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaArrayCubemap = 4
};

/* "cuda/bindings/cyruntime.pxd":2308
 * cdef enum: cudaArrayCubemap = 4
 * 
 * cdef enum: cudaArrayTextureGather = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayColorAttachment = 32
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaArrayTextureGather = 8
};

/* "cuda/bindings/cyruntime.pxd":2310
 * cdef enum: cudaArrayTextureGather = 8
 * 
 * cdef enum: cudaArrayColorAttachment = 32             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArraySparse = 64
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaArrayColorAttachment = 32
};

/* "cuda/bindings/cyruntime.pxd":2312
 * cdef enum: cudaArrayColorAttachment = 32
 * 
 * cdef enum: cudaArraySparse = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArrayDeferredMapping = 128
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaArraySparse = 64
};

/* "cuda/bindings/cyruntime.pxd":2314
 * cdef enum: cudaArraySparse = 64
 * 
 * cdef enum: cudaArrayDeferredMapping = 128             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaIpcMemLazyEnablePeerAccess = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaArrayDeferredMapping = 0x80
};

/* "cuda/bindings/cyruntime.pxd":2316
 * cdef enum: cudaArrayDeferredMapping = 128
 * 
 * cdef enum: cudaIpcMemLazyEnablePeerAccess = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaMemAttachGlobal = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaIpcMemLazyEnablePeerAccess = 1
};

/* "cuda/bindings/cyruntime.pxd":2318
 * cdef enum: cudaIpcMemLazyEnablePeerAccess = 1
 * 
 * cdef enum: cudaMemAttachGlobal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaMemAttachHost = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaMemAttachGlobal = 1
};

/* "cuda/bindings/cyruntime.pxd":2320
 * cdef enum: cudaMemAttachGlobal = 1
 * 
 * cdef enum: cudaMemAttachHost = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaMemAttachSingle = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaMemAttachHost = 2
};

/* "cuda/bindings/cyruntime.pxd":2322
 * cdef enum: cudaMemAttachHost = 2
 * 
 * cdef enum: cudaMemAttachSingle = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaOccupancyDefault = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaMemAttachSingle = 4
};

/* "cuda/bindings/cyruntime.pxd":2324
 * cdef enum: cudaMemAttachSingle = 4
 * 
 * cdef enum: cudaOccupancyDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaOccupancyDisableCachingOverride = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaOccupancyDefault = 0
};

/* "cuda/bindings/cyruntime.pxd":2326
 * cdef enum: cudaOccupancyDefault = 0
 * 
 * cdef enum: cudaOccupancyDisableCachingOverride = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaCpuDeviceId = -1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaOccupancyDisableCachingOverride = 1
};

/* "cuda/bindings/cyruntime.pxd":2328
 * cdef enum: cudaOccupancyDisableCachingOverride = 1
 * 
 * cdef enum: cudaCpuDeviceId = -1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaInvalidDeviceId = -2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaCpuDeviceId = -1L
};

/* "cuda/bindings/cyruntime.pxd":2330
 * cdef enum: cudaCpuDeviceId = -1
 * 
 * cdef enum: cudaInvalidDeviceId = -2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaInitDeviceFlagsAreValid = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaInvalidDeviceId = -2L
};

/* "cuda/bindings/cyruntime.pxd":2332
 * cdef enum: cudaInvalidDeviceId = -2
 * 
 * cdef enum: cudaInitDeviceFlagsAreValid = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPreSync = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaInitDeviceFlagsAreValid = 1
};

/* "cuda/bindings/cyruntime.pxd":2334
 * cdef enum: cudaInitDeviceFlagsAreValid = 1
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPreSync = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPostSync = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaCooperativeLaunchMultiDeviceNoPreSync = 1
};

/* "cuda/bindings/cyruntime.pxd":2336
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPreSync = 1
 * 
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPostSync = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaArraySparsePropertiesSingleMipTail = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaCooperativeLaunchMultiDeviceNoPostSync = 2
};

/* "cuda/bindings/cyruntime.pxd":2338
 * cdef enum: cudaCooperativeLaunchMultiDeviceNoPostSync = 2
 * 
 * cdef enum: cudaArraySparsePropertiesSingleMipTail = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_IPC_HANDLE_SIZE = 64
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaArraySparsePropertiesSingleMipTail = 1
};

/* "cuda/bindings/cyruntime.pxd":2340
 * cdef enum: cudaArraySparsePropertiesSingleMipTail = 1
 * 
 * cdef enum: CUDA_IPC_HANDLE_SIZE = 64             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaExternalMemoryDedicated = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_CUDA_IPC_HANDLE_SIZE = 64
};

/* "cuda/bindings/cyruntime.pxd":2342
 * cdef enum: CUDA_IPC_HANDLE_SIZE = 64
 * 
 * cdef enum: cudaExternalMemoryDedicated = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaExternalMemoryDedicated = 1
};

/* "cuda/bindings/cyruntime.pxd":2344
 * cdef enum: cudaExternalMemoryDedicated = 1
 * 
 * cdef enum: cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1
};

/* "cuda/bindings/cyruntime.pxd":2346
 * cdef enum: cudaExternalSemaphoreSignalSkipNvSciBufMemSync = 1
 * 
 * cdef enum: cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaNvSciSyncAttrSignal = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2
};

/* "cuda/bindings/cyruntime.pxd":2348
 * cdef enum: cudaExternalSemaphoreWaitSkipNvSciBufMemSync = 2
 * 
 * cdef enum: cudaNvSciSyncAttrSignal = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaNvSciSyncAttrWait = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaNvSciSyncAttrSignal = 1
};

/* "cuda/bindings/cyruntime.pxd":2350
 * cdef enum: cudaNvSciSyncAttrSignal = 1
 * 
 * cdef enum: cudaNvSciSyncAttrWait = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaGraphKernelNodePortDefault = 0
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaNvSciSyncAttrWait = 2
};

/* "cuda/bindings/cyruntime.pxd":2352
 * cdef enum: cudaNvSciSyncAttrWait = 2
 * 
 * cdef enum: cudaGraphKernelNodePortDefault = 0             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaGraphKernelNodePortProgrammatic = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaGraphKernelNodePortDefault = 0
};

/* "cuda/bindings/cyruntime.pxd":2354
 * cdef enum: cudaGraphKernelNodePortDefault = 0
 * 
 * cdef enum: cudaGraphKernelNodePortProgrammatic = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaGraphKernelNodePortLaunchCompletion = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaGraphKernelNodePortProgrammatic = 1
};

/* "cuda/bindings/cyruntime.pxd":2356
 * cdef enum: cudaGraphKernelNodePortProgrammatic = 1
 * 
 * cdef enum: cudaGraphKernelNodePortLaunchCompletion = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamAttributeAccessPolicyWindow = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaGraphKernelNodePortLaunchCompletion = 2
};

/* "cuda/bindings/cyruntime.pxd":2358
 * cdef enum: cudaGraphKernelNodePortLaunchCompletion = 2
 * 
 * cdef enum: cudaStreamAttributeAccessPolicyWindow = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamAttributeSynchronizationPolicy = 3
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaStreamAttributeAccessPolicyWindow = 1
};

/* "cuda/bindings/cyruntime.pxd":2360
 * cdef enum: cudaStreamAttributeAccessPolicyWindow = 1
 * 
 * cdef enum: cudaStreamAttributeSynchronizationPolicy = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamAttributeMemSyncDomainMap = 9
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaStreamAttributeSynchronizationPolicy = 3
};

/* "cuda/bindings/cyruntime.pxd":2362
 * cdef enum: cudaStreamAttributeSynchronizationPolicy = 3
 * 
 * cdef enum: cudaStreamAttributeMemSyncDomainMap = 9             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamAttributeMemSyncDomain = 10
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaStreamAttributeMemSyncDomainMap = 9
};

/* "cuda/bindings/cyruntime.pxd":2364
 * cdef enum: cudaStreamAttributeMemSyncDomainMap = 9
 * 
 * cdef enum: cudaStreamAttributeMemSyncDomain = 10             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaStreamAttributePriority = 8
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaStreamAttributeMemSyncDomain = 10
};

/* "cuda/bindings/cyruntime.pxd":2366
 * cdef enum: cudaStreamAttributeMemSyncDomain = 10
 * 
 * cdef enum: cudaStreamAttributePriority = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeAccessPolicyWindow = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaStreamAttributePriority = 8
};

/* "cuda/bindings/cyruntime.pxd":2368
 * cdef enum: cudaStreamAttributePriority = 8
 * 
 * cdef enum: cudaKernelNodeAttributeAccessPolicyWindow = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeCooperative = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaKernelNodeAttributeAccessPolicyWindow = 1
};

/* "cuda/bindings/cyruntime.pxd":2370
 * cdef enum: cudaKernelNodeAttributeAccessPolicyWindow = 1
 * 
 * cdef enum: cudaKernelNodeAttributeCooperative = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributePriority = 8
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaKernelNodeAttributeCooperative = 2
};

/* "cuda/bindings/cyruntime.pxd":2372
 * cdef enum: cudaKernelNodeAttributeCooperative = 2
 * 
 * cdef enum: cudaKernelNodeAttributePriority = 8             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeClusterDimension = 4
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaKernelNodeAttributePriority = 8
};

/* "cuda/bindings/cyruntime.pxd":2374
 * cdef enum: cudaKernelNodeAttributePriority = 8
 * 
 * cdef enum: cudaKernelNodeAttributeClusterDimension = 4             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeClusterSchedulingPolicyPreference = 5
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaKernelNodeAttributeClusterDimension = 4
};

/* "cuda/bindings/cyruntime.pxd":2376
 * cdef enum: cudaKernelNodeAttributeClusterDimension = 4
 * 
 * cdef enum: cudaKernelNodeAttributeClusterSchedulingPolicyPreference = 5             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeMemSyncDomainMap = 9
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaKernelNodeAttributeClusterSchedulingPolicyPreference = 5
};

/* "cuda/bindings/cyruntime.pxd":2378
 * cdef enum: cudaKernelNodeAttributeClusterSchedulingPolicyPreference = 5
 * 
 * cdef enum: cudaKernelNodeAttributeMemSyncDomainMap = 9             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeMemSyncDomain = 10
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaKernelNodeAttributeMemSyncDomainMap = 9
};

/* "cuda/bindings/cyruntime.pxd":2380
 * cdef enum: cudaKernelNodeAttributeMemSyncDomainMap = 9
 * 
 * cdef enum: cudaKernelNodeAttributeMemSyncDomain = 10             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributePreferredSharedMemoryCarveout = 14
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaKernelNodeAttributeMemSyncDomain = 10
};

/* "cuda/bindings/cyruntime.pxd":2382
 * cdef enum: cudaKernelNodeAttributeMemSyncDomain = 10
 * 
 * cdef enum: cudaKernelNodeAttributePreferredSharedMemoryCarveout = 14             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaKernelNodeAttributeDeviceUpdatableKernelNode = 13
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaKernelNodeAttributePreferredSharedMemoryCarveout = 14
};

/* "cuda/bindings/cyruntime.pxd":2384
 * cdef enum: cudaKernelNodeAttributePreferredSharedMemoryCarveout = 14
 * 
 * cdef enum: cudaKernelNodeAttributeDeviceUpdatableKernelNode = 13             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType1D = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaKernelNodeAttributeDeviceUpdatableKernelNode = 13
};

/* "cuda/bindings/cyruntime.pxd":2386
 * cdef enum: cudaKernelNodeAttributeDeviceUpdatableKernelNode = 13
 * 
 * cdef enum: cudaSurfaceType1D = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType2D = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaSurfaceType1D = 1
};

/* "cuda/bindings/cyruntime.pxd":2388
 * cdef enum: cudaSurfaceType1D = 1
 * 
 * cdef enum: cudaSurfaceType2D = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType3D = 3
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaSurfaceType2D = 2
};

/* "cuda/bindings/cyruntime.pxd":2390
 * cdef enum: cudaSurfaceType2D = 2
 * 
 * cdef enum: cudaSurfaceType3D = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceTypeCubemap = 12
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaSurfaceType3D = 3
};

/* "cuda/bindings/cyruntime.pxd":2392
 * cdef enum: cudaSurfaceType3D = 3
 * 
 * cdef enum: cudaSurfaceTypeCubemap = 12             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType1DLayered = 241
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaSurfaceTypeCubemap = 12
};

/* "cuda/bindings/cyruntime.pxd":2394
 * cdef enum: cudaSurfaceTypeCubemap = 12
 * 
 * cdef enum: cudaSurfaceType1DLayered = 241             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceType2DLayered = 242
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaSurfaceType1DLayered = 0xF1
};

/* "cuda/bindings/cyruntime.pxd":2396
 * cdef enum: cudaSurfaceType1DLayered = 241
 * 
 * cdef enum: cudaSurfaceType2DLayered = 242             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaSurfaceTypeCubemapLayered = 252
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaSurfaceType2DLayered = 0xF2
};

/* "cuda/bindings/cyruntime.pxd":2398
 * cdef enum: cudaSurfaceType2DLayered = 242
 * 
 * cdef enum: cudaSurfaceTypeCubemapLayered = 252             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType1D = 1
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaSurfaceTypeCubemapLayered = 0xFC
};

/* "cuda/bindings/cyruntime.pxd":2400
 * cdef enum: cudaSurfaceTypeCubemapLayered = 252
 * 
 * cdef enum: cudaTextureType1D = 1             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType2D = 2
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaTextureType1D = 1
};

/* "cuda/bindings/cyruntime.pxd":2402
 * cdef enum: cudaTextureType1D = 1
 * 
 * cdef enum: cudaTextureType2D = 2             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType3D = 3
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaTextureType2D = 2
};

/* "cuda/bindings/cyruntime.pxd":2404
 * cdef enum: cudaTextureType2D = 2
 * 
 * cdef enum: cudaTextureType3D = 3             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureTypeCubemap = 12
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaTextureType3D = 3
};

/* "cuda/bindings/cyruntime.pxd":2406
 * cdef enum: cudaTextureType3D = 3
 * 
 * cdef enum: cudaTextureTypeCubemap = 12             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType1DLayered = 241
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaTextureTypeCubemap = 12
};

/* "cuda/bindings/cyruntime.pxd":2408
 * cdef enum: cudaTextureTypeCubemap = 12
 * 
 * cdef enum: cudaTextureType1DLayered = 241             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureType2DLayered = 242
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaTextureType1DLayered = 0xF1
};

/* "cuda/bindings/cyruntime.pxd":2410
 * cdef enum: cudaTextureType1DLayered = 241
 * 
 * cdef enum: cudaTextureType2DLayered = 242             # <<<<<<<<<<<<<<
 * 
 * cdef enum: cudaTextureTypeCubemapLayered = 252
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaTextureType2DLayered = 0xF2
};

/* "cuda/bindings/cyruntime.pxd":2412
 * cdef enum: cudaTextureType2DLayered = 242
 * 
 * cdef enum: cudaTextureTypeCubemapLayered = 252             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDART_VERSION = 12060
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_cudaTextureTypeCubemapLayered = 0xFC
};

/* "cuda/bindings/cyruntime.pxd":2414
 * cdef enum: cudaTextureTypeCubemapLayered = 252
 * 
 * cdef enum: CUDART_VERSION = 12060             # <<<<<<<<<<<<<<
 * 
 * cdef enum: __CUDART_API_VERSION = 12060
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_CUDART_VERSION = 0x2F1C
};

/* "cuda/bindings/cyruntime.pxd":2416
 * cdef enum: CUDART_VERSION = 12060
 * 
 * cdef enum: __CUDART_API_VERSION = 12060             # <<<<<<<<<<<<<<
 * 
 * cdef enum: CUDA_EGL_MAX_PLANES = 3
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime___CUDART_API_VERSION = 0x2F1C
};

/* "cuda/bindings/cyruntime.pxd":2418
 * cdef enum: __CUDART_API_VERSION = 12060
 * 
 * cdef enum: CUDA_EGL_MAX_PLANES = 3             # <<<<<<<<<<<<<<
 */
enum  {
  __pyx_e_4cuda_8bindings_9cyruntime_CUDA_EGL_MAX_PLANES = 3
};

/* "cuda/bindings/cyruntime.pxd":1445
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLImageKHR             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef void *__pyx_t_4cuda_8bindings_9cyruntime_EGLImageKHR;

/* "cuda/bindings/cyruntime.pxd":1450
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLStreamKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned int EGLint
 */
typedef void *__pyx_t_4cuda_8bindings_9cyruntime_EGLStreamKHR;

/* "cuda/bindings/cyruntime.pxd":1457
 *     cdef struct void:
 *         pass
 * ctypedef void* EGLSyncKHR             # <<<<<<<<<<<<<<
 * 
 * ctypedef uint32_t VdpDevice
 */
typedef void *__pyx_t_4cuda_8bindings_9cyruntime_EGLSyncKHR;

/* "cuda/bindings/cyruntime.pxd":1467
 * ctypedef uint32_t VdpOutputSurface
 * 
 * ctypedef cudaLaunchAttributeID cudaStreamAttrID             # <<<<<<<<<<<<<<
 * 
 * ctypedef cudaLaunchAttributeID cudaKernelNodeAttrID
 */
typedef enum cudaLaunchAttributeID __pyx_t_4cuda_8bindings_9cyruntime_cudaStreamAttrID;

/* "cuda/bindings/cyruntime.pxd":1469
 * ctypedef cudaLaunchAttributeID cudaStreamAttrID
 * 
 * ctypedef cudaLaunchAttributeID cudaKernelNodeAttrID             # <<<<<<<<<<<<<<
 * 
 * ctypedef cudaLaunchAttributeValue cudaStreamAttrValue
 */
typedef enum cudaLaunchAttributeID __pyx_t_4cuda_8bindings_9cyruntime_cudaKernelNodeAttrID;

/* "cuda/bindings/cyruntime.pxd":1471
 * ctypedef cudaLaunchAttributeID cudaKernelNodeAttrID
 * 
 * ctypedef cudaLaunchAttributeValue cudaStreamAttrValue             # <<<<<<<<<<<<<<
 * 
 * ctypedef cudaLaunchAttributeValue cudaKernelNodeAttrValue
 */
typedef union cudaLaunchAttributeValue __pyx_t_4cuda_8bindings_9cyruntime_cudaStreamAttrValue;

/* "cuda/bindings/cyruntime.pxd":1473
 * ctypedef cudaLaunchAttributeValue cudaStreamAttrValue
 * 
 * ctypedef cudaLaunchAttributeValue cudaKernelNodeAttrValue             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaEglFrameType_enum:
 */
typedef union cudaLaunchAttributeValue __pyx_t_4cuda_8bindings_9cyruntime_cudaKernelNodeAttrValue;

/* "cuda/bindings/cyruntime.pxd":1479
 *     cudaEglFrameTypePitch = 1
 * 
 * ctypedef cudaEglFrameType_enum cudaEglFrameType             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaEglResourceLocationFlags_enum:
 */
typedef enum __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrameType_enum __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrameType;

/* "cuda/bindings/cyruntime.pxd":1485
 *     cudaEglResourceLocationVidmem = 1
 * 
 * ctypedef cudaEglResourceLocationFlags_enum cudaEglResourceLocationFlags             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaEglColorFormat_enum:
 */
typedef enum __pyx_t_4cuda_8bindings_9cyruntime_cudaEglResourceLocationFlags_enum __pyx_t_4cuda_8bindings_9cyruntime_cudaEglResourceLocationFlags;

/* "cuda/bindings/cyruntime.pxd":1599
 *     cudaEglColorFormatY12V12U12_444SemiPlanar_709_ER = 113
 * 
 * ctypedef cudaEglColorFormat_enum cudaEglColorFormat             # <<<<<<<<<<<<<<
 * 
 * cdef struct cudaEglPlaneDesc_st:
 */
typedef enum __pyx_t_4cuda_8bindings_9cyruntime_cudaEglColorFormat_enum __pyx_t_4cuda_8bindings_9cyruntime_cudaEglColorFormat;

/* "cuda/bindings/cyruntime.pxd":1601
 * ctypedef cudaEglColorFormat_enum cudaEglColorFormat
 * 
 * cdef struct cudaEglPlaneDesc_st:             # <<<<<<<<<<<<<<
 *     unsigned int width
 *     unsigned int height
 */
struct __pyx_t_4cuda_8bindings_9cyruntime_cudaEglPlaneDesc_st {
  unsigned int width;
  unsigned int height;
  unsigned int depth;
  unsigned int pitch;
  unsigned int numChannels;
  struct cudaChannelFormatDesc channelDesc;
  unsigned int reserved[4];
};

/* "cuda/bindings/cyruntime.pxd":1610
 *     unsigned int reserved[4]
 * 
 * ctypedef cudaEglPlaneDesc_st cudaEglPlaneDesc             # <<<<<<<<<<<<<<
 * 
 * cdef union anon_union10:
 */
typedef struct __pyx_t_4cuda_8bindings_9cyruntime_cudaEglPlaneDesc_st __pyx_t_4cuda_8bindings_9cyruntime_cudaEglPlaneDesc;

/* "cuda/bindings/cyruntime.pxd":1612
 * ctypedef cudaEglPlaneDesc_st cudaEglPlaneDesc
 * 
 * cdef union anon_union10:             # <<<<<<<<<<<<<<
 *     cudaArray_t pArray[3]
 *     cudaPitchedPtr pPitch[3]
 */
union __pyx_t_4cuda_8bindings_9cyruntime_anon_union10 {
  cudaArray_t pArray[3];
  struct cudaPitchedPtr pPitch[3];
};

/* "cuda/bindings/cyruntime.pxd":1616
 *     cudaPitchedPtr pPitch[3]
 * 
 * cdef struct cudaEglFrame_st:             # <<<<<<<<<<<<<<
 *     anon_union10 frame
 *     cudaEglPlaneDesc planeDesc[3]
 */
struct __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame_st {
  union __pyx_t_4cuda_8bindings_9cyruntime_anon_union10 frame;
  __pyx_t_4cuda_8bindings_9cyruntime_cudaEglPlaneDesc planeDesc[3];
  unsigned int planeCount;
  __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrameType frameType;
  __pyx_t_4cuda_8bindings_9cyruntime_cudaEglColorFormat eglColorFormat;
};

/* "cuda/bindings/cyruntime.pxd":1623
 *     cudaEglColorFormat eglColorFormat
 * 
 * ctypedef cudaEglFrame_st cudaEglFrame             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "":
 */
typedef struct __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame_st __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame;

/* "cuda/bindings/cyruntime.pxd":1628
 *     cdef struct CUeglStreamConnection_st:
 *         pass
 * ctypedef CUeglStreamConnection_st* cudaEglStreamConnection             # <<<<<<<<<<<<<<
 * 
 * cdef enum cudaGLDeviceList:
 */
typedef struct CUeglStreamConnection_st *__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection;
struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaAsyncCallbackData_st;
typedef struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaAsyncCallbackData_st __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaAsyncCallbackData_st;
struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice;

/* "cuda/bindings/_lib/cyruntime/utils.pxd":15
 * cimport cuda.bindings._bindings.cydriver as cydriver
 * 
 * ctypedef struct cudaAsyncCallbackData_st:             # <<<<<<<<<<<<<<
 *     cudaAsyncCallback callback
 *     void *userData
 */
struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaAsyncCallbackData_st {
  cudaAsyncCallback callback;
  void *userData;
};

/* "cuda/bindings/_lib/cyruntime/utils.pxd":19
 *     void *userData
 * 
 * ctypedef cudaAsyncCallbackData_st cudaAsyncCallbackData             # <<<<<<<<<<<<<<
 * 
 * cdef struct cudaPythonDevice:
 */
typedef __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaAsyncCallbackData_st __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaAsyncCallbackData;

/* "cuda/bindings/_lib/cyruntime/utils.pxd":21
 * ctypedef cudaAsyncCallbackData_st cudaAsyncCallbackData
 * 
 * cdef struct cudaPythonDevice:             # <<<<<<<<<<<<<<
 *     cydriver.CUdevice driverDevice
 *     cydriver.CUcontext primaryContext
 */
struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice {
  CUdevice driverDevice;
  CUcontext primaryContext;
  bool primaryContextRetained;
  int deviceOrdinal;
  struct cudaDeviceProp deviceProperties;
};

/* "cuda/bindings/_lib/cyruntime/utils.pxd":28
 *     cudaDeviceProp deviceProperties
 * 
 * cdef class cudaPythonGlobal:             # <<<<<<<<<<<<<<
 *     cdef bint _lazyInitDriver
 *     cdef int _numDevices
 */
struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal {
  PyObject_HEAD
  struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *__pyx_vtab;
  int _lazyInitDriver;
  int _numDevices;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *_deviceList;
  cudaError_t _lastError;
  int _CUDART_VERSION;
  std::map<cudaAsyncCallbackHandle_t,__pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaAsyncCallbackData *>  _asyncCallbackDataMap;
};



struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal {
  cudaError_t (*lazyInitDriver)(struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *);
  cudaError_t (*lazyInitContextState)(struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *);
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *(*getDevice)(struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *, int);
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *(*getDeviceFromDriver)(struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *, CUdevice);
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *(*getDeviceFromPrimaryCtx)(struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *, CUcontext);
};
static struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *__pyx_vtabptr_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
      static PyCodeObject *__pyx_frame_code = NULL;\
      CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
      int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
      if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
#if PY_VERSION_HEX >= 0x030b00a2
  #if PY_VERSION_HEX >= 0x030C00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     ((!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #endif
  #define __Pyx_EnterTracing(tstate)  PyThreadState_EnterTracing(tstate)
  #define __Pyx_LeaveTracing(tstate)  PyThreadState_LeaveTracing(tstate)
#elif PY_VERSION_HEX >= 0x030a00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->cframe->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->cframe->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                 || tstate->c_profilefunc != NULL);\
      } while (0)
#else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                         || tstate->c_profilefunc != NULL);\
      } while (0)
#endif
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 1, 1)) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 1)) {\
          __Pyx_EnterTracing(tstate);\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          __Pyx_LeaveTracing(tstate);\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_EnterTracing(tstate);
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      __Pyx_LeaveTracing(tstate);
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0)) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0)) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0)) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      __Pyx_EnterTracing(tstate);
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      __Pyx_LeaveTracing(tstate);
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = __Pyx_PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              __Pyx_PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* ErrOccurredWithGIL.proto */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_11
#define __PYX_HAVE_RT_ImportType_proto_3_0_11
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_11(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_11 {
   __Pyx_ImportType_CheckSize_Error_3_0_11 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_11 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_11 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_0_11(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */

/* Module declarations from "libc.stdint" */

/* Module declarations from "cuda.bindings.cydriver" */
static CUresult (*__pyx_f_4cuda_8bindings_8cydriver_cuTexObjectGetResourceDesc)(CUDA_RESOURCE_DESC *, CUtexObject); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_8cydriver_cuTexObjectGetResourceViewDesc)(CUDA_RESOURCE_VIEW_DESC *, CUtexObject); /*proto*/

/* Module declarations from "cuda.bindings.cyruntime" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.map" */

/* Module declarations from "cuda.bindings._bindings.cydriver" */
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGetErrorString)(CUresult, char const **); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDriverGetVersion)(int *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetTexture1DLinearMaxWidth)(size_t *, CUarray_format, unsigned int, CUdevice); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetAttribute)(int *, CUdevice_attribute, CUdevice); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetNvSciSyncAttributes)(void *, CUdevice, int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceSetMemPool)(CUdevice, CUmemoryPool); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetMemPool)(CUmemoryPool *, CUdevice); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetDefaultMemPool)(CUmemoryPool *, CUdevice); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFlushGPUDirectRDMAWrites)(CUflushGPUDirectRDMAWritesTarget, CUflushGPUDirectRDMAWritesScope); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDevicePrimaryCtxSetFlags_v2)(CUdevice, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDevicePrimaryCtxGetState)(CUdevice, unsigned int *, int *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetCurrent)(CUcontext); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent)(CUcontext *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetDevice)(CUdevice *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetFlags)(unsigned int *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSynchronize)(void); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetLimit)(CUlimit, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetLimit)(size_t *, CUlimit); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCacheConfig)(CUfunc_cache *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetCacheConfig)(CUfunc_cache); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetStreamPriorityRange)(int *, int *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxResetPersistingL2Cache)(void); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetSharedMemConfig)(CUsharedconfig *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetSharedMemConfig)(CUsharedconfig); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemGetInfo_v2)(size_t *, size_t *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAlloc_v2)(CUdeviceptr *, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemFree_v2)(CUdeviceptr); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemFreeHost)(void *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostAlloc)(void **, size_t, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostGetDevicePointer_v2)(CUdeviceptr *, void *, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostGetFlags)(unsigned int *, void *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAllocManaged)(CUdeviceptr *, size_t, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetByPCIBusId)(CUdevice *, char const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetPCIBusId)(char *, int, CUdevice); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcGetEventHandle)(CUipcEventHandle *, CUevent); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcOpenEventHandle)(CUevent *, CUipcEventHandle); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcGetMemHandle)(CUipcMemHandle *, CUdeviceptr); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcOpenMemHandle_v2)(CUdeviceptr *, CUipcMemHandle, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcCloseMemHandle)(CUdeviceptr); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostRegister_v2)(void *, size_t, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostUnregister)(void *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemcpyPeer)(CUdeviceptr, CUcontext, CUdeviceptr, CUcontext, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemcpyPeerAsync)(CUdeviceptr, CUcontext, CUdeviceptr, CUcontext, size_t, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD8_v2)(CUdeviceptr, unsigned char, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD2D8_v2)(CUdeviceptr, size_t, unsigned char, size_t, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD8Async)(CUdeviceptr, unsigned char, size_t, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD2D8Async)(CUdeviceptr, size_t, unsigned char, size_t, size_t, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayGetSparseProperties)(CUDA_ARRAY_SPARSE_PROPERTIES *, CUarray); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayGetSparseProperties)(CUDA_ARRAY_SPARSE_PROPERTIES *, CUmipmappedArray); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayGetMemoryRequirements)(CUDA_ARRAY_MEMORY_REQUIREMENTS *, CUarray, CUdevice); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayGetMemoryRequirements)(CUDA_ARRAY_MEMORY_REQUIREMENTS *, CUmipmappedArray, CUdevice); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayGetPlane)(CUarray *, CUarray, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayDestroy)(CUarray); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArray3DGetDescriptor_v2)(CUDA_ARRAY3D_DESCRIPTOR *, CUarray); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayGetLevel)(CUarray *, CUmipmappedArray, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayDestroy)(CUmipmappedArray); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemFreeAsync)(CUdeviceptr, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAllocAsync)(CUdeviceptr *, size_t, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolTrimTo)(CUmemoryPool, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolSetAttribute)(CUmemoryPool, CUmemPool_attribute, void *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolGetAttribute)(CUmemoryPool, CUmemPool_attribute, void *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolSetAccess)(CUmemoryPool, CUmemAccessDesc const *, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolGetAccess)(CUmemAccess_flags *, CUmemoryPool, CUmemLocation *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolCreate)(CUmemoryPool *, CUmemPoolProps const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolDestroy)(CUmemoryPool); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAllocFromPoolAsync)(CUdeviceptr *, size_t, CUmemoryPool, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolExportToShareableHandle)(void *, CUmemoryPool, CUmemAllocationHandleType, unsigned PY_LONG_LONG); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolImportFromShareableHandle)(CUmemoryPool *, void *, CUmemAllocationHandleType, unsigned PY_LONG_LONG); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolExportPointer)(CUmemPoolPtrExportData *, CUdeviceptr); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolImportPointer)(CUdeviceptr *, CUmemoryPool, CUmemPoolPtrExportData *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPrefetchAsync)(CUdeviceptr, size_t, CUdevice, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPrefetchAsync_v2)(CUdeviceptr, size_t, CUmemLocation, unsigned int, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAdvise)(CUdeviceptr, size_t, CUmem_advise, CUdevice); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAdvise_v2)(CUdeviceptr, size_t, CUmem_advise, CUmemLocation); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemRangeGetAttribute)(void *, size_t, CUmem_range_attribute, CUdeviceptr, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemRangeGetAttributes)(void **, size_t *, CUmem_range_attribute *, size_t, CUdeviceptr, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuPointerGetAttributes)(unsigned int, CUpointer_attribute *, void **, CUdeviceptr); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamCreate)(CUstream *, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamCreateWithPriority)(CUstream *, unsigned int, int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetPriority)(CUstream, int *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetFlags)(CUstream, unsigned int *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetId)(CUstream, unsigned PY_LONG_LONG *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamWaitEvent)(CUstream, CUevent, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamBeginCapture_v2)(CUstream, CUstreamCaptureMode); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamBeginCaptureToGraph)(CUstream, CUgraph, CUgraphNode const *, CUgraphEdgeData const *, size_t, CUstreamCaptureMode); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuThreadExchangeStreamCaptureMode)(CUstreamCaptureMode *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamEndCapture)(CUstream, CUgraph *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamIsCapturing)(CUstream, CUstreamCaptureStatus *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamUpdateCaptureDependencies)(CUstream, CUgraphNode *, size_t, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamUpdateCaptureDependencies_v2)(CUstream, CUgraphNode *, CUgraphEdgeData const *, size_t, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamAttachMemAsync)(CUstream, CUdeviceptr, size_t, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamQuery)(CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamSynchronize)(CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamDestroy_v2)(CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamCopyAttributes)(CUstream, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetAttribute)(CUstream, CUstreamAttrID, CUstreamAttrValue *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamSetAttribute)(CUstream, CUstreamAttrID, CUstreamAttrValue const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventCreate)(CUevent *, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventRecord)(CUevent, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventRecordWithFlags)(CUevent, CUstream, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventQuery)(CUevent); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventSynchronize)(CUevent); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventDestroy_v2)(CUevent); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventElapsedTime)(float *, CUevent, CUevent); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuImportExternalMemory)(CUexternalMemory *, CUDA_EXTERNAL_MEMORY_HANDLE_DESC const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuExternalMemoryGetMappedBuffer)(CUdeviceptr *, CUexternalMemory, CUDA_EXTERNAL_MEMORY_BUFFER_DESC const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuExternalMemoryGetMappedMipmappedArray)(CUmipmappedArray *, CUexternalMemory, CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDestroyExternalMemory)(CUexternalMemory); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuImportExternalSemaphore)(CUexternalSemaphore *, CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSignalExternalSemaphoresAsync)(CUexternalSemaphore const *, CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS const *, unsigned int, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuWaitExternalSemaphoresAsync)(CUexternalSemaphore const *, CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS const *, unsigned int, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDestroyExternalSemaphore)(CUexternalSemaphore); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute)(int *, CUfunction_attribute, CUfunction); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncSetAttribute)(CUfunction, CUfunction_attribute, int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncSetCacheConfig)(CUfunction, CUfunc_cache); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncSetSharedMemConfig)(CUfunction, CUsharedconfig); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphCreate)(CUgraph *, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddKernelNode_v2)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_KERNEL_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeGetParams_v2)(CUgraphNode, CUDA_KERNEL_NODE_PARAMS *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeSetParams_v2)(CUgraphNode, CUDA_KERNEL_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemcpyNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_MEMCPY3D const *, CUcontext); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemcpyNodeGetParams)(CUgraphNode, CUDA_MEMCPY3D *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemcpyNodeSetParams)(CUgraphNode, CUDA_MEMCPY3D const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemsetNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_MEMSET_NODE_PARAMS const *, CUcontext); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemsetNodeGetParams)(CUgraphNode, CUDA_MEMSET_NODE_PARAMS *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemsetNodeSetParams)(CUgraphNode, CUDA_MEMSET_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddHostNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_HOST_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphHostNodeGetParams)(CUgraphNode, CUDA_HOST_NODE_PARAMS *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphHostNodeSetParams)(CUgraphNode, CUDA_HOST_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddChildGraphNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUgraph); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphChildGraphNodeGetGraph)(CUgraphNode, CUgraph *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddEmptyNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddEventRecordNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUevent); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventRecordNodeGetEvent)(CUgraphNode, CUevent *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventRecordNodeSetEvent)(CUgraphNode, CUevent); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddEventWaitNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUevent); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventWaitNodeGetEvent)(CUgraphNode, CUevent *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventWaitNodeSetEvent)(CUgraphNode, CUevent); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddExternalSemaphoresSignalNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresSignalNodeGetParams)(CUgraphNode, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresSignalNodeSetParams)(CUgraphNode, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddExternalSemaphoresWaitNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_EXT_SEM_WAIT_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresWaitNodeGetParams)(CUgraphNode, CUDA_EXT_SEM_WAIT_NODE_PARAMS *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresWaitNodeSetParams)(CUgraphNode, CUDA_EXT_SEM_WAIT_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemAllocNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_MEM_ALLOC_NODE_PARAMS *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemAllocNodeGetParams)(CUgraphNode, CUDA_MEM_ALLOC_NODE_PARAMS *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemFreeNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUdeviceptr); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemFreeNodeGetParams)(CUgraphNode, CUdeviceptr *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGraphMemTrim)(CUdevice); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetGraphMemAttribute)(CUdevice, CUgraphMem_attribute, void *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceSetGraphMemAttribute)(CUdevice, CUgraphMem_attribute, void *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphClone)(CUgraph *, CUgraph); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeFindInClone)(CUgraphNode *, CUgraphNode, CUgraph); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetType)(CUgraphNode, CUgraphNodeType *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetNodes)(CUgraph, CUgraphNode *, size_t *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetRootNodes)(CUgraph, CUgraphNode *, size_t *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetEdges)(CUgraph, CUgraphNode *, CUgraphNode *, size_t *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetEdges_v2)(CUgraph, CUgraphNode *, CUgraphNode *, CUgraphEdgeData *, size_t *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependencies)(CUgraphNode, CUgraphNode *, size_t *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependencies_v2)(CUgraphNode, CUgraphNode *, CUgraphEdgeData *, size_t *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependentNodes)(CUgraphNode, CUgraphNode *, size_t *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependentNodes_v2)(CUgraphNode, CUgraphNode *, CUgraphEdgeData *, size_t *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddDependencies)(CUgraph, CUgraphNode const *, CUgraphNode const *, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddDependencies_v2)(CUgraph, CUgraphNode const *, CUgraphNode const *, CUgraphEdgeData const *, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphRemoveDependencies)(CUgraph, CUgraphNode const *, CUgraphNode const *, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphRemoveDependencies_v2)(CUgraph, CUgraphNode const *, CUgraphNode const *, CUgraphEdgeData const *, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphDestroyNode)(CUgraphNode); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphInstantiateWithFlags)(CUgraphExec *, CUgraph, unsigned PY_LONG_LONG); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphInstantiateWithParams)(CUgraphExec *, CUgraph, CUDA_GRAPH_INSTANTIATE_PARAMS *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecGetFlags)(CUgraphExec, cuuint64_t *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecKernelNodeSetParams_v2)(CUgraphExec, CUgraphNode, CUDA_KERNEL_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecMemcpyNodeSetParams)(CUgraphExec, CUgraphNode, CUDA_MEMCPY3D const *, CUcontext); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecMemsetNodeSetParams)(CUgraphExec, CUgraphNode, CUDA_MEMSET_NODE_PARAMS const *, CUcontext); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecHostNodeSetParams)(CUgraphExec, CUgraphNode, CUDA_HOST_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecChildGraphNodeSetParams)(CUgraphExec, CUgraphNode, CUgraph); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecEventRecordNodeSetEvent)(CUgraphExec, CUgraphNode, CUevent); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecEventWaitNodeSetEvent)(CUgraphExec, CUgraphNode, CUevent); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecExternalSemaphoresSignalNodeSetParams)(CUgraphExec, CUgraphNode, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecExternalSemaphoresWaitNodeSetParams)(CUgraphExec, CUgraphNode, CUDA_EXT_SEM_WAIT_NODE_PARAMS const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeSetEnabled)(CUgraphExec, CUgraphNode, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetEnabled)(CUgraphExec, CUgraphNode, unsigned int *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphUpload)(CUgraphExec, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphLaunch)(CUgraphExec, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecDestroy)(CUgraphExec); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphDestroy)(CUgraph); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecUpdate_v2)(CUgraphExec, CUgraph, CUgraphExecUpdateResultInfo *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeCopyAttributes)(CUgraphNode, CUgraphNode); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeGetAttribute)(CUgraphNode, CUkernelNodeAttrID, CUkernelNodeAttrValue *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeSetAttribute)(CUgraphNode, CUkernelNodeAttrID, CUkernelNodeAttrValue const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphDebugDotPrint)(CUgraph, char const *, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuUserObjectCreate)(CUuserObject *, void *, CUhostFn, unsigned int, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuUserObjectRetain)(CUuserObject, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuUserObjectRelease)(CUuserObject, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphRetainUserObject)(CUgraph, CUuserObject, unsigned int, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphReleaseUserObject)(CUgraph, CUuserObject, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddNode)(CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUgraphNodeParams *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddNode_v2)(CUgraphNode *, CUgraph, CUgraphNode const *, CUgraphEdgeData const *, size_t, CUgraphNodeParams *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeSetParams)(CUgraphNode, CUgraphNodeParams *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecNodeSetParams)(CUgraphExec, CUgraphNode, CUgraphNodeParams *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphConditionalHandleCreate)(CUgraphConditionalHandle *, CUgraph, CUcontext, unsigned int, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuOccupancyMaxActiveBlocksPerMultiprocessor)(int *, CUfunction, int, size_t); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags)(int *, CUfunction, int, size_t, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuOccupancyAvailableDynamicSMemPerBlock)(size_t *, CUfunction, int, int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectCreate)(CUtexObject *, CUDA_RESOURCE_DESC const *, CUDA_TEXTURE_DESC const *, CUDA_RESOURCE_VIEW_DESC const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectDestroy)(CUtexObject); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectGetResourceDesc)(CUDA_RESOURCE_DESC *, CUtexObject); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectGetTextureDesc)(CUDA_TEXTURE_DESC *, CUtexObject); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSurfObjectCreate)(CUsurfObject *, CUDA_RESOURCE_DESC const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSurfObjectDestroy)(CUsurfObject); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSurfObjectGetResourceDesc)(CUDA_RESOURCE_DESC *, CUsurfObject); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceCanAccessPeer)(int *, CUdevice, CUdevice); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxEnablePeerAccess)(CUcontext, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxDisablePeerAccess)(CUcontext); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetP2PAttribute)(int *, CUdevice_P2PAttribute, CUdevice, CUdevice); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsUnregisterResource)(CUgraphicsResource); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsSubResourceGetMappedArray)(CUarray *, CUgraphicsResource, unsigned int, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceGetMappedMipmappedArray)(CUmipmappedArray *, CUgraphicsResource); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceGetMappedPointer_v2)(CUdeviceptr *, size_t *, CUgraphicsResource); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceSetMapFlags_v2)(CUgraphicsResource, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsMapResources)(unsigned int, CUgraphicsResource *, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsUnmapResources)(unsigned int, CUgraphicsResource *, CUstream); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGetProcAddress_v2)(char const *, void **, int, cuuint64_t, CUdriverProcAddressQueryResult *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGetExportTable)(void const **, CUuuid const *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuProfilerStart)(void); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuProfilerStop)(void); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsEGLRegisterImage)(CUgraphicsResource *, __pyx_t_4cuda_8bindings_8cydriver_EGLImageKHR, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerConnect)(__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, __pyx_t_4cuda_8bindings_8cydriver_EGLStreamKHR); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerConnectWithFlags)(__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, __pyx_t_4cuda_8bindings_8cydriver_EGLStreamKHR, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerDisconnect)(__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerAcquireFrame)(__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, CUgraphicsResource *, CUstream *, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerReleaseFrame)(__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, CUgraphicsResource, CUstream *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerConnect)(__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, __pyx_t_4cuda_8bindings_8cydriver_EGLStreamKHR, __pyx_t_4cuda_8bindings_8cydriver_EGLint, __pyx_t_4cuda_8bindings_8cydriver_EGLint); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerDisconnect)(__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerPresentFrame)(__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame, CUstream *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerReturnFrame)(__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame *, CUstream *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceGetMappedEglFrame)(__pyx_t_4cuda_8bindings_8cydriver_CUeglFrame *, CUgraphicsResource, unsigned int, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventCreateFromEGLSync)(CUevent *, __pyx_t_4cuda_8bindings_8cydriver_EGLSyncKHR, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsGLRegisterBuffer)(CUgraphicsResource *, __pyx_t_4cuda_8bindings_8cydriver_GLuint, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsGLRegisterImage)(CUgraphicsResource *, __pyx_t_4cuda_8bindings_8cydriver_GLuint, __pyx_t_4cuda_8bindings_8cydriver_GLenum, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGLGetDevices_v2)(unsigned int *, CUdevice *, unsigned int, __pyx_t_4cuda_8bindings_8cydriver_CUGLDeviceList); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuVDPAUGetDevice)(CUdevice *, __pyx_t_4cuda_8bindings_8cydriver_VdpDevice, __pyx_t_4cuda_8bindings_8cydriver_VdpGetProcAddress *); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsVDPAURegisterVideoSurface)(CUgraphicsResource *, __pyx_t_4cuda_8bindings_8cydriver_VdpVideoSurface, unsigned int); /*proto*/
static CUresult (*__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsVDPAURegisterOutputSurface)(CUgraphicsResource *, __pyx_t_4cuda_8bindings_8cydriver_VdpOutputSurface, unsigned int); /*proto*/

/* Module declarations from "cuda.bindings._lib.cyruntime.utils" */
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_initPrimaryContext)(struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_resetPrimaryContext)(struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *); /*proto*/
static struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *(*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_globalGetInstance)(void); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError)(cudaError_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getDescInfo)(struct cudaChannelFormatDesc const *, int *, CUarray_format *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamAddCallbackCommon)(cudaStream_t, cudaStreamCallback_t, void *, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamAddHostCallbackCommon)(cudaStream_t, cudaHostFn_t, void *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamGetCaptureInfoCommon)(cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamGetCaptureInfoCommon_v3)(cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, cudaGraphEdgeData const **, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getChannelFormatDescFromDriverDesc)(struct cudaChannelFormatDesc *, size_t *, size_t *, size_t *, CUDA_ARRAY3D_DESCRIPTOR_v2 const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getChannelDesc)(cudaArray_const_t, struct cudaChannelFormatDesc *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getDriverResDescFromResDesc)(CUDA_RESOURCE_DESC *, struct cudaResourceDesc const *, CUDA_TEXTURE_DESC *, struct cudaTextureDesc const *, CUDA_RESOURCE_VIEW_DESC *, struct cudaResourceViewDesc const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getResDescFromDriverResDesc)(struct cudaResourceDesc *, CUDA_RESOURCE_DESC const *, struct cudaTextureDesc *, CUDA_TEXTURE_DESC const *, struct cudaResourceViewDesc *, CUDA_RESOURCE_VIEW_DESC const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_copy1DConvertTo3DParams)(void *, void const *, size_t, enum cudaMemcpyKind, struct cudaMemcpy3DParms *); /*proto*/
static void (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemsetNodeParams)(struct cudaMemsetParams const *, CUDA_MEMSET_NODE_PARAMS *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemCopy3DParams)(struct cudaMemcpy3DParms const *, CUDA_MEMCPY3D *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocArray)(cudaArray_t *, struct cudaChannelFormatDesc const *, size_t, size_t, size_t, int, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DToArray)(cudaArray_t, size_t, size_t, char const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t, bool); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyDispatch)(void *, void const *, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocHost)(size_t, void **, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocPitch)(size_t, size_t, size_t, void **, size_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocMipmappedArray)(cudaMipmappedArray_t *, struct cudaChannelFormatDesc const *, size_t, size_t, size_t, unsigned int, unsigned int); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DPtr)(char *, size_t, char const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t, bool); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy3D)(struct cudaMemcpy3DParms const *, bool, int, int, cudaStream_t, bool); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyAsyncDispatch)(void *, void const *, size_t, enum cudaMemcpyKind, cudaStream_t); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toCudartMemCopy3DParams)(CUDA_MEMCPY3D_v2 const *, struct cudaMemcpy3DParms *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DFromArray)(char *, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t, bool); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DArrayToArray)(cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memset3DPtr)(struct cudaPitchedPtr, int, struct cudaExtent, cudaStream_t, bool); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyToArray)(cudaArray_t, size_t, size_t, char const *, size_t, enum cudaMemcpyKind, cudaStream_t, bool); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyFromArray)(char *, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t, bool); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyArrayToArray)(cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverCudaResourceDesc)(CUDA_RESOURCE_DESC *, struct cudaResourceDesc const *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getDriverEglFrame)(__pyx_t_4cuda_8bindings_8cydriver_CUeglFrame *, __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getRuntimeEglFrame)(__pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame *, __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverGraphNodeParams)(struct cudaGraphNodeParams const *, CUgraphNodeParams *); /*proto*/
static void (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toCudartGraphNodeOutParams)(CUgraphNodeParams const *, struct cudaGraphNodeParams *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverKernelNodeParams)(struct cudaKernelNodeParams const *, CUDA_KERNEL_NODE_PARAMS *); /*proto*/
static void (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverHostNodeParams)(struct cudaHostNodeParams const *, CUDA_HOST_NODE_PARAMS *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_DeviceRegisterAsyncNotificationCommon)(int, cudaAsyncCallback, void *, cudaAsyncCallbackHandle_t *); /*proto*/
static cudaError_t (*__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_DeviceUnregisterAsyncNotificationCommon)(int, cudaAsyncCallbackHandle_t); /*proto*/

/* Module declarations from "cuda.bindings._lib.dlfcn" */

/* Module declarations from "cuda.bindings._lib.cyruntime.cyruntime" */
static struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global = 0;
static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphInstantiateWithFlags(cudaGraphExec_t *, cudaGraph_t, unsigned PY_LONG_LONG); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "cuda.bindings._lib.cyruntime.cyruntime"
extern int __pyx_module_is_main_cuda__bindings___lib__cyruntime__cyruntime;
int __pyx_module_is_main_cuda__bindings___lib__cyruntime__cyruntime = 0;

/* Implementation of "cuda.bindings._lib.cyruntime.cyruntime" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
/* #### Code section: string_decls ### */
static const char __pyx_k__3[] = "?";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Failed_to_dlopen_libcudart_so_12[] = "Failed to dlopen libcudart.so.12";
static const char __pyx_k_Function_cudaRuntimeGetVersion_n[] = "Function \"cudaRuntimeGetVersion\" not found in libcudart.so.12";
/* #### Code section: decls ### */
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyObject *__pyx_kp_u_Failed_to_dlopen_libcudart_so_12;
  PyObject *__pyx_kp_u_Function_cudaRuntimeGetVersion_n;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_n_s__3;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_tuple__2;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_dlopen_libcudart_so_12);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Function_cudaRuntimeGetVersion_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_n_s__3);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_dlopen_libcudart_so_12);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Function_cudaRuntimeGetVersion_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_n_s__3);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal __pyx_mstate_global->__pyx_ptype_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_kp_u_Failed_to_dlopen_libcudart_so_12 __pyx_mstate_global->__pyx_kp_u_Failed_to_dlopen_libcudart_so_12
#define __pyx_kp_u_Function_cudaRuntimeGetVersion_n __pyx_mstate_global->__pyx_kp_u_Function_cudaRuntimeGetVersion_n
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_n_s__3 __pyx_mstate_global->__pyx_n_s__3
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
/* #### Code section: module_code ### */

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":17
 * cdef cudaPythonGlobal m_global = globalGetInstance()
 * 
 * cdef cudaError_t _cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy(void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy", __pyx_f[0], 17, 1, __PYX_ERR(0, 17, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":18
 * 
 * cdef cudaError_t _cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":20
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":21
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyDispatch(dst, src, count, kind)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":22
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpyDispatch(dst, src, count, kind)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":21
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyDispatch(dst, src, count, kind)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":23
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpyDispatch(dst, src, count, kind)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyDispatch(__pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 23, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":24
 *         return err
 *     err = memcpyDispatch(dst, src, count, kind)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":25
 *     err = memcpyDispatch(dst, src, count, kind)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 25, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":24
 *         return err
 *     err = memcpyDispatch(dst, src, count, kind)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":26
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":17
 * cdef cudaPythonGlobal m_global = globalGetInstance()
 * 
 * cdef cudaError_t _cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":29
 * 
 * 
 * cdef cudaError_t _cudaStreamCreate(cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamCreate(cudaStream_t *__pyx_v_pStream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamCreate", __pyx_f[0], 29, 1, __PYX_ERR(0, 29, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":30
 * 
 * cdef cudaError_t _cudaStreamCreate(cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":32
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 32, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":33
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreate(pStream, 0)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":34
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamCreate(pStream, 0)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":33
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreate(pStream, 0)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":35
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreate(pStream, 0)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamCreate(__pyx_v_pStream, 0); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 35, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":36
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreate(pStream, 0)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":37
 *     err = <cudaError_t>cydriver._cuStreamCreate(pStream, 0)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 37, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":36
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreate(pStream, 0)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":38
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":29
 * 
 * 
 * cdef cudaError_t _cudaStreamCreate(cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":41
 * 
 * 
 * cdef cudaError_t _cudaEventCreate(cudaEvent_t* event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventCreate(cudaEvent_t *__pyx_v_event) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEventCreate", __pyx_f[0], 41, 1, __PYX_ERR(0, 41, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":42
 * 
 * cdef cudaError_t _cudaEventCreate(cudaEvent_t* event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":44
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":45
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreate(event, cydriver.CUevent_flags_enum.CU_EVENT_DEFAULT)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":46
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEventCreate(event, cydriver.CUevent_flags_enum.CU_EVENT_DEFAULT)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":45
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreate(event, cydriver.CUevent_flags_enum.CU_EVENT_DEFAULT)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":47
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreate(event, cydriver.CUevent_flags_enum.CU_EVENT_DEFAULT)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventCreate(__pyx_v_event, CU_EVENT_DEFAULT); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":48
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreate(event, cydriver.CUevent_flags_enum.CU_EVENT_DEFAULT)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":49
 *     err = <cudaError_t>cydriver._cuEventCreate(event, cydriver.CUevent_flags_enum.CU_EVENT_DEFAULT)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 49, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":48
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreate(event, cydriver.CUevent_flags_enum.CU_EVENT_DEFAULT)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":50
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":41
 * 
 * 
 * cdef cudaError_t _cudaEventCreate(cudaEvent_t* event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEventCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":53
 * 
 * 
 * cdef cudaError_t _cudaEventQuery(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuEventQuery(<cydriver.CUevent>event)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventQuery(cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  CUresult __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEventQuery", __pyx_f[0], 53, 1, __PYX_ERR(0, 53, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":54
 * 
 * cdef cudaError_t _cudaEventQuery(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEventQuery(<cydriver.CUevent>event)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":55
 * cdef cudaError_t _cudaEventQuery(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuEventQuery(<cydriver.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventQuery(((CUevent)__pyx_v_event)); if (unlikely(__pyx_t_1 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 55, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_1);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":56
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuEventQuery(<cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":57
 *     err = <cudaError_t>cydriver._cuEventQuery(<cydriver.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 57, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":56
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuEventQuery(<cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":58
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":53
 * 
 * 
 * cdef cudaError_t _cudaEventQuery(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuEventQuery(<cydriver.CUevent>event)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEventQuery", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":61
 * 
 * 
 * cdef cudaChannelFormatDesc _cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaChannelFormatDesc desc
 *     desc.x = x
 */

static struct cudaChannelFormatDesc __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaCreateChannelDesc(int __pyx_v_x, int __pyx_v_y, int __pyx_v_z, int __pyx_v_w, enum cudaChannelFormatKind __pyx_v_f) {
  struct cudaChannelFormatDesc __pyx_v_desc;
  struct cudaChannelFormatDesc __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaCreateChannelDesc", __pyx_f[0], 61, 1, __PYX_ERR(0, 61, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":63
 * cdef cudaChannelFormatDesc _cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f) noexcept nogil:
 *     cdef cudaChannelFormatDesc desc
 *     desc.x = x             # <<<<<<<<<<<<<<
 *     desc.y = y
 *     desc.z = z
 */
  __pyx_v_desc.x = __pyx_v_x;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":64
 *     cdef cudaChannelFormatDesc desc
 *     desc.x = x
 *     desc.y = y             # <<<<<<<<<<<<<<
 *     desc.z = z
 *     desc.w = w
 */
  __pyx_v_desc.y = __pyx_v_y;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":65
 *     desc.x = x
 *     desc.y = y
 *     desc.z = z             # <<<<<<<<<<<<<<
 *     desc.w = w
 *     desc.f = f
 */
  __pyx_v_desc.z = __pyx_v_z;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":66
 *     desc.y = y
 *     desc.z = z
 *     desc.w = w             # <<<<<<<<<<<<<<
 *     desc.f = f
 *     return desc
 */
  __pyx_v_desc.w = __pyx_v_w;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":67
 *     desc.z = z
 *     desc.w = w
 *     desc.f = f             # <<<<<<<<<<<<<<
 *     return desc
 * 
 */
  __pyx_v_desc.f = __pyx_v_f;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":68
 *     desc.w = w
 *     desc.f = f
 *     return desc             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_desc;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":61
 * 
 * 
 * cdef cudaChannelFormatDesc _cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaChannelFormatDesc desc
 *     desc.x = x
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("cuda.bindings._lib.cyruntime.cyruntime._cudaCreateChannelDesc", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":71
 * 
 * 
 * cdef cudaError_t _cudaDriverGetVersion(int* driverVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDriverGetVersion(driverVersion)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDriverGetVersion(int *__pyx_v_driverVersion) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  CUresult __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDriverGetVersion", __pyx_f[0], 71, 1, __PYX_ERR(0, 71, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":72
 * 
 * cdef cudaError_t _cudaDriverGetVersion(int* driverVersion) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDriverGetVersion(driverVersion)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":73
 * cdef cudaError_t _cudaDriverGetVersion(int* driverVersion) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDriverGetVersion(driverVersion)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDriverGetVersion(__pyx_v_driverVersion); if (unlikely(__pyx_t_1 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_1);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":74
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDriverGetVersion(driverVersion)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":75
 *     err = <cudaError_t>cydriver._cuDriverGetVersion(driverVersion)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 75, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":74
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDriverGetVersion(driverVersion)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":76
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":71
 * 
 * 
 * cdef cudaError_t _cudaDriverGetVersion(int* driverVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDriverGetVersion(driverVersion)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDriverGetVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":79
 * 
 * 
 * cdef cudaError_t _cudaRuntimeGetVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     runtimeVersion[0] = m_global._CUDART_VERSION
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaRuntimeGetVersion(int *__pyx_v_runtimeVersion) {
  CYTHON_UNUSED cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaRuntimeGetVersion", __pyx_f[0], 79, 1, __PYX_ERR(0, 79, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":80
 * 
 * cdef cudaError_t _cudaRuntimeGetVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     runtimeVersion[0] = m_global._CUDART_VERSION
 *     return cudaSuccess
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":81
 * cdef cudaError_t _cudaRuntimeGetVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     runtimeVersion[0] = m_global._CUDART_VERSION             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
  __pyx_t_1 = __pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->_CUDART_VERSION;
  (__pyx_v_runtimeVersion[0]) = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":82
 *     cdef cudaError_t err = cudaSuccess
 *     runtimeVersion[0] = m_global._CUDART_VERSION
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":79
 * 
 * 
 * cdef cudaError_t _cudaRuntimeGetVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     runtimeVersion[0] = m_global._CUDART_VERSION
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaRuntimeGetVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":85
 * 
 * 
 * cdef cudaError_t _cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if fmtDesc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetTexture1DLinearMaxWidth(size_t *__pyx_v_maxWidthInElements, struct cudaChannelFormatDesc const *__pyx_v_fmtDesc, int __pyx_v_device) {
  cudaError_t __pyx_v_err;
  CUarray_format __pyx_v_fmt;
  int __pyx_v_numChannels;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetTexture1DLinearMaxWidth", __pyx_f[0], 85, 1, __PYX_ERR(0, 85, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":86
 * 
 * cdef cudaError_t _cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if fmtDesc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_fmtDesc == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":87
 * cdef cudaError_t _cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if fmtDesc == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 87, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":88
 *     if fmtDesc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":86
 * 
 * cdef cudaError_t _cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if fmtDesc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":90
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUarray_format fmt
 *     cdef int numChannels = 0
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":92
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUarray_format fmt
 *     cdef int numChannels = 0             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitDriver()
 */
  __pyx_v_numChannels = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":94
 *     cdef int numChannels = 0
 * 
 *     err = m_global.lazyInitDriver()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 94, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":95
 * 
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = getDescInfo(fmtDesc, &numChannels, &fmt)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":96
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = getDescInfo(fmtDesc, &numChannels, &fmt)
 *     if err == cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":95
 * 
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = getDescInfo(fmtDesc, &numChannels, &fmt)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":97
 *     if err != cudaSuccess:
 *         return err
 *     err = getDescInfo(fmtDesc, &numChannels, &fmt)             # <<<<<<<<<<<<<<
 *     if err == cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getDescInfo(__pyx_v_fmtDesc, (&__pyx_v_numChannels), (&__pyx_v_fmt)); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":98
 *         return err
 *     err = getDescInfo(fmtDesc, &numChannels, &fmt)
 *     if err == cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err == cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":99
 *     err = getDescInfo(fmtDesc, &numChannels, &fmt)
 *     if err == cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmt, <unsigned>numChannels, device)
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 99, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":100
 *     if err == cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmt, <unsigned>numChannels, device)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":98
 *         return err
 *     err = getDescInfo(fmtDesc, &numChannels, &fmt)
 *     if err == cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":101
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmt, <unsigned>numChannels, device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetTexture1DLinearMaxWidth(__pyx_v_maxWidthInElements, __pyx_v_fmt, ((unsigned int)__pyx_v_numChannels), __pyx_v_device); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 101, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":102
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmt, <unsigned>numChannels, device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":103
 *     err = <cudaError_t>cydriver._cuDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmt, <unsigned>numChannels, device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 103, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":102
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetTexture1DLinearMaxWidth(maxWidthInElements, fmt, <unsigned>numChannels, device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":104
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":85
 * 
 * 
 * cdef cudaError_t _cudaDeviceGetTexture1DLinearMaxWidth(size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if fmtDesc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetTexture1DLinearMaxWidth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":107
 * 
 * 
 * cdef cudaError_t _cudaMallocHost(void** ptr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if ptr == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocHost(void **__pyx_v_ptr, size_t __pyx_v_size) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMallocHost", __pyx_f[0], 107, 1, __PYX_ERR(0, 107, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":108
 * 
 * cdef cudaError_t _cudaMallocHost(void** ptr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if ptr == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_ptr == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":109
 * cdef cudaError_t _cudaMallocHost(void** ptr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if ptr == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 109, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":110
 *     if ptr == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":108
 * 
 * cdef cudaError_t _cudaMallocHost(void** ptr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if ptr == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":112
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":113
 * 
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 113, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":114
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocHost(size, ptr, 0)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":115
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = mallocHost(size, ptr, 0)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":114
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocHost(size, ptr, 0)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":116
 *     if err != cudaSuccess:
 *         return err
 *     err = mallocHost(size, ptr, 0)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocHost(__pyx_v_size, __pyx_v_ptr, 0); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 116, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":117
 *         return err
 *     err = mallocHost(size, ptr, 0)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":118
 *     err = mallocHost(size, ptr, 0)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 118, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":117
 *         return err
 *     err = mallocHost(size, ptr, 0)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":119
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":107
 * 
 * 
 * cdef cudaError_t _cudaMallocHost(void** ptr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if ptr == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMallocHost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":122
 * 
 * 
 * cdef cudaError_t _cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if devPtr == NULL or pitch == NULL:
 *         return cudaErrorInvalidValue
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocPitch(void **__pyx_v_devPtr, size_t *__pyx_v_pitch, size_t __pyx_v_width, size_t __pyx_v_height) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMallocPitch", __pyx_f[0], 122, 1, __PYX_ERR(0, 122, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":123
 * 
 * cdef cudaError_t _cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if devPtr == NULL or pitch == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
  __pyx_t_2 = (__pyx_v_devPtr == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_pitch == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":124
 * cdef cudaError_t _cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if devPtr == NULL or pitch == NULL:
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":123
 * 
 * cdef cudaError_t _cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if devPtr == NULL or pitch == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":126
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":127
 * 
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 127, __pyx_L1_error)
  __pyx_v_err = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":128
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocPitch(width, height, 1, devPtr, pitch)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":129
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = mallocPitch(width, height, 1, devPtr, pitch)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":128
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocPitch(width, height, 1, devPtr, pitch)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":130
 *     if err != cudaSuccess:
 *         return err
 *     err = mallocPitch(width, height, 1, devPtr, pitch)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocPitch(__pyx_v_width, __pyx_v_height, 1, __pyx_v_devPtr, __pyx_v_pitch); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_v_err = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":131
 *         return err
 *     err = mallocPitch(width, height, 1, devPtr, pitch)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":132
 *     err = mallocPitch(width, height, 1, devPtr, pitch)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 132, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":131
 *         return err
 *     err = mallocPitch(width, height, 1, devPtr, pitch)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":133
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":122
 * 
 * 
 * cdef cudaError_t _cudaMallocPitch(void** devPtr, size_t* pitch, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if devPtr == NULL or pitch == NULL:
 *         return cudaErrorInvalidValue
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMallocPitch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":136
 * 
 * 
 * cdef cudaError_t _cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if mipmappedArray == NULL or desc == NULL:
 *         return cudaErrorInvalidValue
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocMipmappedArray(cudaMipmappedArray_t *__pyx_v_mipmappedArray, struct cudaChannelFormatDesc const *__pyx_v_desc, struct cudaExtent __pyx_v_extent, unsigned int __pyx_v_numLevels, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMallocMipmappedArray", __pyx_f[0], 136, 1, __PYX_ERR(0, 136, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":137
 * 
 * cdef cudaError_t _cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if mipmappedArray == NULL or desc == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
  __pyx_t_2 = (__pyx_v_mipmappedArray == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_desc == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":138
 * cdef cudaError_t _cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if mipmappedArray == NULL or desc == NULL:
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":137
 * 
 * cdef cudaError_t _cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if mipmappedArray == NULL or desc == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":140
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":141
 * 
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 141, __pyx_L1_error)
  __pyx_v_err = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":142
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocMipmappedArray(mipmappedArray, desc, extent.depth, extent.height, extent.width, numLevels, flags)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":143
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = mallocMipmappedArray(mipmappedArray, desc, extent.depth, extent.height, extent.width, numLevels, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":142
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocMipmappedArray(mipmappedArray, desc, extent.depth, extent.height, extent.width, numLevels, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":144
 *     if err != cudaSuccess:
 *         return err
 *     err = mallocMipmappedArray(mipmappedArray, desc, extent.depth, extent.height, extent.width, numLevels, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocMipmappedArray(__pyx_v_mipmappedArray, __pyx_v_desc, __pyx_v_extent.depth, __pyx_v_extent.height, __pyx_v_extent.width, __pyx_v_numLevels, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 144, __pyx_L1_error)
  __pyx_v_err = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":145
 *         return err
 *     err = mallocMipmappedArray(mipmappedArray, desc, extent.depth, extent.height, extent.width, numLevels, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":146
 *     err = mallocMipmappedArray(mipmappedArray, desc, extent.depth, extent.height, extent.width, numLevels, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 146, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":145
 *         return err
 *     err = mallocMipmappedArray(mipmappedArray, desc, extent.depth, extent.height, extent.width, numLevels, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":147
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":136
 * 
 * 
 * cdef cudaError_t _cudaMallocMipmappedArray(cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if mipmappedArray == NULL or desc == NULL:
 *         return cudaErrorInvalidValue
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMallocMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":150
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2D(void *__pyx_v_dst, size_t __pyx_v_dpitch, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy2D", __pyx_f[0], 150, 1, __PYX_ERR(0, 150, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":151
 * 
 * cdef cudaError_t _cudaMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":153
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 153, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":154
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, NULL, False)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":155
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, NULL, False)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":154
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, NULL, False)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":156
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, NULL, False)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DPtr(((char *)__pyx_v_dst), __pyx_v_dpitch, ((char const *)__pyx_v_src), __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind, NULL, 0); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 156, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":157
 *         return err
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":158
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, NULL, False)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 158, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":157
 *         return err
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":159
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":150
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2D(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy2D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":162
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DAsync(void *__pyx_v_dst, size_t __pyx_v_dpitch, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy2DAsync", __pyx_f[0], 162, 1, __PYX_ERR(0, 162, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":163
 * 
 * cdef cudaError_t _cudaMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":165
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 165, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":166
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, stream, True)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":167
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, stream, True)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":166
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, stream, True)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":168
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, stream, True)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DPtr(((char *)__pyx_v_dst), __pyx_v_dpitch, ((char const *)__pyx_v_src), __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind, __pyx_v_stream, 1); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":169
 *         return err
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":170
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, stream, True)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 170, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":169
 *         return err
 *     err = memcpy2DPtr(<char*>dst, dpitch, <const char*>src, spitch, width, height, kind, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":171
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":162
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy2DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":174
 * 
 * 
 * cdef cudaError_t _cudaMemcpyAsync(void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyAsync(void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpyAsync", __pyx_f[0], 174, 1, __PYX_ERR(0, 174, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":175
 * 
 * cdef cudaError_t _cudaMemcpyAsync(void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":177
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":178
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyAsyncDispatch(dst, src, count, kind, stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":179
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpyAsyncDispatch(dst, src, count, kind, stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":178
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyAsyncDispatch(dst, src, count, kind, stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":180
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpyAsyncDispatch(dst, src, count, kind, stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyAsyncDispatch(__pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind, __pyx_v_stream); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 180, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":181
 *         return err
 *     err = memcpyAsyncDispatch(dst, src, count, kind, stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":182
 *     err = memcpyAsyncDispatch(dst, src, count, kind, stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 182, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":181
 *         return err
 *     err = memcpyAsyncDispatch(dst, src, count, kind, stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":183
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":174
 * 
 * 
 * cdef cudaError_t _cudaMemcpyAsync(void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpyAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":186
 * 
 * 
 * cdef cudaError_t _cudaGraphAddMemcpyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddMemcpyNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaMemcpy3DParms const *__pyx_v_pCopyParams) {
  CUcontext __pyx_v_context;
  CUDA_MEMCPY3D_v2 __pyx_v_driverNodeParams;
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddMemcpyNode", __pyx_f[0], 186, 1, __PYX_ERR(0, 186, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":189
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     if pCopyParams == NULL:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":191
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pCopyParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_pCopyParams == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":192
 * 
 *     if pCopyParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 192, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":193
 *     if pCopyParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":191
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pCopyParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":195
 *         return cudaErrorInvalidValue
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":196
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":197
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":196
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":199
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_context)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 199, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":200
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":201
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 201, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":202
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = toDriverMemCopy3DParams(pCopyParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":200
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":204
 *         return err
 * 
 *     err = toDriverMemCopy3DParams(pCopyParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemCopy3DParams(__pyx_v_pCopyParams, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 204, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":205
 * 
 *     err = toDriverMemCopy3DParams(pCopyParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":206
 *     err = toDriverMemCopy3DParams(pCopyParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 206, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":207
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams, context)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":205
 * 
 *     err = toDriverMemCopy3DParams(pCopyParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":209
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams, context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemcpyNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, (&__pyx_v_driverNodeParams), __pyx_v_context); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 209, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":210
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":211
 *     err = <cudaError_t>cydriver._cuGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams, context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 211, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":210
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":212
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":186
 * 
 * 
 * cdef cudaError_t _cudaGraphAddMemcpyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddMemcpyNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":215
 * 
 * 
 * cdef cudaError_t _cudaGraphAddMemcpyNode1D(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddMemcpyNode1D(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  CUcontext __pyx_v_context;
  CUDA_MEMCPY3D_v2 __pyx_v_driverNodeParams;
  struct cudaMemcpy3DParms __pyx_v_copyParams;
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddMemcpyNode1D", __pyx_f[0], 215, 1, __PYX_ERR(0, 215, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":219
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 *     cdef cudaMemcpy3DParms copyParams
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":221
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":222
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":223
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":222
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":225
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_context)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 225, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":226
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":227
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 227, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":228
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     copy1DConvertTo3DParams(dst, src, count, kind, &copyParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":226
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":230
 *         return err
 * 
 *     copy1DConvertTo3DParams(dst, src, count, kind, &copyParams)             # <<<<<<<<<<<<<<
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_copy1DConvertTo3DParams(__pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind, (&__pyx_v_copyParams)); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 230, __pyx_L1_error)

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":232
 *     copy1DConvertTo3DParams(dst, src, count, kind, &copyParams)
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemCopy3DParams((&__pyx_v_copyParams), (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 232, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":233
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":234
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 234, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":235
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams, context)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":233
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":237
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams, context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemcpyNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, (&__pyx_v_driverNodeParams), __pyx_v_context); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 237, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":238
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":239
 *     err = <cudaError_t>cydriver._cuGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams, context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 239, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":238
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemcpyNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":240
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":215
 * 
 * 
 * cdef cudaError_t _cudaGraphAddMemcpyNode1D(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddMemcpyNode1D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":243
 * 
 * 
 * cdef cudaError_t _cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 *     cdef cudaMemcpy3DParms copyParams
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t __pyx_v_node, void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  CUDA_MEMCPY3D_v2 __pyx_v_driverNodeParams;
  struct cudaMemcpy3DParms __pyx_v_copyParams;
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphMemcpyNodeSetParams1D", __pyx_f[0], 243, 1, __PYX_ERR(0, 243, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":246
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 *     cdef cudaMemcpy3DParms copyParams
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":248
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":249
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     copy1DConvertTo3DParams(dst, src, count, kind, &copyParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":250
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     copy1DConvertTo3DParams(dst, src, count, kind, &copyParams)
 * 
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":249
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     copy1DConvertTo3DParams(dst, src, count, kind, &copyParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":251
 *     if err != cudaSuccess:
 *         return err
 *     copy1DConvertTo3DParams(dst, src, count, kind, &copyParams)             # <<<<<<<<<<<<<<
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_copy1DConvertTo3DParams(__pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind, (&__pyx_v_copyParams)); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 251, __pyx_L1_error)

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":253
 *     copy1DConvertTo3DParams(dst, src, count, kind, &copyParams)
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemCopy3DParams((&__pyx_v_copyParams), (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 253, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":254
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":255
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 255, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":256
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeSetParams(node, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":254
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":258
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeSetParams(node, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemcpyNodeSetParams(__pyx_v_node, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 258, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":259
 * 
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeSetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":260
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeSetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 260, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":259
 * 
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeSetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":261
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":243
 * 
 * 
 * cdef cudaError_t _cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 *     cdef cudaMemcpy3DParms copyParams
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphMemcpyNodeSetParams1D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":264
 * 
 * 
 * cdef cudaError_t _cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, struct cudaMemcpy3DParms const *__pyx_v_pNodeParams) {
  CUcontext __pyx_v_context;
  CUDA_MEMCPY3D_v2 __pyx_v_driverNodeParams;
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecMemcpyNodeSetParams", __pyx_f[0], 264, 1, __PYX_ERR(0, 264, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":267
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     if pNodeParams == NULL:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":269
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pNodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_pNodeParams == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":270
 * 
 *     if pNodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 270, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":271
 *     if pNodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":269
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pNodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":273
 *         return cudaErrorInvalidValue
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 273, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":274
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":275
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":274
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":277
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_context)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 277, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":278
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":279
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 279, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":280
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":278
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":282
 *         return err
 * 
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemCopy3DParams(__pyx_v_pNodeParams, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 282, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":283
 * 
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":284
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 284, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":285
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemcpyNodeSetParams(hGraphExec, node, &driverNodeParams, context)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":283
 * 
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":287
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemcpyNodeSetParams(hGraphExec, node, &driverNodeParams, context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecMemcpyNodeSetParams(__pyx_v_hGraphExec, __pyx_v_node, (&__pyx_v_driverNodeParams), __pyx_v_context); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 287, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":288
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemcpyNodeSetParams(hGraphExec, node, &driverNodeParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":289
 *     err = <cudaError_t>cydriver._cuGraphExecMemcpyNodeSetParams(hGraphExec, node, &driverNodeParams, context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 289, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":288
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemcpyNodeSetParams(hGraphExec, node, &driverNodeParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":290
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":264
 * 
 * 
 * cdef cudaError_t _cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecMemcpyNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":293
 * 
 * 
 * cdef cudaError_t _cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, void *__pyx_v_dst, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  CUcontext __pyx_v_context;
  CUDA_MEMCPY3D_v2 __pyx_v_driverNodeParams;
  struct cudaMemcpy3DParms __pyx_v_copyParams;
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecMemcpyNodeSetParams1D", __pyx_f[0], 293, 1, __PYX_ERR(0, 293, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":297
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 *     cdef cudaMemcpy3DParms copyParams
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":299
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 299, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":300
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":301
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":300
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":303
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_context)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 303, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":304
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":305
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 305, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":306
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     copy1DConvertTo3DParams(dst, src, count, kind, &copyParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":304
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":308
 *         return err
 * 
 *     copy1DConvertTo3DParams(dst, src, count, kind, &copyParams)             # <<<<<<<<<<<<<<
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_copy1DConvertTo3DParams(__pyx_v_dst, __pyx_v_src, __pyx_v_count, __pyx_v_kind, (&__pyx_v_copyParams)); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 308, __pyx_L1_error)

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":310
 *     copy1DConvertTo3DParams(dst, src, count, kind, &copyParams)
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemCopy3DParams((&__pyx_v_copyParams), (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 310, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":311
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":312
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 312, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":313
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemcpyNodeSetParams(hGraphExec, node, &driverNodeParams, context)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":311
 * 
 *     err = toDriverMemCopy3DParams(&copyParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":315
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemcpyNodeSetParams(hGraphExec, node, &driverNodeParams, context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecMemcpyNodeSetParams(__pyx_v_hGraphExec, __pyx_v_node, (&__pyx_v_driverNodeParams), __pyx_v_context); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 315, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":316
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemcpyNodeSetParams(hGraphExec, node, &driverNodeParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":317
 *     err = <cudaError_t>cydriver._cuGraphExecMemcpyNodeSetParams(hGraphExec, node, &driverNodeParams, context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 317, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":316
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemcpyNodeSetParams(hGraphExec, node, &driverNodeParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":318
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":293
 * 
 * 
 * cdef cudaError_t _cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecMemcpyNodeSetParams1D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":321
 * 
 * 
 * cdef cudaError_t _cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, m_global._CUDART_VERSION, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDriverEntryPoint(char const *__pyx_v_symbol, void **__pyx_v_funcPtr, unsigned PY_LONG_LONG __pyx_v_flags, enum cudaDriverEntryPointQueryResult *__pyx_v_driverStatus) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  CUresult __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetDriverEntryPoint", __pyx_f[0], 321, 1, __PYX_ERR(0, 321, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":322
 * 
 * cdef cudaError_t _cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, m_global._CUDART_VERSION, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":323
 * cdef cudaError_t _cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, m_global._CUDART_VERSION, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGetProcAddress_v2(__pyx_v_symbol, __pyx_v_funcPtr, __pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->_CUDART_VERSION, __pyx_v_flags, ((CUdriverProcAddressQueryResult *)__pyx_v_driverStatus)); if (unlikely(__pyx_t_1 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 323, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_1);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":324
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, m_global._CUDART_VERSION, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":325
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, m_global._CUDART_VERSION, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 325, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":324
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, m_global._CUDART_VERSION, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":326
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":321
 * 
 * 
 * cdef cudaError_t _cudaGetDriverEntryPoint(const char* symbol, void** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, m_global._CUDART_VERSION, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetDriverEntryPoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":329
 * 
 * 
 * cdef cudaError_t _cudaGraphAddMemsetNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMSET_NODE_PARAMS driverParams
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddMemsetNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaMemsetParams const *__pyx_v_pMemsetParams) {
  CUcontext __pyx_v_context;
  CUDA_MEMSET_NODE_PARAMS __pyx_v_driverParams;
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddMemsetNode", __pyx_f[0], 329, 1, __PYX_ERR(0, 329, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":332
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMSET_NODE_PARAMS driverParams
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     if pMemsetParams == NULL:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":334
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pMemsetParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_pMemsetParams == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":335
 * 
 *     if pMemsetParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 335, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":336
 *     if pMemsetParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":334
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pMemsetParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":338
 *         return cudaErrorInvalidValue
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 338, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":339
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":340
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":339
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":342
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_context)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 342, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":343
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":344
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 344, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":345
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     toDriverMemsetNodeParams(pMemsetParams, &driverParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":343
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":347
 *         return err
 * 
 *     toDriverMemsetNodeParams(pMemsetParams, &driverParams)             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, &driverParams, context)
 */
  __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemsetNodeParams(__pyx_v_pMemsetParams, (&__pyx_v_driverParams));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":349
 *     toDriverMemsetNodeParams(pMemsetParams, &driverParams)
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, &driverParams, context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemsetNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, (&__pyx_v_driverParams), __pyx_v_context); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 349, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":350
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, &driverParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":351
 *     err = <cudaError_t>cydriver._cuGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, &driverParams, context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 351, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":350
 * 
 *     err = <cudaError_t>cydriver._cuGraphAddMemsetNode(pGraphNode, graph, pDependencies, numDependencies, &driverParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":352
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":329
 * 
 * 
 * cdef cudaError_t _cudaGraphAddMemsetNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMSET_NODE_PARAMS driverParams
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddMemsetNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":355
 * 
 * 
 * cdef cudaError_t _cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMSET_NODE_PARAMS driverParams
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, struct cudaMemsetParams const *__pyx_v_pNodeParams) {
  CUcontext __pyx_v_context;
  CUDA_MEMSET_NODE_PARAMS __pyx_v_driverParams;
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecMemsetNodeSetParams", __pyx_f[0], 355, 1, __PYX_ERR(0, 355, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":358
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMSET_NODE_PARAMS driverParams
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     if pNodeParams == NULL:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":360
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pNodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_pNodeParams == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":361
 * 
 *     if pNodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 361, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":362
 *     if pNodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":360
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pNodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":364
 *         return cudaErrorInvalidValue
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 364, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":365
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":366
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":365
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":368
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_context)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 368, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":369
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":370
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 370, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":371
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     toDriverMemsetNodeParams(pNodeParams, &driverParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":369
 * 
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":373
 *         return err
 * 
 *     toDriverMemsetNodeParams(pNodeParams, &driverParams)             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemsetNodeSetParams(hGraphExec, node, &driverParams, context)
 */
  __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemsetNodeParams(__pyx_v_pNodeParams, (&__pyx_v_driverParams));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":375
 *     toDriverMemsetNodeParams(pNodeParams, &driverParams)
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemsetNodeSetParams(hGraphExec, node, &driverParams, context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecMemsetNodeSetParams(__pyx_v_hGraphExec, __pyx_v_node, (&__pyx_v_driverParams), __pyx_v_context); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 375, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":376
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemsetNodeSetParams(hGraphExec, node, &driverParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":377
 *     err = <cudaError_t>cydriver._cuGraphExecMemsetNodeSetParams(hGraphExec, node, &driverParams, context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 377, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":376
 * 
 *     err = <cudaError_t>cydriver._cuGraphExecMemsetNodeSetParams(hGraphExec, node, &driverParams, context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":378
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":355
 * 
 * 
 * cdef cudaError_t _cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cydriver.CUDA_MEMSET_NODE_PARAMS driverParams
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecMemsetNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":381
 * 
 * 
 * cdef cudaError_t _cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 *     cdef cudaError_t err = cudaSuccess
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemcpyNodeSetParams(cudaGraphNode_t __pyx_v_node, struct cudaMemcpy3DParms const *__pyx_v_pNodeParams) {
  CUDA_MEMCPY3D_v2 __pyx_v_driverNodeParams;
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphMemcpyNodeSetParams", __pyx_f[0], 381, 1, __PYX_ERR(0, 381, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":383
 * cdef cudaError_t _cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     if pNodeParams == NULL:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":385
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pNodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_pNodeParams == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":386
 * 
 *     if pNodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 386, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":387
 *     if pNodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":385
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pNodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":389
 *         return cudaErrorInvalidValue
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 389, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":390
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":391
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":390
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":392
 *     if err != cudaSuccess:
 *         return err
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemCopy3DParams(__pyx_v_pNodeParams, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":393
 *         return err
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":394
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeSetParams(node, &driverNodeParams)
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 394, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":395
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeSetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":393
 *         return err
 *     err = toDriverMemCopy3DParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":396
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeSetParams(node, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemcpyNodeSetParams(__pyx_v_node, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 396, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":397
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeSetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":398
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeSetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 398, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":397
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeSetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":399
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":381
 * 
 * 
 * cdef cudaError_t _cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 *     cdef cudaError_t err = cudaSuccess
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphMemcpyNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":402
 * 
 * 
 * cdef cudaError_t _cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemcpyNodeGetParams(cudaGraphNode_t __pyx_v_node, struct cudaMemcpy3DParms *__pyx_v_p) {
  CUDA_MEMCPY3D_v2 __pyx_v_driverNodeParams;
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphMemcpyNodeGetParams", __pyx_f[0], 402, 1, __PYX_ERR(0, 402, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":405
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 * 
 *     if p == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_p == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":406
 * 
 *     if p == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 406, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":407
 *     if p == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":405
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 * 
 *     if p == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":409
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":410
 * 
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 410, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":411
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeGetParams(node, &driverNodeParams)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":412
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeGetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":411
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeGetParams(node, &driverNodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":413
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeGetParams(node, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemcpyNodeGetParams(__pyx_v_node, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 413, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":414
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeGetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":415
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeGetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = toCudartMemCopy3DParams(&driverNodeParams, p)
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 415, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":416
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = toCudartMemCopy3DParams(&driverNodeParams, p)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":414
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemcpyNodeGetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":417
 *         _setLastError(err)
 *         return err
 *     err = toCudartMemCopy3DParams(&driverNodeParams, p)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toCudartMemCopy3DParams((&__pyx_v_driverNodeParams), __pyx_v_p); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 417, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":418
 *         return err
 *     err = toCudartMemCopy3DParams(&driverNodeParams, p)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":419
 *     err = toCudartMemCopy3DParams(&driverNodeParams, p)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 419, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":418
 *         return err
 *     err = toCudartMemCopy3DParams(&driverNodeParams, p)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":420
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":402
 * 
 * 
 * cdef cudaError_t _cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_MEMCPY3D_v2 driverNodeParams
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphMemcpyNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":423
 * 
 * 
 * cdef cudaError_t _cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFuncGetAttributes(struct cudaFuncAttributes *__pyx_v_attr, void const *__pyx_v_func) {
  cudaError_t __pyx_v_err;
  int __pyx_v_bytes;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaFuncGetAttributes", __pyx_f[0], 423, 1, __PYX_ERR(0, 423, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":424
 * 
 * cdef cudaError_t _cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":425
 * cdef cudaError_t _cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 425, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":426
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     if NULL == attr:
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":427
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     if NULL == attr:
 *         _setLastError(cudaErrorInvalidValue)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":426
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     if NULL == attr:
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":428
 *     if err != cudaSuccess:
 *         return err
 *     if NULL == attr:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_2 = (NULL == __pyx_v_attr);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":429
 *         return err
 *     if NULL == attr:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 *     cdef int bytes = 0
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 429, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":430
 *     if NULL == attr:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *     cdef int bytes = 0
 *     memset(attr, 0, sizeof(cudaFuncAttributes))
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":428
 *     if err != cudaSuccess:
 *         return err
 *     if NULL == attr:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":431
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 *     cdef int bytes = 0             # <<<<<<<<<<<<<<
 *     memset(attr, 0, sizeof(cudaFuncAttributes))
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].maxThreadsPerBlock,     cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, <cydriver.CUfunction>func)
 */
  __pyx_v_bytes = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":432
 *         return cudaErrorInvalidValue
 *     cdef int bytes = 0
 *     memset(attr, 0, sizeof(cudaFuncAttributes))             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].maxThreadsPerBlock,     cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 */
  (void)(memset(__pyx_v_attr, 0, (sizeof(struct cudaFuncAttributes))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":433
 *     cdef int bytes = 0
 *     memset(attr, 0, sizeof(cudaFuncAttributes))
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].maxThreadsPerBlock,     cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, <cydriver.CUfunction>func)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute((&(__pyx_v_attr[0]).maxThreadsPerBlock), CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, ((CUfunction)__pyx_v_func)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 433, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":434
 *     memset(attr, 0, sizeof(cudaFuncAttributes))
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].maxThreadsPerBlock,     cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":435
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].maxThreadsPerBlock,     cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].numRegs,                cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_NUM_REGS, <cydriver.CUfunction>func)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 435, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":436
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].numRegs,                cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_NUM_REGS, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":434
 *     memset(attr, 0, sizeof(cudaFuncAttributes))
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].maxThreadsPerBlock,     cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":437
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].numRegs,                cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_NUM_REGS, <cydriver.CUfunction>func)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute((&(__pyx_v_attr[0]).numRegs), CU_FUNC_ATTRIBUTE_NUM_REGS, ((CUfunction)__pyx_v_func)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 437, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":438
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].numRegs,                cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_NUM_REGS, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":439
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].numRegs,                cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_NUM_REGS, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].ptxVersion,             cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PTX_VERSION, <cydriver.CUfunction>func)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 439, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":440
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].ptxVersion,             cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PTX_VERSION, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":438
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].numRegs,                cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_NUM_REGS, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":441
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].ptxVersion,             cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PTX_VERSION, <cydriver.CUfunction>func)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute((&(__pyx_v_attr[0]).ptxVersion), CU_FUNC_ATTRIBUTE_PTX_VERSION, ((CUfunction)__pyx_v_func)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 441, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":442
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].ptxVersion,             cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PTX_VERSION, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":443
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].ptxVersion,             cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PTX_VERSION, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].binaryVersion,          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_BINARY_VERSION, <cydriver.CUfunction>func)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 443, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":444
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].binaryVersion,          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_BINARY_VERSION, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":442
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].ptxVersion,             cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PTX_VERSION, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":445
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].binaryVersion,          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_BINARY_VERSION, <cydriver.CUfunction>func)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute((&(__pyx_v_attr[0]).binaryVersion), CU_FUNC_ATTRIBUTE_BINARY_VERSION, ((CUfunction)__pyx_v_func)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 445, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":446
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].binaryVersion,          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_BINARY_VERSION, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":447
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].binaryVersion,          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_BINARY_VERSION, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 447, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":448
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":446
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].binaryVersion,          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_BINARY_VERSION, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":449
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute((&__pyx_v_bytes), CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, ((CUfunction)__pyx_v_func)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 449, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":450
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":451
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     attr[0].sharedSizeBytes = <size_t>bytes
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 451, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":452
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     attr[0].sharedSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, <cydriver.CUfunction>func)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":450
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":453
 *         _setLastError(err)
 *         return err
 *     attr[0].sharedSizeBytes = <size_t>bytes             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 */
  (__pyx_v_attr[0]).sharedSizeBytes = ((size_t)__pyx_v_bytes);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":454
 *         return err
 *     attr[0].sharedSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, <cydriver.CUfunction>func)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute((&__pyx_v_bytes), CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, ((CUfunction)__pyx_v_func)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 454, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":455
 *     attr[0].sharedSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":456
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     attr[0].constSizeBytes = <size_t>bytes
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 456, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":457
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     attr[0].constSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, <cydriver.CUfunction>func)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":455
 *     attr[0].sharedSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":458
 *         _setLastError(err)
 *         return err
 *     attr[0].constSizeBytes = <size_t>bytes             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 */
  (__pyx_v_attr[0]).constSizeBytes = ((size_t)__pyx_v_bytes);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":459
 *         return err
 *     attr[0].constSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, <cydriver.CUfunction>func)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute((&__pyx_v_bytes), CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, ((CUfunction)__pyx_v_func)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 459, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":460
 *     attr[0].constSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":461
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     attr[0].localSizeBytes = <size_t>bytes
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 461, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":462
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     attr[0].localSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].cacheModeCA,            cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CACHE_MODE_CA, <cydriver.CUfunction>func)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":460
 *     attr[0].constSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":463
 *         _setLastError(err)
 *         return err
 *     attr[0].localSizeBytes = <size_t>bytes             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].cacheModeCA,            cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CACHE_MODE_CA, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 */
  (__pyx_v_attr[0]).localSizeBytes = ((size_t)__pyx_v_bytes);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":464
 *         return err
 *     attr[0].localSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].cacheModeCA,            cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CACHE_MODE_CA, <cydriver.CUfunction>func)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute((&(__pyx_v_attr[0]).cacheModeCA), CU_FUNC_ATTRIBUTE_CACHE_MODE_CA, ((CUfunction)__pyx_v_func)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 464, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":465
 *     attr[0].localSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].cacheModeCA,            cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CACHE_MODE_CA, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":466
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].cacheModeCA,            cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CACHE_MODE_CA, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 466, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":467
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":465
 *     attr[0].localSizeBytes = <size_t>bytes
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].cacheModeCA,            cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_CACHE_MODE_CA, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":468
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute((&__pyx_v_bytes), CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES, ((CUfunction)__pyx_v_func)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 468, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":469
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":470
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].preferredShmemCarveout, cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT, <cydriver.CUfunction>func)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 470, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":471
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].preferredShmemCarveout, cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":469
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&bytes,                          cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":472
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].preferredShmemCarveout, cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT, <cydriver.CUfunction>func)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute((&(__pyx_v_attr[0]).preferredShmemCarveout), CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT, ((CUfunction)__pyx_v_func)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 472, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":473
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].preferredShmemCarveout, cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":474
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].preferredShmemCarveout, cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     attr[0].maxDynamicSharedSizeBytes = <size_t>bytes
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 474, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":475
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     attr[0].maxDynamicSharedSizeBytes = <size_t>bytes
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":473
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncGetAttribute(&attr[0].preferredShmemCarveout, cydriver.CUfunction_attribute_enum.CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT, <cydriver.CUfunction>func)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":476
 *         _setLastError(err)
 *         return err
 *     attr[0].maxDynamicSharedSizeBytes = <size_t>bytes             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  (__pyx_v_attr[0]).maxDynamicSharedSizeBytes = ((size_t)__pyx_v_bytes);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":477
 *         return err
 *     attr[0].maxDynamicSharedSizeBytes = <size_t>bytes
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":478
 *     attr[0].maxDynamicSharedSizeBytes = <size_t>bytes
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 478, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":477
 *         return err
 *     attr[0].maxDynamicSharedSizeBytes = <size_t>bytes
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":479
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":423
 * 
 * 
 * cdef cudaError_t _cudaFuncGetAttributes(cudaFuncAttributes* attr, const void* func) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaFuncGetAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":482
 * 
 * 
 * cdef cudaError_t _cudaMallocArray(cudaArray_t* arrayPtr, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if arrayPtr == NULL or desc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocArray(cudaArray_t *__pyx_v_arrayPtr, struct cudaChannelFormatDesc const *__pyx_v_desc, size_t __pyx_v_width, size_t __pyx_v_height, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMallocArray", __pyx_f[0], 482, 1, __PYX_ERR(0, 482, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":483
 * 
 * cdef cudaError_t _cudaMallocArray(cudaArray_t* arrayPtr, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if arrayPtr == NULL or desc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_2 = (__pyx_v_arrayPtr == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_desc == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":484
 * cdef cudaError_t _cudaMallocArray(cudaArray_t* arrayPtr, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if arrayPtr == NULL or desc == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 484, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":485
 *     if arrayPtr == NULL or desc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":483
 * 
 * cdef cudaError_t _cudaMallocArray(cudaArray_t* arrayPtr, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if arrayPtr == NULL or desc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":486
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":487
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_v_err = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":488
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocArray(arrayPtr, desc, 0, height, width, 0, flags)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":489
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = mallocArray(arrayPtr, desc, 0, height, width, 0, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":488
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocArray(arrayPtr, desc, 0, height, width, 0, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":490
 *     if err != cudaSuccess:
 *         return err
 *     err = mallocArray(arrayPtr, desc, 0, height, width, 0, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocArray(__pyx_v_arrayPtr, __pyx_v_desc, 0, __pyx_v_height, __pyx_v_width, 0, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 490, __pyx_L1_error)
  __pyx_v_err = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":491
 *         return err
 *     err = mallocArray(arrayPtr, desc, 0, height, width, 0, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":492
 *     err = mallocArray(arrayPtr, desc, 0, height, width, 0, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 492, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":491
 *         return err
 *     err = mallocArray(arrayPtr, desc, 0, height, width, 0, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":493
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":482
 * 
 * 
 * cdef cudaError_t _cudaMallocArray(cudaArray_t* arrayPtr, const cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if arrayPtr == NULL or desc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMallocArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":496
 * 
 * 
 * cdef cudaError_t _cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if pitchedDevPtr == NULL:
 *         return cudaErrorInvalidValue
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMalloc3D(struct cudaPitchedPtr *__pyx_v_pitchedDevPtr, struct cudaExtent __pyx_v_extent) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMalloc3D", __pyx_f[0], 496, 1, __PYX_ERR(0, 496, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":497
 * 
 * cdef cudaError_t _cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if pitchedDevPtr == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
  __pyx_t_1 = (__pyx_v_pitchedDevPtr == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":498
 * cdef cudaError_t _cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if pitchedDevPtr == NULL:
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":497
 * 
 * cdef cudaError_t _cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if pitchedDevPtr == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":500
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":501
 * 
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 501, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":502
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocPitch(extent.width, extent.height, extent.depth, &pitchedDevPtr[0].ptr, &pitchedDevPtr[0].pitch)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":503
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = mallocPitch(extent.width, extent.height, extent.depth, &pitchedDevPtr[0].ptr, &pitchedDevPtr[0].pitch)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":502
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocPitch(extent.width, extent.height, extent.depth, &pitchedDevPtr[0].ptr, &pitchedDevPtr[0].pitch)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":504
 *     if err != cudaSuccess:
 *         return err
 *     err = mallocPitch(extent.width, extent.height, extent.depth, &pitchedDevPtr[0].ptr, &pitchedDevPtr[0].pitch)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocPitch(__pyx_v_extent.width, __pyx_v_extent.height, __pyx_v_extent.depth, (&(__pyx_v_pitchedDevPtr[0]).ptr), (&(__pyx_v_pitchedDevPtr[0]).pitch)); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 504, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":505
 *         return err
 *     err = mallocPitch(extent.width, extent.height, extent.depth, &pitchedDevPtr[0].ptr, &pitchedDevPtr[0].pitch)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":506
 *     err = mallocPitch(extent.width, extent.height, extent.depth, &pitchedDevPtr[0].ptr, &pitchedDevPtr[0].pitch)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     pitchedDevPtr[0].xsize = extent.width
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 506, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":507
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     pitchedDevPtr[0].xsize = extent.width
 *     pitchedDevPtr[0].ysize = extent.height
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":505
 *         return err
 *     err = mallocPitch(extent.width, extent.height, extent.depth, &pitchedDevPtr[0].ptr, &pitchedDevPtr[0].pitch)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":508
 *         _setLastError(err)
 *         return err
 *     pitchedDevPtr[0].xsize = extent.width             # <<<<<<<<<<<<<<
 *     pitchedDevPtr[0].ysize = extent.height
 *     return err
 */
  __pyx_t_3 = __pyx_v_extent.width;
  (__pyx_v_pitchedDevPtr[0]).xsize = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":509
 *         return err
 *     pitchedDevPtr[0].xsize = extent.width
 *     pitchedDevPtr[0].ysize = extent.height             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
  __pyx_t_3 = __pyx_v_extent.height;
  (__pyx_v_pitchedDevPtr[0]).ysize = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":510
 *     pitchedDevPtr[0].xsize = extent.width
 *     pitchedDevPtr[0].ysize = extent.height
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":496
 * 
 * 
 * cdef cudaError_t _cudaMalloc3D(cudaPitchedPtr* pitchedDevPtr, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if pitchedDevPtr == NULL:
 *         return cudaErrorInvalidValue
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMalloc3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":513
 * 
 * 
 * cdef cudaError_t _cudaMalloc3DArray(cudaArray_t* arrayPtr, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if arrayPtr == NULL or desc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMalloc3DArray(cudaArray_t *__pyx_v_arrayPtr, struct cudaChannelFormatDesc const *__pyx_v_desc, struct cudaExtent __pyx_v_extent, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMalloc3DArray", __pyx_f[0], 513, 1, __PYX_ERR(0, 513, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":514
 * 
 * cdef cudaError_t _cudaMalloc3DArray(cudaArray_t* arrayPtr, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if arrayPtr == NULL or desc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_2 = (__pyx_v_arrayPtr == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_desc == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":515
 * cdef cudaError_t _cudaMalloc3DArray(cudaArray_t* arrayPtr, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if arrayPtr == NULL or desc == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 515, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":516
 *     if arrayPtr == NULL or desc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":514
 * 
 * cdef cudaError_t _cudaMalloc3DArray(cudaArray_t* arrayPtr, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if arrayPtr == NULL or desc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":518
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":519
 * 
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 519, __pyx_L1_error)
  __pyx_v_err = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":520
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocArray(arrayPtr, desc, extent.depth, extent.height, extent.width, 0, flags)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":521
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = mallocArray(arrayPtr, desc, extent.depth, extent.height, extent.width, 0, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":520
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = mallocArray(arrayPtr, desc, extent.depth, extent.height, extent.width, 0, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":522
 *     if err != cudaSuccess:
 *         return err
 *     err = mallocArray(arrayPtr, desc, extent.depth, extent.height, extent.width, 0, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocArray(__pyx_v_arrayPtr, __pyx_v_desc, __pyx_v_extent.depth, __pyx_v_extent.height, __pyx_v_extent.width, 0, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 522, __pyx_L1_error)
  __pyx_v_err = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":523
 *         return err
 *     err = mallocArray(arrayPtr, desc, extent.depth, extent.height, extent.width, 0, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":524
 *     err = mallocArray(arrayPtr, desc, extent.depth, extent.height, extent.width, 0, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 524, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":523
 *         return err
 *     err = mallocArray(arrayPtr, desc, extent.depth, extent.height, extent.width, 0, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":525
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":513
 * 
 * 
 * cdef cudaError_t _cudaMalloc3DArray(cudaArray_t* arrayPtr, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if arrayPtr == NULL or desc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMalloc3DArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":528
 * 
 * 
 * cdef const char* _cudaGetErrorString(cudaError_t error) except ?NULL nogil:             # <<<<<<<<<<<<<<
 *     cdef const char* pStr = NULL
 *     cdef cudaError_t err = cudaSuccess
 */

static char const *__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetErrorString(cudaError_t __pyx_v_error) {
  char const *__pyx_v_pStr;
  cudaError_t __pyx_v_err;
  char const *__pyx_r;
  __Pyx_TraceDeclarations
  CUresult __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetErrorString", __pyx_f[0], 528, 1, __PYX_ERR(0, 528, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":529
 * 
 * cdef const char* _cudaGetErrorString(cudaError_t error) except ?NULL nogil:
 *     cdef const char* pStr = NULL             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */
  __pyx_v_pStr = NULL;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":530
 * cdef const char* _cudaGetErrorString(cudaError_t error) except ?NULL nogil:
 *     cdef const char* pStr = NULL
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuGetErrorString(<cydriver.CUresult>error, &pStr)
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":532
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = <cudaError_t>cydriver._cuGetErrorString(<cydriver.CUresult>error, &pStr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGetErrorString(((CUresult)__pyx_v_error), (&__pyx_v_pStr)); if (unlikely(__pyx_t_1 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 532, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_1);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":533
 * 
 *     err = <cudaError_t>cydriver._cuGetErrorString(<cydriver.CUresult>error, &pStr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     if err == <cudaError_t>cudaErrorInvalidValue:
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":534
 *     err = <cudaError_t>cydriver._cuGetErrorString(<cydriver.CUresult>error, &pStr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     if err == <cudaError_t>cudaErrorInvalidValue:
 *         pStr = "unrecognized error code"
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 534, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":533
 * 
 *     err = <cudaError_t>cydriver._cuGetErrorString(<cydriver.CUresult>error, &pStr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     if err == <cudaError_t>cudaErrorInvalidValue:
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":535
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     if err == <cudaError_t>cudaErrorInvalidValue:             # <<<<<<<<<<<<<<
 *         pStr = "unrecognized error code"
 *     return pStr
 */
  __pyx_t_2 = (__pyx_v_err == ((cudaError_t)cudaErrorInvalidValue));
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":536
 *         _setLastError(err)
 *     if err == <cudaError_t>cudaErrorInvalidValue:
 *         pStr = "unrecognized error code"             # <<<<<<<<<<<<<<
 *     return pStr
 * 
 */
    __pyx_v_pStr = ((char const *)"unrecognized error code");

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":535
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     if err == <cudaError_t>cudaErrorInvalidValue:             # <<<<<<<<<<<<<<
 *         pStr = "unrecognized error code"
 *     return pStr
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":537
 *     if err == <cudaError_t>cudaErrorInvalidValue:
 *         pStr = "unrecognized error code"
 *     return pStr             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_pStr;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":528
 * 
 * 
 * cdef const char* _cudaGetErrorString(cudaError_t error) except ?NULL nogil:             # <<<<<<<<<<<<<<
 *     cdef const char* pStr = NULL
 *     cdef cudaError_t err = cudaSuccess
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetErrorString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":540
 * 
 * 
 * cdef cudaError_t _cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamAddCallback(cudaStream_t __pyx_v_stream, cudaStreamCallback_t __pyx_v_callback, void *__pyx_v_userData, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamAddCallback", __pyx_f[0], 540, 1, __PYX_ERR(0, 540, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":541
 * 
 * cdef cudaError_t _cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":543
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 543, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":544
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = streamAddCallbackCommon(stream, callback, userData, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":545
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = streamAddCallbackCommon(stream, callback, userData, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":544
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = streamAddCallbackCommon(stream, callback, userData, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":546
 *     if err != cudaSuccess:
 *         return err
 *     err = streamAddCallbackCommon(stream, callback, userData, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamAddCallbackCommon(__pyx_v_stream, __pyx_v_callback, __pyx_v_userData, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 546, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":547
 *         return err
 *     err = streamAddCallbackCommon(stream, callback, userData, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":548
 *     err = streamAddCallbackCommon(stream, callback, userData, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 548, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":547
 *         return err
 *     err = streamAddCallbackCommon(stream, callback, userData, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":549
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":540
 * 
 * 
 * cdef cudaError_t _cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamAddCallback", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":552
 * 
 * 
 * cdef cudaError_t _cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetCaptureInfo_v2(cudaStream_t __pyx_v_stream, enum cudaStreamCaptureStatus *__pyx_v_captureStatus_out, unsigned PY_LONG_LONG *__pyx_v_id_out, cudaGraph_t *__pyx_v_graph_out, cudaGraphNode_t const **__pyx_v_dependencies_out, size_t *__pyx_v_numDependencies_out) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamGetCaptureInfo_v2", __pyx_f[0], 552, 1, __PYX_ERR(0, 552, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":553
 * 
 * cdef cudaError_t _cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":555
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 555, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":556
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = streamGetCaptureInfoCommon(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":557
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = streamGetCaptureInfoCommon(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":556
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = streamGetCaptureInfoCommon(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":558
 *     if err != cudaSuccess:
 *         return err
 *     err = streamGetCaptureInfoCommon(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamGetCaptureInfoCommon(__pyx_v_stream, __pyx_v_captureStatus_out, __pyx_v_id_out, __pyx_v_graph_out, __pyx_v_dependencies_out, __pyx_v_numDependencies_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 558, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":559
 *         return err
 *     err = streamGetCaptureInfoCommon(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":560
 *     err = streamGetCaptureInfoCommon(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 560, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":559
 *         return err
 *     err = streamGetCaptureInfoCommon(stream, captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":561
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":552
 * 
 * 
 * cdef cudaError_t _cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamGetCaptureInfo_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":564
 * 
 * 
 * cdef cudaError_t _cudaImportExternalSemaphore(cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC driverSemHandleDesc
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaImportExternalSemaphore(cudaExternalSemaphore_t *__pyx_v_extSem_out, struct cudaExternalSemaphoreHandleDesc const *__pyx_v_semHandleDesc) {
  cudaError_t __pyx_v_err;
  CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC __pyx_v_driverSemHandleDesc;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  int __pyx_t_3;
  void *__pyx_t_4;
  void const *__pyx_t_5;
  void const *__pyx_t_6;
  unsigned int __pyx_t_7;
  CUresult __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaImportExternalSemaphore", __pyx_f[0], 564, 1, __PYX_ERR(0, 564, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":565
 * 
 * cdef cudaError_t _cudaImportExternalSemaphore(cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC driverSemHandleDesc
 * 
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":568
 *     cdef cydriver.CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC driverSemHandleDesc
 * 
 *     if semHandleDesc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_semHandleDesc == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":569
 * 
 *     if semHandleDesc == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 569, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":570
 *     if semHandleDesc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     memset(&driverSemHandleDesc, 0, sizeof(driverSemHandleDesc))
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":568
 *     cdef cydriver.CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC driverSemHandleDesc
 * 
 *     if semHandleDesc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":572
 *         return cudaErrorInvalidValue
 * 
 *     memset(&driverSemHandleDesc, 0, sizeof(driverSemHandleDesc))             # <<<<<<<<<<<<<<
 * 
 *     if semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueFd:
 */
  (void)(memset((&__pyx_v_driverSemHandleDesc), 0, (sizeof(__pyx_v_driverSemHandleDesc))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":574
 *     memset(&driverSemHandleDesc, 0, sizeof(driverSemHandleDesc))
 * 
 *     if semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueFd:             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD
 *         driverSemHandleDesc.handle.fd = semHandleDesc.handle.fd
 */
  switch (__pyx_v_semHandleDesc->type) {
    case cudaExternalSemaphoreHandleTypeOpaqueFd:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":575
 * 
 *     if semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueFd:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.fd = semHandleDesc.handle.fd
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32:
 */
    __pyx_v_driverSemHandleDesc.type = CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":576
 *     if semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueFd:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD
 *         driverSemHandleDesc.handle.fd = semHandleDesc.handle.fd             # <<<<<<<<<<<<<<
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32
 */
    __pyx_t_3 = __pyx_v_semHandleDesc->handle.fd;
    __pyx_v_driverSemHandleDesc.handle.fd = __pyx_t_3;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":574
 *     memset(&driverSemHandleDesc, 0, sizeof(driverSemHandleDesc))
 * 
 *     if semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueFd:             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD
 *         driverSemHandleDesc.handle.fd = semHandleDesc.handle.fd
 */
    break;
    case cudaExternalSemaphoreHandleTypeOpaqueWin32:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":578
 *         driverSemHandleDesc.handle.fd = semHandleDesc.handle.fd
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 */
    __pyx_v_driverSemHandleDesc.type = CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":579
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt:
 */
    __pyx_t_4 = __pyx_v_semHandleDesc->handle.win32.handle;
    __pyx_v_driverSemHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":580
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name             # <<<<<<<<<<<<<<
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT
 */
    __pyx_t_5 = __pyx_v_semHandleDesc->handle.win32.name;
    __pyx_v_driverSemHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":577
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD
 *         driverSemHandleDesc.handle.fd = semHandleDesc.handle.fd
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32:             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 */
    break;
    case cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":582
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 */
    __pyx_v_driverSemHandleDesc.type = CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":583
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D12Fence:
 */
    __pyx_t_4 = __pyx_v_semHandleDesc->handle.win32.handle;
    __pyx_v_driverSemHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":584
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name             # <<<<<<<<<<<<<<
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D12Fence:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE
 */
    __pyx_t_5 = __pyx_v_semHandleDesc->handle.win32.name;
    __pyx_v_driverSemHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":581
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt:             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 */
    break;
    case cudaExternalSemaphoreHandleTypeD3D12Fence:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":586
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D12Fence:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 */
    __pyx_v_driverSemHandleDesc.type = CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":587
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D12Fence:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D11Fence:
 */
    __pyx_t_4 = __pyx_v_semHandleDesc->handle.win32.handle;
    __pyx_v_driverSemHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":588
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name             # <<<<<<<<<<<<<<
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D11Fence:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE
 */
    __pyx_t_5 = __pyx_v_semHandleDesc->handle.win32.name;
    __pyx_v_driverSemHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":585
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D12Fence:             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 */
    break;
    case cudaExternalSemaphoreHandleTypeD3D11Fence:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":590
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D11Fence:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 */
    __pyx_v_driverSemHandleDesc.type = CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":591
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D11Fence:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeNvSciSync:
 */
    __pyx_t_4 = __pyx_v_semHandleDesc->handle.win32.handle;
    __pyx_v_driverSemHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":592
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name             # <<<<<<<<<<<<<<
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeNvSciSync:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC
 */
    __pyx_t_5 = __pyx_v_semHandleDesc->handle.win32.name;
    __pyx_v_driverSemHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":589
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeD3D11Fence:             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 */
    break;
    case cudaExternalSemaphoreHandleTypeNvSciSync:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":594
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeNvSciSync:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.nvSciSyncObj = semHandleDesc.handle.nvSciSyncObj
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutex:
 */
    __pyx_v_driverSemHandleDesc.type = CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":595
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeNvSciSync:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC
 *         driverSemHandleDesc.handle.nvSciSyncObj = semHandleDesc.handle.nvSciSyncObj             # <<<<<<<<<<<<<<
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutex:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX
 */
    __pyx_t_6 = __pyx_v_semHandleDesc->handle.nvSciSyncObj;
    __pyx_v_driverSemHandleDesc.handle.nvSciSyncObj = __pyx_t_6;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":593
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeNvSciSync:             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC
 *         driverSemHandleDesc.handle.nvSciSyncObj = semHandleDesc.handle.nvSciSyncObj
 */
    break;
    case cudaExternalSemaphoreHandleTypeKeyedMutex:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":597
 *         driverSemHandleDesc.handle.nvSciSyncObj = semHandleDesc.handle.nvSciSyncObj
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutex:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 */
    __pyx_v_driverSemHandleDesc.type = CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":598
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutex:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutexKmt:
 */
    __pyx_t_4 = __pyx_v_semHandleDesc->handle.win32.handle;
    __pyx_v_driverSemHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":599
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name             # <<<<<<<<<<<<<<
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutexKmt:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT
 */
    __pyx_t_5 = __pyx_v_semHandleDesc->handle.win32.name;
    __pyx_v_driverSemHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":596
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_NVSCISYNC
 *         driverSemHandleDesc.handle.nvSciSyncObj = semHandleDesc.handle.nvSciSyncObj
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutex:             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 */
    break;
    case cudaExternalSemaphoreHandleTypeKeyedMutexKmt:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":601
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutexKmt:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 */
    __pyx_v_driverSemHandleDesc.type = CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":602
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutexKmt:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd:
 */
    __pyx_t_4 = __pyx_v_semHandleDesc->handle.win32.handle;
    __pyx_v_driverSemHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":603
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name             # <<<<<<<<<<<<<<
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD
 */
    __pyx_t_5 = __pyx_v_semHandleDesc->handle.win32.name;
    __pyx_v_driverSemHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":600
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeKeyedMutexKmt:             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_KEYED_MUTEX_KMT
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 */
    break;
    case cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":605
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.fd = semHandleDesc.handle.fd
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32:
 */
    __pyx_v_driverSemHandleDesc.type = CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":606
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD
 *         driverSemHandleDesc.handle.fd = semHandleDesc.handle.fd             # <<<<<<<<<<<<<<
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32
 */
    __pyx_t_3 = __pyx_v_semHandleDesc->handle.fd;
    __pyx_v_driverSemHandleDesc.handle.fd = __pyx_t_3;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":604
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd:             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD
 *         driverSemHandleDesc.handle.fd = semHandleDesc.handle.fd
 */
    break;
    case cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":608
 *         driverSemHandleDesc.handle.fd = semHandleDesc.handle.fd
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 */
    __pyx_v_driverSemHandleDesc.type = CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":609
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32:
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     driverSemHandleDesc.flags = semHandleDesc.flags
 */
    __pyx_t_4 = __pyx_v_semHandleDesc->handle.win32.handle;
    __pyx_v_driverSemHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":610
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name             # <<<<<<<<<<<<<<
 *     driverSemHandleDesc.flags = semHandleDesc.flags
 * 
 */
    __pyx_t_5 = __pyx_v_semHandleDesc->handle.win32.name;
    __pyx_v_driverSemHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":607
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD
 *         driverSemHandleDesc.handle.fd = semHandleDesc.handle.fd
 *     elif semHandleDesc.type == cudaExternalSemaphoreHandleType.cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32:             # <<<<<<<<<<<<<<
 *         driverSemHandleDesc.type =  cydriver.CUexternalSemaphoreHandleType_enum.CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 */
    break;
    default: break;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":611
 *         driverSemHandleDesc.handle.win32.handle = semHandleDesc.handle.win32.handle
 *         driverSemHandleDesc.handle.win32.name = semHandleDesc.handle.win32.name
 *     driverSemHandleDesc.flags = semHandleDesc.flags             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_t_7 = __pyx_v_semHandleDesc->flags;
  __pyx_v_driverSemHandleDesc.flags = __pyx_t_7;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":613
 *     driverSemHandleDesc.flags = semHandleDesc.flags
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 613, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":614
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuImportExternalSemaphore(<cydriver.CUexternalSemaphore *>extSem_out, &driverSemHandleDesc)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":615
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuImportExternalSemaphore(<cydriver.CUexternalSemaphore *>extSem_out, &driverSemHandleDesc)
 *     if err != <cudaError_t>cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":614
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuImportExternalSemaphore(<cydriver.CUexternalSemaphore *>extSem_out, &driverSemHandleDesc)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":616
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuImportExternalSemaphore(<cydriver.CUexternalSemaphore *>extSem_out, &driverSemHandleDesc)             # <<<<<<<<<<<<<<
 *     if err != <cudaError_t>cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_8 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuImportExternalSemaphore(((CUexternalSemaphore *)__pyx_v_extSem_out), (&__pyx_v_driverSemHandleDesc)); if (unlikely(__pyx_t_8 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 616, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_8);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":617
 *         return err
 *     err = <cudaError_t>cydriver._cuImportExternalSemaphore(<cydriver.CUexternalSemaphore *>extSem_out, &driverSemHandleDesc)
 *     if err != <cudaError_t>cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != ((cudaError_t)cudaSuccess));
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":618
 *     err = <cudaError_t>cydriver._cuImportExternalSemaphore(<cydriver.CUexternalSemaphore *>extSem_out, &driverSemHandleDesc)
 *     if err != <cudaError_t>cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 618, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":617
 *         return err
 *     err = <cudaError_t>cydriver._cuImportExternalSemaphore(<cydriver.CUexternalSemaphore *>extSem_out, &driverSemHandleDesc)
 *     if err != <cudaError_t>cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":619
 *     if err != <cudaError_t>cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":564
 * 
 * 
 * cdef cudaError_t _cudaImportExternalSemaphore(cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC driverSemHandleDesc
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaImportExternalSemaphore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":622
 * 
 * 
 * cdef cudaError_t _cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaSignalExternalSemaphoresAsync_v2(cudaExternalSemaphore_t const *__pyx_v_extSemArray, struct cudaExternalSemaphoreSignalParams const *__pyx_v_paramsArray, unsigned int __pyx_v_numExtSems, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaSignalExternalSemaphoresAsync_v2", __pyx_f[0], 622, 1, __PYX_ERR(0, 622, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":623
 * 
 * cdef cudaError_t _cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":624
 * cdef cudaError_t _cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 624, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":625
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuSignalExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *>paramsArray, numExtSems, stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":626
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuSignalExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *>paramsArray, numExtSems, stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":625
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuSignalExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *>paramsArray, numExtSems, stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":627
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuSignalExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *>paramsArray, numExtSems, stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSignalExternalSemaphoresAsync(((CUexternalSemaphore const *)__pyx_v_extSemArray), ((CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *)__pyx_v_paramsArray), __pyx_v_numExtSems, __pyx_v_stream); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 627, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":628
 *         return err
 *     err = <cudaError_t>cydriver._cuSignalExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *>paramsArray, numExtSems, stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":629
 *     err = <cudaError_t>cydriver._cuSignalExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *>paramsArray, numExtSems, stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     return cudaSuccess
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 629, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":630
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":628
 *         return err
 *     err = <cudaError_t>cydriver._cuSignalExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS *>paramsArray, numExtSems, stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":631
 *         _setLastError(err)
 *         return err
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":622
 * 
 * 
 * cdef cudaError_t _cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaSignalExternalSemaphoresAsync_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":634
 * 
 * 
 * cdef cudaError_t _cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaWaitExternalSemaphoresAsync_v2(cudaExternalSemaphore_t const *__pyx_v_extSemArray, struct cudaExternalSemaphoreWaitParams const *__pyx_v_paramsArray, unsigned int __pyx_v_numExtSems, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaWaitExternalSemaphoresAsync_v2", __pyx_f[0], 634, 1, __PYX_ERR(0, 634, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":635
 * 
 * cdef cudaError_t _cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":636
 * cdef cudaError_t _cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":637
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuWaitExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *>paramsArray, numExtSems, stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":638
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuWaitExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *>paramsArray, numExtSems, stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":637
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuWaitExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *>paramsArray, numExtSems, stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":639
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuWaitExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *>paramsArray, numExtSems, stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuWaitExternalSemaphoresAsync(((CUexternalSemaphore const *)__pyx_v_extSemArray), ((CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *)__pyx_v_paramsArray), __pyx_v_numExtSems, __pyx_v_stream); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 639, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":640
 *         return err
 *     err = <cudaError_t>cydriver._cuWaitExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *>paramsArray, numExtSems, stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":641
 *     err = <cudaError_t>cydriver._cuWaitExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *>paramsArray, numExtSems, stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     return cudaSuccess
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 641, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":642
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":640
 *         return err
 *     err = <cudaError_t>cydriver._cuWaitExternalSemaphoresAsync(<const cydriver.CUexternalSemaphore *>extSemArray, <cydriver.CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS *>paramsArray, numExtSems, stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":643
 *         _setLastError(err)
 *         return err
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":634
 * 
 * 
 * cdef cudaError_t _cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaWaitExternalSemaphoresAsync_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":646
 * 
 * 
 * cdef cudaError_t _cudaArrayGetInfo(cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY3D_DESCRIPTOR_v2 driverDesc
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaArrayGetInfo(struct cudaChannelFormatDesc *__pyx_v_desc, struct cudaExtent *__pyx_v_extent, unsigned int *__pyx_v_flags, cudaArray_t __pyx_v_array) {
  cudaError_t __pyx_v_err;
  CUDA_ARRAY3D_DESCRIPTOR_v2 __pyx_v_driverDesc;
  size_t __pyx_v_width;
  size_t __pyx_v_height;
  size_t __pyx_v_depth;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  CUresult __pyx_t_2;
  cudaError_t __pyx_t_3;
  unsigned int __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaArrayGetInfo", __pyx_f[0], 646, 1, __PYX_ERR(0, 646, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":647
 * 
 * cdef cudaError_t _cudaArrayGetInfo(cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_ARRAY3D_DESCRIPTOR_v2 driverDesc
 *     cdef size_t width  = 0
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":649
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY3D_DESCRIPTOR_v2 driverDesc
 *     cdef size_t width  = 0             # <<<<<<<<<<<<<<
 *     cdef size_t height = 0
 *     cdef size_t depth  = 0
 */
  __pyx_v_width = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":650
 *     cdef cydriver.CUDA_ARRAY3D_DESCRIPTOR_v2 driverDesc
 *     cdef size_t width  = 0
 *     cdef size_t height = 0             # <<<<<<<<<<<<<<
 *     cdef size_t depth  = 0
 * 
 */
  __pyx_v_height = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":651
 *     cdef size_t width  = 0
 *     cdef size_t height = 0
 *     cdef size_t depth  = 0             # <<<<<<<<<<<<<<
 * 
 *     # Zero out parameters in case cuArray3DGetDescriptor fails
 */
  __pyx_v_depth = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":654
 * 
 *     # Zero out parameters in case cuArray3DGetDescriptor fails
 *     if flags:             # <<<<<<<<<<<<<<
 *         flags[0] = 0
 * 
 */
  __pyx_t_1 = (__pyx_v_flags != 0);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":655
 *     # Zero out parameters in case cuArray3DGetDescriptor fails
 *     if flags:
 *         flags[0] = 0             # <<<<<<<<<<<<<<
 * 
 *     if desc:
 */
    (__pyx_v_flags[0]) = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":654
 * 
 *     # Zero out parameters in case cuArray3DGetDescriptor fails
 *     if flags:             # <<<<<<<<<<<<<<
 *         flags[0] = 0
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":657
 *         flags[0] = 0
 * 
 *     if desc:             # <<<<<<<<<<<<<<
 *         memset(desc, 0, sizeof(desc[0]))
 * 
 */
  __pyx_t_1 = (__pyx_v_desc != 0);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":658
 * 
 *     if desc:
 *         memset(desc, 0, sizeof(desc[0]))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (void)(memset(__pyx_v_desc, 0, (sizeof((__pyx_v_desc[0])))));

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":657
 *         flags[0] = 0
 * 
 *     if desc:             # <<<<<<<<<<<<<<
 *         memset(desc, 0, sizeof(desc[0]))
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":661
 * 
 * 
 *     if extent:             # <<<<<<<<<<<<<<
 *         memset(extent, 0, sizeof(extent[0]))
 * 
 */
  __pyx_t_1 = (__pyx_v_extent != 0);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":662
 * 
 *     if extent:
 *         memset(extent, 0, sizeof(extent[0]))             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuArray3DGetDescriptor_v2(&driverDesc, <cydriver.CUarray>array)
 */
    (void)(memset(__pyx_v_extent, 0, (sizeof((__pyx_v_extent[0])))));

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":661
 * 
 * 
 *     if extent:             # <<<<<<<<<<<<<<
 *         memset(extent, 0, sizeof(extent[0]))
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":664
 *         memset(extent, 0, sizeof(extent[0]))
 * 
 *     err = <cudaError_t>cydriver._cuArray3DGetDescriptor_v2(&driverDesc, <cydriver.CUarray>array)             # <<<<<<<<<<<<<<
 *     if err != <cudaError_t>cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArray3DGetDescriptor_v2((&__pyx_v_driverDesc), ((CUarray)__pyx_v_array)); if (unlikely(__pyx_t_2 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 664, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_2);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":665
 * 
 *     err = <cudaError_t>cydriver._cuArray3DGetDescriptor_v2(&driverDesc, <cydriver.CUarray>array)
 *     if err != <cudaError_t>cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != ((cudaError_t)cudaSuccess));
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":666
 *     err = <cudaError_t>cydriver._cuArray3DGetDescriptor_v2(&driverDesc, <cydriver.CUarray>array)
 *     if err != <cudaError_t>cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 666, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":667
 *     if err != <cudaError_t>cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     # Flags are copied directly from the driver API
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":665
 * 
 *     err = <cudaError_t>cydriver._cuArray3DGetDescriptor_v2(&driverDesc, <cydriver.CUarray>array)
 *     if err != <cudaError_t>cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":670
 * 
 *     # Flags are copied directly from the driver API
 *     if flags:             # <<<<<<<<<<<<<<
 *         flags[0] = driverDesc.Flags
 * 
 */
  __pyx_t_1 = (__pyx_v_flags != 0);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":671
 *     # Flags are copied directly from the driver API
 *     if flags:
 *         flags[0] = driverDesc.Flags             # <<<<<<<<<<<<<<
 * 
 *     # Convert from driver API types to runtime API types. extent.Depth = 0
 */
    __pyx_t_4 = __pyx_v_driverDesc.Flags;
    (__pyx_v_flags[0]) = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":670
 * 
 *     # Flags are copied directly from the driver API
 *     if flags:             # <<<<<<<<<<<<<<
 *         flags[0] = driverDesc.Flags
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":675
 *     # Convert from driver API types to runtime API types. extent.Depth = 0
 *     # indicates a 2D array.
 *     if desc:             # <<<<<<<<<<<<<<
 *         width  = 0
 *         height = 0
 */
  __pyx_t_1 = (__pyx_v_desc != 0);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":676
 *     # indicates a 2D array.
 *     if desc:
 *         width  = 0             # <<<<<<<<<<<<<<
 *         height = 0
 *         depth  = 0
 */
    __pyx_v_width = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":677
 *     if desc:
 *         width  = 0
 *         height = 0             # <<<<<<<<<<<<<<
 *         depth  = 0
 * 
 */
    __pyx_v_height = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":678
 *         width  = 0
 *         height = 0
 *         depth  = 0             # <<<<<<<<<<<<<<
 * 
 *         err = getChannelFormatDescFromDriverDesc(desc, &depth, &height, &width, &driverDesc)
 */
    __pyx_v_depth = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":680
 *         depth  = 0
 * 
 *         err = getChannelFormatDescFromDriverDesc(desc, &depth, &height, &width, &driverDesc)             # <<<<<<<<<<<<<<
 *         if err != <cudaError_t>cudaSuccess:
 *             _setLastError(err)
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getChannelFormatDescFromDriverDesc(__pyx_v_desc, (&__pyx_v_depth), (&__pyx_v_height), (&__pyx_v_width), (&__pyx_v_driverDesc)); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 680, __pyx_L1_error)
    __pyx_v_err = __pyx_t_3;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":681
 * 
 *         err = getChannelFormatDescFromDriverDesc(desc, &depth, &height, &width, &driverDesc)
 *         if err != <cudaError_t>cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    __pyx_t_1 = (__pyx_v_err != ((cudaError_t)cudaSuccess));
    if (__pyx_t_1) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":682
 *         err = getChannelFormatDescFromDriverDesc(desc, &depth, &height, &width, &driverDesc)
 *         if err != <cudaError_t>cudaSuccess:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *             return err
 * 
 */
      __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 682, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":683
 *         if err != <cudaError_t>cudaSuccess:
 *             _setLastError(err)
 *             return err             # <<<<<<<<<<<<<<
 * 
 *     if extent:
 */
      __pyx_r = __pyx_v_err;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":681
 * 
 *         err = getChannelFormatDescFromDriverDesc(desc, &depth, &height, &width, &driverDesc)
 *         if err != <cudaError_t>cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":675
 *     # Convert from driver API types to runtime API types. extent.Depth = 0
 *     # indicates a 2D array.
 *     if desc:             # <<<<<<<<<<<<<<
 *         width  = 0
 *         height = 0
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":685
 *             return err
 * 
 *     if extent:             # <<<<<<<<<<<<<<
 *         extent.width  = driverDesc.Width
 *         extent.height = driverDesc.Height
 */
  __pyx_t_1 = (__pyx_v_extent != 0);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":686
 * 
 *     if extent:
 *         extent.width  = driverDesc.Width             # <<<<<<<<<<<<<<
 *         extent.height = driverDesc.Height
 *         extent.depth  = driverDesc.Depth
 */
    __pyx_t_5 = __pyx_v_driverDesc.Width;
    __pyx_v_extent->width = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":687
 *     if extent:
 *         extent.width  = driverDesc.Width
 *         extent.height = driverDesc.Height             # <<<<<<<<<<<<<<
 *         extent.depth  = driverDesc.Depth
 * 
 */
    __pyx_t_5 = __pyx_v_driverDesc.Height;
    __pyx_v_extent->height = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":688
 *         extent.width  = driverDesc.Width
 *         extent.height = driverDesc.Height
 *         extent.depth  = driverDesc.Depth             # <<<<<<<<<<<<<<
 * 
 *     return cudaSuccess
 */
    __pyx_t_5 = __pyx_v_driverDesc.Depth;
    __pyx_v_extent->depth = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":685
 *             return err
 * 
 *     if extent:             # <<<<<<<<<<<<<<
 *         extent.width  = driverDesc.Width
 *         extent.height = driverDesc.Height
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":690
 *         extent.depth  = driverDesc.Depth
 * 
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":646
 * 
 * 
 * cdef cudaError_t _cudaArrayGetInfo(cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY3D_DESCRIPTOR_v2 driverDesc
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaArrayGetInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":693
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DToArray(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy2DToArray", __pyx_f[0], 693, 1, __PYX_ERR(0, 693, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":694
 * 
 * cdef cudaError_t _cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":696
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 696, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":697
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, NULL, False)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":698
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, NULL, False)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":697
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, NULL, False)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":699
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, NULL, False)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DToArray(__pyx_v_dst, __pyx_v_hOffset, __pyx_v_wOffset, ((char const *)__pyx_v_src), __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind, NULL, 0); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 699, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":700
 *         return err
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":701
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, NULL, False)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 701, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":700
 *         return err
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":702
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":693
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy2DToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":705
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DFromArray(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DFromArray(void *__pyx_v_dst, size_t __pyx_v_dpitch, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy2DFromArray", __pyx_f[0], 705, 1, __PYX_ERR(0, 705, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":706
 * 
 * cdef cudaError_t _cudaMemcpy2DFromArray(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":708
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 708, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":709
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, NULL, False)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":710
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, NULL, False)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":709
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, NULL, False)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":711
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, NULL, False)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DFromArray(((char *)__pyx_v_dst), __pyx_v_dpitch, __pyx_v_src, __pyx_v_hOffset, __pyx_v_wOffset, __pyx_v_width, __pyx_v_height, __pyx_v_kind, NULL, 0); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 711, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":712
 *         return err
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":713
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, NULL, False)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 713, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":712
 *         return err
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":714
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":705
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DFromArray(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy2DFromArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":717
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DArrayToArray(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffsetDst, size_t __pyx_v_hOffsetDst, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffsetSrc, size_t __pyx_v_hOffsetSrc, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy2DArrayToArray", __pyx_f[0], 717, 1, __PYX_ERR(0, 717, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":718
 * 
 * cdef cudaError_t _cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":720
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 720, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":721
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, width, height, kind)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":722
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpy2DArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, width, height, kind)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":721
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, width, height, kind)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":723
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpy2DArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, width, height, kind)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DArrayToArray(__pyx_v_dst, __pyx_v_hOffsetDst, __pyx_v_wOffsetDst, __pyx_v_src, __pyx_v_hOffsetSrc, __pyx_v_wOffsetSrc, __pyx_v_width, __pyx_v_height, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 723, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":724
 *         return err
 *     err = memcpy2DArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, width, height, kind)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":725
 *     err = memcpy2DArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, width, height, kind)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 725, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":724
 *         return err
 *     err = memcpy2DArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, width, height, kind)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":726
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":717
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy2DArrayToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":729
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DToArrayAsync(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_spitch, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy2DToArrayAsync", __pyx_f[0], 729, 1, __PYX_ERR(0, 729, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":730
 * 
 * cdef cudaError_t _cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":732
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 732, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":733
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, stream, True)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":734
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, stream, True)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":733
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, stream, True)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":735
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, stream, True)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DToArray(__pyx_v_dst, __pyx_v_hOffset, __pyx_v_wOffset, ((char const *)__pyx_v_src), __pyx_v_spitch, __pyx_v_width, __pyx_v_height, __pyx_v_kind, __pyx_v_stream, 1); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 735, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":736
 *         return err
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":737
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, stream, True)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 737, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":736
 *         return err
 *     err = memcpy2DToArray(dst, hOffset, wOffset, <const char*>src, spitch, width, height, kind, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":738
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":729
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy2DToArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":741
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DFromArrayAsync(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DFromArrayAsync(void *__pyx_v_dst, size_t __pyx_v_dpitch, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_width, size_t __pyx_v_height, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy2DFromArrayAsync", __pyx_f[0], 741, 1, __PYX_ERR(0, 741, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":742
 * 
 * cdef cudaError_t _cudaMemcpy2DFromArrayAsync(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":744
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 744, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":745
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, stream, True)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":746
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, stream, True)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":745
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, stream, True)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":747
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, stream, True)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DFromArray(((char *)__pyx_v_dst), __pyx_v_dpitch, __pyx_v_src, __pyx_v_hOffset, __pyx_v_wOffset, __pyx_v_width, __pyx_v_height, __pyx_v_kind, __pyx_v_stream, 1); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 747, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":748
 *         return err
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":749
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, stream, True)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 749, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":748
 *         return err
 *     err = memcpy2DFromArray(<char*>dst, dpitch, src, hOffset, wOffset, width, height, kind, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":750
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":741
 * 
 * 
 * cdef cudaError_t _cudaMemcpy2DFromArrayAsync(void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy2DFromArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":753
 * 
 * 
 * cdef cudaError_t _cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemset3D(struct cudaPitchedPtr __pyx_v_pitchedDevPtr, int __pyx_v_value, struct cudaExtent __pyx_v_extent) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemset3D", __pyx_f[0], 753, 1, __PYX_ERR(0, 753, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":754
 * 
 * cdef cudaError_t _cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":756
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 756, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":757
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memset3DPtr(pitchedDevPtr, value, extent, NULL, False)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":758
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memset3DPtr(pitchedDevPtr, value, extent, NULL, False)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":757
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memset3DPtr(pitchedDevPtr, value, extent, NULL, False)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":759
 *     if err != cudaSuccess:
 *         return err
 *     err = memset3DPtr(pitchedDevPtr, value, extent, NULL, False)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memset3DPtr(__pyx_v_pitchedDevPtr, __pyx_v_value, __pyx_v_extent, NULL, 0); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 759, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":760
 *         return err
 *     err = memset3DPtr(pitchedDevPtr, value, extent, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":761
 *     err = memset3DPtr(pitchedDevPtr, value, extent, NULL, False)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 761, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":760
 *         return err
 *     err = memset3DPtr(pitchedDevPtr, value, extent, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":762
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":753
 * 
 * 
 * cdef cudaError_t _cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemset3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":765
 * 
 * 
 * cdef cudaError_t _cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemset3DAsync(struct cudaPitchedPtr __pyx_v_pitchedDevPtr, int __pyx_v_value, struct cudaExtent __pyx_v_extent, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemset3DAsync", __pyx_f[0], 765, 1, __PYX_ERR(0, 765, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":766
 * 
 * cdef cudaError_t _cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":768
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 768, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":769
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memset3DPtr(pitchedDevPtr, value, extent, stream, True)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":770
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memset3DPtr(pitchedDevPtr, value, extent, stream, True)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":769
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memset3DPtr(pitchedDevPtr, value, extent, stream, True)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":771
 *     if err != cudaSuccess:
 *         return err
 *     err = memset3DPtr(pitchedDevPtr, value, extent, stream, True)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memset3DPtr(__pyx_v_pitchedDevPtr, __pyx_v_value, __pyx_v_extent, __pyx_v_stream, 1); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 771, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":772
 *         return err
 *     err = memset3DPtr(pitchedDevPtr, value, extent, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":773
 *     err = memset3DPtr(pitchedDevPtr, value, extent, stream, True)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 773, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":772
 *         return err
 *     err = memset3DPtr(pitchedDevPtr, value, extent, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":774
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":765
 * 
 * 
 * cdef cudaError_t _cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemset3DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":777
 * 
 * 
 * cdef cudaError_t _cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyToArray(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpyToArray", __pyx_f[0], 777, 1, __PYX_ERR(0, 777, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":778
 * 
 * cdef cudaError_t _cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":780
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 780, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":781
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, NULL, False)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":782
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, NULL, False)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":781
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, NULL, False)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":783
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, NULL, False)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyToArray(__pyx_v_dst, __pyx_v_hOffset, __pyx_v_wOffset, ((char const *)__pyx_v_src), __pyx_v_count, __pyx_v_kind, NULL, 0); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 783, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":784
 *         return err
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":785
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, NULL, False)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 785, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":784
 *         return err
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":786
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":777
 * 
 * 
 * cdef cudaError_t _cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpyToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":789
 * 
 * 
 * cdef cudaError_t _cudaMemcpyFromArray(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyFromArray(void *__pyx_v_dst, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpyFromArray", __pyx_f[0], 789, 1, __PYX_ERR(0, 789, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":790
 * 
 * cdef cudaError_t _cudaMemcpyFromArray(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":792
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 792, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":793
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, NULL, 0)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":794
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, NULL, 0)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":793
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, NULL, 0)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":795
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, NULL, 0)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyFromArray(((char *)__pyx_v_dst), __pyx_v_src, __pyx_v_hOffset, __pyx_v_wOffset, __pyx_v_count, __pyx_v_kind, NULL, 0); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 795, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":796
 *         return err
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, NULL, 0)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":797
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, NULL, 0)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 797, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":796
 *         return err
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, NULL, 0)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":798
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":789
 * 
 * 
 * cdef cudaError_t _cudaMemcpyFromArray(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpyFromArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":801
 * 
 * 
 * cdef cudaError_t _cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyToArrayAsync(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, void const *__pyx_v_src, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpyToArrayAsync", __pyx_f[0], 801, 1, __PYX_ERR(0, 801, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":802
 * 
 * cdef cudaError_t _cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":804
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 804, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":805
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, stream, True)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":806
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, stream, True)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":805
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, stream, True)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":807
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, stream, True)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyToArray(__pyx_v_dst, __pyx_v_hOffset, __pyx_v_wOffset, ((char const *)__pyx_v_src), __pyx_v_count, __pyx_v_kind, __pyx_v_stream, 1); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 807, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":808
 *         return err
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":809
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, stream, True)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 809, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":808
 *         return err
 *     err = memcpyToArray(dst, hOffset, wOffset, <const char*>src, count, kind, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":810
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":801
 * 
 * 
 * cdef cudaError_t _cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpyToArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":813
 * 
 * 
 * cdef cudaError_t _cudaMemcpyFromArrayAsync(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyFromArrayAsync(void *__pyx_v_dst, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffset, size_t __pyx_v_hOffset, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpyFromArrayAsync", __pyx_f[0], 813, 1, __PYX_ERR(0, 813, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":814
 * 
 * cdef cudaError_t _cudaMemcpyFromArrayAsync(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":816
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 816, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":817
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, stream, True)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":818
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, stream, True)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":817
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, stream, True)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":819
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, stream, True)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyFromArray(((char *)__pyx_v_dst), __pyx_v_src, __pyx_v_hOffset, __pyx_v_wOffset, __pyx_v_count, __pyx_v_kind, __pyx_v_stream, 1); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 819, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":820
 *         return err
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":821
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, stream, True)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 821, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":820
 *         return err
 *     err = memcpyFromArray(<char*>dst, src, hOffset, wOffset, count, kind, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":822
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":813
 * 
 * 
 * cdef cudaError_t _cudaMemcpyFromArrayAsync(void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpyFromArrayAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":825
 * 
 * 
 * cdef cudaError_t _cudaPointerGetAttributes(cudaPointerAttributes* attributes, const void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaPointerAttributes attrib
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaPointerGetAttributes(struct cudaPointerAttributes *__pyx_v_attributes, void const *__pyx_v_ptr) {
  cudaError_t __pyx_v_err;
  struct cudaPointerAttributes __pyx_v_attrib;
  CUcontext __pyx_v_driverContext;
  CUmemorytype __pyx_v_driverMemoryType;
  int __pyx_v_isManaged;
  CUpointer_attribute __pyx_v_query[6];
  void **__pyx_v_data;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  void *__pyx_t_1[6];
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  CUresult __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaPointerGetAttributes", __pyx_f[0], 825, 1, __PYX_ERR(0, 825, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":826
 * 
 * cdef cudaError_t _cudaPointerGetAttributes(cudaPointerAttributes* attributes, const void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cudaPointerAttributes attrib
 *     cdef cydriver.CUcontext driverContext = NULL
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":828
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaPointerAttributes attrib
 *     cdef cydriver.CUcontext driverContext = NULL             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUmemorytype driverMemoryType
 *     cdef int isManaged = 0
 */
  __pyx_v_driverContext = NULL;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":830
 *     cdef cydriver.CUcontext driverContext = NULL
 *     cdef cydriver.CUmemorytype driverMemoryType
 *     cdef int isManaged = 0             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUpointer_attribute[6] query
 *     query[0] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT
 */
  __pyx_v_isManaged = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":832
 *     cdef int isManaged = 0
 *     cdef cydriver.CUpointer_attribute[6] query
 *     query[0] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT             # <<<<<<<<<<<<<<
 *     query[1] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE
 *     query[2] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER
 */
  (__pyx_v_query[0]) = CU_POINTER_ATTRIBUTE_CONTEXT;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":833
 *     cdef cydriver.CUpointer_attribute[6] query
 *     query[0] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT
 *     query[1] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE             # <<<<<<<<<<<<<<
 *     query[2] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER
 *     query[3] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER
 */
  (__pyx_v_query[1]) = CU_POINTER_ATTRIBUTE_MEMORY_TYPE;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":834
 *     query[0] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_CONTEXT
 *     query[1] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE
 *     query[2] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER             # <<<<<<<<<<<<<<
 *     query[3] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER
 *     query[4] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED
 */
  (__pyx_v_query[2]) = CU_POINTER_ATTRIBUTE_DEVICE_POINTER;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":835
 *     query[1] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_MEMORY_TYPE
 *     query[2] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER
 *     query[3] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER             # <<<<<<<<<<<<<<
 *     query[4] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED
 *     query[5] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL
 */
  (__pyx_v_query[3]) = CU_POINTER_ATTRIBUTE_HOST_POINTER;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":836
 *     query[2] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_POINTER
 *     query[3] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER
 *     query[4] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED             # <<<<<<<<<<<<<<
 *     query[5] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL
 * 
 */
  (__pyx_v_query[4]) = CU_POINTER_ATTRIBUTE_IS_MANAGED;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":837
 *     query[3] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_HOST_POINTER
 *     query[4] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_IS_MANAGED
 *     query[5] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL             # <<<<<<<<<<<<<<
 * 
 *     memset(&attrib, 0, sizeof(attrib))
 */
  (__pyx_v_query[5]) = CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":839
 *     query[5] = cydriver.CUpointer_attribute_enum.CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL
 * 
 *     memset(&attrib, 0, sizeof(attrib))             # <<<<<<<<<<<<<<
 *     memset(&driverMemoryType, 0, sizeof(driverMemoryType))
 * 
 */
  (void)(memset((&__pyx_v_attrib), 0, (sizeof(__pyx_v_attrib))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":840
 * 
 *     memset(&attrib, 0, sizeof(attrib))
 *     memset(&driverMemoryType, 0, sizeof(driverMemoryType))             # <<<<<<<<<<<<<<
 * 
 *     cdef void** data = [
 */
  (void)(memset((&__pyx_v_driverMemoryType), 0, (sizeof(__pyx_v_driverMemoryType))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":842
 *     memset(&driverMemoryType, 0, sizeof(driverMemoryType))
 * 
 *     cdef void** data = [             # <<<<<<<<<<<<<<
 *         &driverContext,
 *         &driverMemoryType,
 */
  __pyx_t_1[0] = (&__pyx_v_driverContext);
  __pyx_t_1[1] = (&__pyx_v_driverMemoryType);
  __pyx_t_1[2] = (&__pyx_v_attrib.devicePointer);
  __pyx_t_1[3] = (&__pyx_v_attrib.hostPointer);
  __pyx_t_1[4] = (&__pyx_v_isManaged);
  __pyx_t_1[5] = (&__pyx_v_attrib.device);
  __pyx_v_data = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":851
 *     ]
 * 
 *     if attributes == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_2 = (__pyx_v_attributes == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":852
 * 
 *     if attributes == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 852, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":853
 *     if attributes == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     # Get all the attributes we need
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":851
 *     ]
 * 
 *     if attributes == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":856
 * 
 *     # Get all the attributes we need
 *     err = <cudaError_t>cydriver._cuPointerGetAttributes(<unsigned int>(sizeof(query)/sizeof(query[0])), query, data, <cydriver.CUdeviceptr_v2>ptr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         if attributes != NULL:
 */
  __pyx_t_4 = (sizeof(__pyx_v_query));
  __pyx_t_5 = (sizeof((__pyx_v_query[0])));
  if (unlikely(__pyx_t_5 == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
    __PYX_ERR(0, 856, __pyx_L1_error)
  }
  __pyx_t_6 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuPointerGetAttributes(((unsigned int)(((double)__pyx_t_4) / ((double)__pyx_t_5))), __pyx_v_query, __pyx_v_data, ((CUdeviceptr_v2)__pyx_v_ptr)); if (unlikely(__pyx_t_6 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 856, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_6);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":857
 *     # Get all the attributes we need
 *     err = <cudaError_t>cydriver._cuPointerGetAttributes(<unsigned int>(sizeof(query)/sizeof(query[0])), query, data, <cydriver.CUdeviceptr_v2>ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         if attributes != NULL:
 *             memset(attributes, 0, sizeof(attributes[0]))
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":858
 *     err = <cudaError_t>cydriver._cuPointerGetAttributes(<unsigned int>(sizeof(query)/sizeof(query[0])), query, data, <cydriver.CUdeviceptr_v2>ptr)
 *     if err != cudaSuccess:
 *         if attributes != NULL:             # <<<<<<<<<<<<<<
 *             memset(attributes, 0, sizeof(attributes[0]))
 *             attributes[0].device = -1
 */
    __pyx_t_2 = (__pyx_v_attributes != NULL);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":859
 *     if err != cudaSuccess:
 *         if attributes != NULL:
 *             memset(attributes, 0, sizeof(attributes[0]))             # <<<<<<<<<<<<<<
 *             attributes[0].device = -1
 *         _setLastError(err)
 */
      (void)(memset(__pyx_v_attributes, 0, (sizeof((__pyx_v_attributes[0])))));

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":860
 *         if attributes != NULL:
 *             memset(attributes, 0, sizeof(attributes[0]))
 *             attributes[0].device = -1             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
      (__pyx_v_attributes[0]).device = -1;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":858
 *     err = <cudaError_t>cydriver._cuPointerGetAttributes(<unsigned int>(sizeof(query)/sizeof(query[0])), query, data, <cydriver.CUdeviceptr_v2>ptr)
 *     if err != cudaSuccess:
 *         if attributes != NULL:             # <<<<<<<<<<<<<<
 *             memset(attributes, 0, sizeof(attributes[0]))
 *             attributes[0].device = -1
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":861
 *             memset(attributes, 0, sizeof(attributes[0]))
 *             attributes[0].device = -1
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 861, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":862
 *             attributes[0].device = -1
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     if driverMemoryType == cydriver.CUmemorytype_enum.CU_MEMORYTYPE_HOST:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":857
 *     # Get all the attributes we need
 *     err = <cudaError_t>cydriver._cuPointerGetAttributes(<unsigned int>(sizeof(query)/sizeof(query[0])), query, data, <cydriver.CUdeviceptr_v2>ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         if attributes != NULL:
 *             memset(attributes, 0, sizeof(attributes[0]))
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":864
 *         return err
 * 
 *     if driverMemoryType == cydriver.CUmemorytype_enum.CU_MEMORYTYPE_HOST:             # <<<<<<<<<<<<<<
 *         if isManaged:
 *             attrib.type = cudaMemoryTypeManaged
 */
  switch (__pyx_v_driverMemoryType) {
    case CU_MEMORYTYPE_HOST:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":865
 * 
 *     if driverMemoryType == cydriver.CUmemorytype_enum.CU_MEMORYTYPE_HOST:
 *         if isManaged:             # <<<<<<<<<<<<<<
 *             attrib.type = cudaMemoryTypeManaged
 *         else:
 */
    __pyx_t_2 = (__pyx_v_isManaged != 0);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":866
 *     if driverMemoryType == cydriver.CUmemorytype_enum.CU_MEMORYTYPE_HOST:
 *         if isManaged:
 *             attrib.type = cudaMemoryTypeManaged             # <<<<<<<<<<<<<<
 *         else:
 *             attrib.type = cudaMemoryTypeHost
 */
      __pyx_v_attrib.type = cudaMemoryTypeManaged;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":865
 * 
 *     if driverMemoryType == cydriver.CUmemorytype_enum.CU_MEMORYTYPE_HOST:
 *         if isManaged:             # <<<<<<<<<<<<<<
 *             attrib.type = cudaMemoryTypeManaged
 *         else:
 */
      goto __pyx_L6;
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":868
 *             attrib.type = cudaMemoryTypeManaged
 *         else:
 *             attrib.type = cudaMemoryTypeHost             # <<<<<<<<<<<<<<
 *     elif driverMemoryType == cydriver.CUmemorytype_enum.CU_MEMORYTYPE_DEVICE:
 *         if isManaged:
 */
    /*else*/ {
      __pyx_v_attrib.type = cudaMemoryTypeHost;
    }
    __pyx_L6:;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":864
 *         return err
 * 
 *     if driverMemoryType == cydriver.CUmemorytype_enum.CU_MEMORYTYPE_HOST:             # <<<<<<<<<<<<<<
 *         if isManaged:
 *             attrib.type = cudaMemoryTypeManaged
 */
    break;
    case CU_MEMORYTYPE_DEVICE:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":870
 *             attrib.type = cudaMemoryTypeHost
 *     elif driverMemoryType == cydriver.CUmemorytype_enum.CU_MEMORYTYPE_DEVICE:
 *         if isManaged:             # <<<<<<<<<<<<<<
 *             attrib.type = cudaMemoryTypeManaged
 *         else:
 */
    __pyx_t_2 = (__pyx_v_isManaged != 0);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":871
 *     elif driverMemoryType == cydriver.CUmemorytype_enum.CU_MEMORYTYPE_DEVICE:
 *         if isManaged:
 *             attrib.type = cudaMemoryTypeManaged             # <<<<<<<<<<<<<<
 *         else:
 *             attrib.type = cudaMemoryTypeDevice
 */
      __pyx_v_attrib.type = cudaMemoryTypeManaged;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":870
 *             attrib.type = cudaMemoryTypeHost
 *     elif driverMemoryType == cydriver.CUmemorytype_enum.CU_MEMORYTYPE_DEVICE:
 *         if isManaged:             # <<<<<<<<<<<<<<
 *             attrib.type = cudaMemoryTypeManaged
 *         else:
 */
      goto __pyx_L7;
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":873
 *             attrib.type = cudaMemoryTypeManaged
 *         else:
 *             attrib.type = cudaMemoryTypeDevice             # <<<<<<<<<<<<<<
 *     else:
 *          if driverMemoryType == 0:
 */
    /*else*/ {
      __pyx_v_attrib.type = cudaMemoryTypeDevice;
    }
    __pyx_L7:;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":869
 *         else:
 *             attrib.type = cudaMemoryTypeHost
 *     elif driverMemoryType == cydriver.CUmemorytype_enum.CU_MEMORYTYPE_DEVICE:             # <<<<<<<<<<<<<<
 *         if isManaged:
 *             attrib.type = cudaMemoryTypeManaged
 */
    break;
    default:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":875
 *             attrib.type = cudaMemoryTypeDevice
 *     else:
 *          if driverMemoryType == 0:             # <<<<<<<<<<<<<<
 *             attrib.type = cudaMemoryTypeUnregistered
 *          else:
 */
    __pyx_t_2 = (__pyx_v_driverMemoryType == 0);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":876
 *     else:
 *          if driverMemoryType == 0:
 *             attrib.type = cudaMemoryTypeUnregistered             # <<<<<<<<<<<<<<
 *          else:
 *             if attributes != NULL:
 */
      __pyx_v_attrib.type = cudaMemoryTypeUnregistered;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":875
 *             attrib.type = cudaMemoryTypeDevice
 *     else:
 *          if driverMemoryType == 0:             # <<<<<<<<<<<<<<
 *             attrib.type = cudaMemoryTypeUnregistered
 *          else:
 */
      goto __pyx_L8;
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":878
 *             attrib.type = cudaMemoryTypeUnregistered
 *          else:
 *             if attributes != NULL:             # <<<<<<<<<<<<<<
 *                 memset(attributes, 0, sizeof(attributes[0]))
 *                 attributes[0].device = -1
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_attributes != NULL);
      if (__pyx_t_2) {

        /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":879
 *          else:
 *             if attributes != NULL:
 *                 memset(attributes, 0, sizeof(attributes[0]))             # <<<<<<<<<<<<<<
 *                 attributes[0].device = -1
 *             _setLastError(cudaErrorInvalidValue)
 */
        (void)(memset(__pyx_v_attributes, 0, (sizeof((__pyx_v_attributes[0])))));

        /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":880
 *             if attributes != NULL:
 *                 memset(attributes, 0, sizeof(attributes[0]))
 *                 attributes[0].device = -1             # <<<<<<<<<<<<<<
 *             _setLastError(cudaErrorInvalidValue)
 *             return cudaErrorInvalidValue
 */
        (__pyx_v_attributes[0]).device = -1;

        /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":878
 *             attrib.type = cudaMemoryTypeUnregistered
 *          else:
 *             if attributes != NULL:             # <<<<<<<<<<<<<<
 *                 memset(attributes, 0, sizeof(attributes[0]))
 *                 attributes[0].device = -1
 */
      }

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":881
 *                 memset(attributes, 0, sizeof(attributes[0]))
 *                 attributes[0].device = -1
 *             _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *             return cudaErrorInvalidValue
 * 
 */
      __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 881, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":882
 *                 attributes[0].device = -1
 *             _setLastError(cudaErrorInvalidValue)
 *             return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     # copy to user structure
 */
      __pyx_r = cudaErrorInvalidValue;
      goto __pyx_L0;
    }
    __pyx_L8:;
    break;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":885
 * 
 *     # copy to user structure
 *     attributes[0] = attrib             # <<<<<<<<<<<<<<
 * 
 *     return cudaSuccess
 */
  (__pyx_v_attributes[0]) = __pyx_v_attrib;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":887
 *     attributes[0] = attrib
 * 
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":825
 * 
 * 
 * cdef cudaError_t _cudaPointerGetAttributes(cudaPointerAttributes* attributes, const void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaPointerAttributes attrib
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaPointerGetAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":890
 * 
 * 
 * cdef cudaError_t _cudaGetDeviceFlags(unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDeviceFlags(unsigned int *__pyx_v_flags) {
  cudaError_t __pyx_v_err;
  CUcontext __pyx_v_driverContext;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_device;
  unsigned int __pyx_v_pcFlags;
  int __pyx_v_pcActive;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetDeviceFlags", __pyx_f[0], 890, 1, __PYX_ERR(0, 890, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":891
 * 
 * cdef cudaError_t _cudaGetDeviceFlags(unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":892
 * cdef cudaError_t _cudaGetDeviceFlags(unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 892, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":893
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":894
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     if flags == NULL:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":893
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":896
 *         return err
 * 
 *     if flags == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_2 = (__pyx_v_flags == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":897
 * 
 *     if flags == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 897, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":898
 *     if flags == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cydriver.CUcontext driverContext
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":896
 *         return err
 * 
 *     if flags == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":901
 * 
 *     cdef cydriver.CUcontext driverContext
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&driverContext)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_driverContext)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 901, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":902
 *     cdef cydriver.CUcontext driverContext
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&driverContext)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":903
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&driverContext)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 903, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":904
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     # Get the flags from the current context
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":902
 *     cdef cydriver.CUcontext driverContext
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&driverContext)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":907
 * 
 *     # Get the flags from the current context
 *     if driverContext != NULL:             # <<<<<<<<<<<<<<
 *         err = <cudaError_t>cydriver._cuCtxGetFlags(flags)
 *         if err != cudaSuccess:
 */
  __pyx_t_2 = (__pyx_v_driverContext != NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":908
 *     # Get the flags from the current context
 *     if driverContext != NULL:
 *         err = <cudaError_t>cydriver._cuCtxGetFlags(flags)             # <<<<<<<<<<<<<<
 *         if err != cudaSuccess:
 *             _setLastError(err)
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetFlags(__pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 908, __pyx_L1_error)
    __pyx_v_err = ((cudaError_t)__pyx_t_3);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":909
 *     if driverContext != NULL:
 *         err = <cudaError_t>cydriver._cuCtxGetFlags(flags)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *         return err
 */
    __pyx_t_2 = (__pyx_v_err != cudaSuccess);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":910
 *         err = <cudaError_t>cydriver._cuCtxGetFlags(flags)
 *         if err != cudaSuccess:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 910, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":909
 *     if driverContext != NULL:
 *         err = <cudaError_t>cydriver._cuCtxGetFlags(flags)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *         return err
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":911
 *         if err != cudaSuccess:
 *             _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     # Assume first valid device and get its implicit flags
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":907
 * 
 *     # Get the flags from the current context
 *     if driverContext != NULL:             # <<<<<<<<<<<<<<
 *         err = <cudaError_t>cydriver._cuCtxGetFlags(flags)
 *         if err != cudaSuccess:
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":917
 *     cdef unsigned int pcFlags
 *     cdef int pcActive
 *     device = m_global.getDevice(0)             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDevicePrimaryCtxGetState(device[0].driverDevice, &pcFlags, &pcActive)
 *     if err != cudaSuccess:
 */
  __pyx_v_device = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, 0);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":918
 *     cdef int pcActive
 *     device = m_global.getDevice(0)
 *     err = <cudaError_t>cydriver._cuDevicePrimaryCtxGetState(device[0].driverDevice, &pcFlags, &pcActive)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDevicePrimaryCtxGetState((__pyx_v_device[0]).driverDevice, (&__pyx_v_pcFlags), (&__pyx_v_pcActive)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 918, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":919
 *     device = m_global.getDevice(0)
 *     err = <cudaError_t>cydriver._cuDevicePrimaryCtxGetState(device[0].driverDevice, &pcFlags, &pcActive)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":920
 *     err = <cudaError_t>cydriver._cuDevicePrimaryCtxGetState(device[0].driverDevice, &pcFlags, &pcActive)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     flags[0] = pcFlags | cudaDeviceMapHost
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 920, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":921
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     flags[0] = pcFlags | cudaDeviceMapHost
 *     return cudaSuccess
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":919
 *     device = m_global.getDevice(0)
 *     err = <cudaError_t>cydriver._cuDevicePrimaryCtxGetState(device[0].driverDevice, &pcFlags, &pcActive)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":922
 *         _setLastError(err)
 *         return err
 *     flags[0] = pcFlags | cudaDeviceMapHost             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
  (__pyx_v_flags[0]) = (__pyx_v_pcFlags | __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceMapHost);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":923
 *         return err
 *     flags[0] = pcFlags | cudaDeviceMapHost
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":890
 * 
 * 
 * cdef cudaError_t _cudaGetDeviceFlags(unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetDeviceFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":926
 * 
 * 
 * cdef cudaError_t _cudaMemcpy3D(const cudaMemcpy3DParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if p == NULL:
 *         return cudaErrorInvalidValue
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy3D(struct cudaMemcpy3DParms const *__pyx_v_p) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy3D", __pyx_f[0], 926, 1, __PYX_ERR(0, 926, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":927
 * 
 * cdef cudaError_t _cudaMemcpy3D(const cudaMemcpy3DParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
  __pyx_t_1 = (__pyx_v_p == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":928
 * cdef cudaError_t _cudaMemcpy3D(const cudaMemcpy3DParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":927
 * 
 * cdef cudaError_t _cudaMemcpy3D(const cudaMemcpy3DParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":930
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":931
 * 
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 931, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":932
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy3D(p, False, 0, 0, NULL, False)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":933
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpy3D(p, False, 0, 0, NULL, False)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":932
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy3D(p, False, 0, 0, NULL, False)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":934
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpy3D(p, False, 0, 0, NULL, False)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy3D(__pyx_v_p, 0, 0, 0, NULL, 0); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 934, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":935
 *         return err
 *     err = memcpy3D(p, False, 0, 0, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":936
 *     err = memcpy3D(p, False, 0, 0, NULL, False)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 936, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":935
 *         return err
 *     err = memcpy3D(p, False, 0, 0, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":937
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":926
 * 
 * 
 * cdef cudaError_t _cudaMemcpy3D(const cudaMemcpy3DParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if p == NULL:
 *         return cudaErrorInvalidValue
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy3D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":940
 * 
 * 
 * cdef cudaError_t _cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if p == NULL:
 *         return cudaErrorInvalidValue
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy3DAsync(struct cudaMemcpy3DParms const *__pyx_v_p, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy3DAsync", __pyx_f[0], 940, 1, __PYX_ERR(0, 940, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":941
 * 
 * cdef cudaError_t _cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
  __pyx_t_1 = (__pyx_v_p == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":942
 * cdef cudaError_t _cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":941
 * 
 * cdef cudaError_t _cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":944
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":945
 * 
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 945, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":946
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy3D(p, False, 0, 0, stream, True)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":947
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpy3D(p, False, 0, 0, stream, True)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":946
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpy3D(p, False, 0, 0, stream, True)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":948
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpy3D(p, False, 0, 0, stream, True)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy3D(__pyx_v_p, 0, 0, 0, __pyx_v_stream, 1); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 948, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":949
 *         return err
 *     err = memcpy3D(p, False, 0, 0, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":950
 *     err = memcpy3D(p, False, 0, 0, stream, True)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 950, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":949
 *         return err
 *     err = memcpy3D(p, False, 0, 0, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":951
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":940
 * 
 * 
 * cdef cudaError_t _cudaMemcpy3DAsync(const cudaMemcpy3DParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if p == NULL:
 *         return cudaErrorInvalidValue
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy3DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":954
 * 
 * 
 * cdef cudaError_t _cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolSetAccess(cudaMemPool_t __pyx_v_memPool, struct cudaMemAccessDesc const *__pyx_v_descList, size_t __pyx_v_count) {
  cudaError_t __pyx_v_err;
  size_t __pyx_v_MAX_DEVICES;
  CUmemAccessDesc __pyx_v_localList[32];
  CUmemAccessDesc *__pyx_v_cuDescList;
  size_t __pyx_v_i;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  CUresult __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPoolSetAccess", __pyx_f[0], 954, 1, __PYX_ERR(0, 954, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":955
 * 
 * cdef cudaError_t _cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":956
 * cdef cudaError_t _cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 956, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":957
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef size_t MAX_DEVICES = 32
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":958
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef size_t MAX_DEVICES = 32
 *     cdef cydriver.CUmemAccessDesc localList[32]
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":957
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef size_t MAX_DEVICES = 32
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":959
 *     if err != cudaSuccess:
 *         return err
 *     cdef size_t MAX_DEVICES = 32             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUmemAccessDesc localList[32]
 *     cdef cydriver.CUmemAccessDesc *cuDescList
 */
  __pyx_v_MAX_DEVICES = 32;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":962
 *     cdef cydriver.CUmemAccessDesc localList[32]
 *     cdef cydriver.CUmemAccessDesc *cuDescList
 *     cdef size_t i = 0             # <<<<<<<<<<<<<<
 * 
 *     if (count > MAX_DEVICES):
 */
  __pyx_v_i = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":964
 *     cdef size_t i = 0
 * 
 *     if (count > MAX_DEVICES):             # <<<<<<<<<<<<<<
 *         cuDescList = <cydriver.CUmemAccessDesc*>calloc(sizeof(cydriver.CUmemAccessDesc), count)
 *     else:
 */
  __pyx_t_2 = (__pyx_v_count > __pyx_v_MAX_DEVICES);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":965
 * 
 *     if (count > MAX_DEVICES):
 *         cuDescList = <cydriver.CUmemAccessDesc*>calloc(sizeof(cydriver.CUmemAccessDesc), count)             # <<<<<<<<<<<<<<
 *     else:
 *         cuDescList = localList
 */
    __pyx_v_cuDescList = ((CUmemAccessDesc *)calloc((sizeof(CUmemAccessDesc)), __pyx_v_count));

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":964
 *     cdef size_t i = 0
 * 
 *     if (count > MAX_DEVICES):             # <<<<<<<<<<<<<<
 *         cuDescList = <cydriver.CUmemAccessDesc*>calloc(sizeof(cydriver.CUmemAccessDesc), count)
 *     else:
 */
    goto __pyx_L4;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":967
 *         cuDescList = <cydriver.CUmemAccessDesc*>calloc(sizeof(cydriver.CUmemAccessDesc), count)
 *     else:
 *         cuDescList = localList             # <<<<<<<<<<<<<<
 * 
 *     if cuDescList == NULL:
 */
  /*else*/ {
    __pyx_v_cuDescList = __pyx_v_localList;
  }
  __pyx_L4:;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":969
 *         cuDescList = localList
 * 
 *     if cuDescList == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorMemoryAllocation)
 *         return cudaErrorMemoryAllocation
 */
  __pyx_t_2 = (__pyx_v_cuDescList == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":970
 * 
 *     if cuDescList == NULL:
 *         _setLastError(cudaErrorMemoryAllocation)             # <<<<<<<<<<<<<<
 *         return cudaErrorMemoryAllocation
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorMemoryAllocation); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 970, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":971
 *     if cuDescList == NULL:
 *         _setLastError(cudaErrorMemoryAllocation)
 *         return cudaErrorMemoryAllocation             # <<<<<<<<<<<<<<
 * 
 *     while i < count:
 */
    __pyx_r = cudaErrorMemoryAllocation;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":969
 *         cuDescList = localList
 * 
 *     if cuDescList == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorMemoryAllocation)
 *         return cudaErrorMemoryAllocation
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":973
 *         return cudaErrorMemoryAllocation
 * 
 *     while i < count:             # <<<<<<<<<<<<<<
 *         cuDescList[i].location.type = <cydriver.CUmemLocationType>descList[i].location.type
 *         cuDescList[i].location.id = descList[i].location.id
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_i < __pyx_v_count);
    if (!__pyx_t_2) break;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":974
 * 
 *     while i < count:
 *         cuDescList[i].location.type = <cydriver.CUmemLocationType>descList[i].location.type             # <<<<<<<<<<<<<<
 *         cuDescList[i].location.id = descList[i].location.id
 *         cuDescList[i].flags = <cydriver.CUmemAccess_flags>descList[i].flags
 */
    (__pyx_v_cuDescList[__pyx_v_i]).location.type = ((CUmemLocationType)(__pyx_v_descList[__pyx_v_i]).location.type);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":975
 *     while i < count:
 *         cuDescList[i].location.type = <cydriver.CUmemLocationType>descList[i].location.type
 *         cuDescList[i].location.id = descList[i].location.id             # <<<<<<<<<<<<<<
 *         cuDescList[i].flags = <cydriver.CUmemAccess_flags>descList[i].flags
 *         i += 1
 */
    __pyx_t_3 = (__pyx_v_descList[__pyx_v_i]).location.id;
    (__pyx_v_cuDescList[__pyx_v_i]).location.id = __pyx_t_3;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":976
 *         cuDescList[i].location.type = <cydriver.CUmemLocationType>descList[i].location.type
 *         cuDescList[i].location.id = descList[i].location.id
 *         cuDescList[i].flags = <cydriver.CUmemAccess_flags>descList[i].flags             # <<<<<<<<<<<<<<
 *         i += 1
 * 
 */
    (__pyx_v_cuDescList[__pyx_v_i]).flags = ((CUmemAccess_flags)(__pyx_v_descList[__pyx_v_i]).flags);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":977
 *         cuDescList[i].location.id = descList[i].location.id
 *         cuDescList[i].flags = <cydriver.CUmemAccess_flags>descList[i].flags
 *         i += 1             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuMemPoolSetAccess(memPool, cuDescList, count)
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":979
 *         i += 1
 * 
 *     err = <cudaError_t>cydriver._cuMemPoolSetAccess(memPool, cuDescList, count)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_4 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolSetAccess(__pyx_v_memPool, __pyx_v_cuDescList, __pyx_v_count); if (unlikely(__pyx_t_4 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 979, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_4);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":980
 * 
 *     err = <cudaError_t>cydriver._cuMemPoolSetAccess(memPool, cuDescList, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":981
 *     err = <cudaError_t>cydriver._cuMemPoolSetAccess(memPool, cuDescList, count)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 981, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":982
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     if count > MAX_DEVICES:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":980
 * 
 *     err = <cudaError_t>cydriver._cuMemPoolSetAccess(memPool, cuDescList, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":984
 *         return err
 * 
 *     if count > MAX_DEVICES:             # <<<<<<<<<<<<<<
 *         free(cuDescList)
 * 
 */
  __pyx_t_2 = (__pyx_v_count > __pyx_v_MAX_DEVICES);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":985
 * 
 *     if count > MAX_DEVICES:
 *         free(cuDescList)             # <<<<<<<<<<<<<<
 * 
 *     return cudaSuccess
 */
    free(__pyx_v_cuDescList);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":984
 *         return err
 * 
 *     if count > MAX_DEVICES:             # <<<<<<<<<<<<<<
 *         free(cuDescList)
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":987
 *         free(cuDescList)
 * 
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":954
 * 
 * 
 * cdef cudaError_t _cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPoolSetAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":990
 * 
 * 
 * cdef cudaError_t _cudaDeviceReset() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef int deviceOrdinal = 0
 *     cdef cudaError_t err = cudaSuccess
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceReset(void) {
  CYTHON_UNUSED int __pyx_v_deviceOrdinal;
  cudaError_t __pyx_v_err;
  CUcontext __pyx_v_context;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_device;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  CUresult __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceReset", __pyx_f[0], 990, 1, __PYX_ERR(0, 990, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":991
 * 
 * cdef cudaError_t _cudaDeviceReset() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef int deviceOrdinal = 0             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     if not m_global._lazyInitDriver:
 */
  __pyx_v_deviceOrdinal = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":992
 * cdef cudaError_t _cudaDeviceReset() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef int deviceOrdinal = 0
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     if not m_global._lazyInitDriver:
 *         return cudaSuccess
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":993
 *     cdef int deviceOrdinal = 0
 *     cdef cudaError_t err = cudaSuccess
 *     if not m_global._lazyInitDriver:             # <<<<<<<<<<<<<<
 *         return cudaSuccess
 * 
 */
  __pyx_t_1 = (!__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->_lazyInitDriver);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":994
 *     cdef cudaError_t err = cudaSuccess
 *     if not m_global._lazyInitDriver:
 *         return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     cdef cydriver.CUcontext context
 */
    __pyx_r = cudaSuccess;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":993
 *     cdef int deviceOrdinal = 0
 *     cdef cudaError_t err = cudaSuccess
 *     if not m_global._lazyInitDriver:             # <<<<<<<<<<<<<<
 *         return cudaSuccess
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":997
 * 
 *     cdef cydriver.CUcontext context
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_context)); if (unlikely(__pyx_t_2 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 997, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_2);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":998
 *     cdef cydriver.CUcontext context
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":999
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 999, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1000
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaPythonDevice* device
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":998
 *     cdef cydriver.CUcontext context
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1003
 * 
 *     cdef cudaPythonDevice* device
 *     device = m_global.getDeviceFromPrimaryCtx(context)             # <<<<<<<<<<<<<<
 *     if device != NULL:
 *         err = resetPrimaryContext(device)
 */
  __pyx_v_device = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDeviceFromPrimaryCtx(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_context);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1004
 *     cdef cudaPythonDevice* device
 *     device = m_global.getDeviceFromPrimaryCtx(context)
 *     if device != NULL:             # <<<<<<<<<<<<<<
 *         err = resetPrimaryContext(device)
 *         if err != cudaSuccess:
 */
  __pyx_t_1 = (__pyx_v_device != NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1005
 *     device = m_global.getDeviceFromPrimaryCtx(context)
 *     if device != NULL:
 *         err = resetPrimaryContext(device)             # <<<<<<<<<<<<<<
 *         if err != cudaSuccess:
 *             _setLastError(err)
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_resetPrimaryContext(__pyx_v_device); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1005, __pyx_L1_error)
    __pyx_v_err = __pyx_t_3;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1006
 *     if device != NULL:
 *         err = resetPrimaryContext(device)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *     return err
 */
    __pyx_t_1 = (__pyx_v_err != cudaSuccess);
    if (__pyx_t_1) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1007
 *         err = resetPrimaryContext(device)
 *         if err != cudaSuccess:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
      __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1007, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1006
 *     if device != NULL:
 *         err = resetPrimaryContext(device)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *     return err
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1004
 *     cdef cudaPythonDevice* device
 *     device = m_global.getDeviceFromPrimaryCtx(context)
 *     if device != NULL:             # <<<<<<<<<<<<<<
 *         err = resetPrimaryContext(device)
 *         if err != cudaSuccess:
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1008
 *         if err != cudaSuccess:
 *             _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":990
 * 
 * 
 * cdef cudaError_t _cudaDeviceReset() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef int deviceOrdinal = 0
 *     cdef cudaError_t err = cudaSuccess
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceReset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1011
 * 
 * 
 * cdef cudaError_t _cudaGetLastError() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t last_err = m_global._lastError
 *     m_global._lastError = cudaSuccess
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetLastError(void) {
  cudaError_t __pyx_v_last_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetLastError", __pyx_f[0], 1011, 1, __PYX_ERR(0, 1011, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1012
 * 
 * cdef cudaError_t _cudaGetLastError() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t last_err = m_global._lastError             # <<<<<<<<<<<<<<
 *     m_global._lastError = cudaSuccess
 *     return last_err
 */
  __pyx_t_1 = __pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->_lastError;
  __pyx_v_last_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1013
 * cdef cudaError_t _cudaGetLastError() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t last_err = m_global._lastError
 *     m_global._lastError = cudaSuccess             # <<<<<<<<<<<<<<
 *     return last_err
 * 
 */
  __pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->_lastError = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1014
 *     cdef cudaError_t last_err = m_global._lastError
 *     m_global._lastError = cudaSuccess
 *     return last_err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_last_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1011
 * 
 * 
 * cdef cudaError_t _cudaGetLastError() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t last_err = m_global._lastError
 *     m_global._lastError = cudaSuccess
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetLastError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1017
 * 
 * 
 * cdef cudaError_t _cudaPeekAtLastError() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return m_global._lastError
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaPeekAtLastError(void) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaPeekAtLastError", __pyx_f[0], 1017, 1, __PYX_ERR(0, 1017, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1018
 * 
 * cdef cudaError_t _cudaPeekAtLastError() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return m_global._lastError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->_lastError;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1017
 * 
 * 
 * cdef cudaError_t _cudaPeekAtLastError() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return m_global._lastError
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaPeekAtLastError", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1021
 * 
 * 
 * cdef cudaError_t _cudaGetDevice(int* deviceOrdinal) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUdevice driverDevice = 0
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDevice(int *__pyx_v_deviceOrdinal) {
  cudaError_t __pyx_v_err;
  CUdevice __pyx_v_driverDevice;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_cudaDevice;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetDevice", __pyx_f[0], 1021, 1, __PYX_ERR(0, 1021, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1022
 * 
 * cdef cudaError_t _cudaGetDevice(int* deviceOrdinal) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUdevice driverDevice = 0
 * 
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1023
 * cdef cudaError_t _cudaGetDevice(int* deviceOrdinal) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUdevice driverDevice = 0             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitDriver()
 */
  __pyx_v_driverDevice = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1025
 *     cdef cydriver.CUdevice driverDevice = 0
 * 
 *     err = m_global.lazyInitDriver()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1025, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1026
 * 
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1027
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaPythonDevice *cudaDevice
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1026
 * 
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1030
 * 
 *     cdef cudaPythonDevice *cudaDevice
 *     err = <cudaError_t>cydriver._cuCtxGetDevice(&driverDevice)             # <<<<<<<<<<<<<<
 *     if err == cudaSuccess:
 *         cudaDevice = m_global.getDeviceFromDriver(driverDevice)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetDevice((&__pyx_v_driverDevice)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1030, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1031
 *     cdef cudaPythonDevice *cudaDevice
 *     err = <cudaError_t>cydriver._cuCtxGetDevice(&driverDevice)
 *     if err == cudaSuccess:             # <<<<<<<<<<<<<<
 *         cudaDevice = m_global.getDeviceFromDriver(driverDevice)
 *         deviceOrdinal[0] = cudaDevice[0].deviceOrdinal
 */
  switch (__pyx_v_err) {
    case cudaSuccess:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1032
 *     err = <cudaError_t>cydriver._cuCtxGetDevice(&driverDevice)
 *     if err == cudaSuccess:
 *         cudaDevice = m_global.getDeviceFromDriver(driverDevice)             # <<<<<<<<<<<<<<
 *         deviceOrdinal[0] = cudaDevice[0].deviceOrdinal
 *     elif err == cudaErrorDeviceUninitialized:
 */
    __pyx_v_cudaDevice = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDeviceFromDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_driverDevice);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1033
 *     if err == cudaSuccess:
 *         cudaDevice = m_global.getDeviceFromDriver(driverDevice)
 *         deviceOrdinal[0] = cudaDevice[0].deviceOrdinal             # <<<<<<<<<<<<<<
 *     elif err == cudaErrorDeviceUninitialized:
 *         # Like C Runtime, default to first device and let context creation happen in another call
 */
    __pyx_t_4 = (__pyx_v_cudaDevice[0]).deviceOrdinal;
    (__pyx_v_deviceOrdinal[0]) = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1031
 *     cdef cudaPythonDevice *cudaDevice
 *     err = <cudaError_t>cydriver._cuCtxGetDevice(&driverDevice)
 *     if err == cudaSuccess:             # <<<<<<<<<<<<<<
 *         cudaDevice = m_global.getDeviceFromDriver(driverDevice)
 *         deviceOrdinal[0] = cudaDevice[0].deviceOrdinal
 */
    break;
    case cudaErrorDeviceUninitialized:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1037
 *         # Like C Runtime, default to first device and let context creation happen in another call
 *         # By default, device 0 would initialized
 *         deviceOrdinal[0] = 0             # <<<<<<<<<<<<<<
 *         err = cudaSuccess
 *     return err
 */
    (__pyx_v_deviceOrdinal[0]) = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1038
 *         # By default, device 0 would initialized
 *         deviceOrdinal[0] = 0
 *         err = cudaSuccess             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_v_err = cudaSuccess;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1034
 *         cudaDevice = m_global.getDeviceFromDriver(driverDevice)
 *         deviceOrdinal[0] = cudaDevice[0].deviceOrdinal
 *     elif err == cudaErrorDeviceUninitialized:             # <<<<<<<<<<<<<<
 *         # Like C Runtime, default to first device and let context creation happen in another call
 *         # By default, device 0 would initialized
 */
    break;
    default: break;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1039
 *         deviceOrdinal[0] = 0
 *         err = cudaSuccess
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1021
 * 
 * 
 * cdef cudaError_t _cudaGetDevice(int* deviceOrdinal) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUdevice driverDevice = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1042
 * 
 * 
 * cdef cudaError_t _cudaSetDevice(int deviceOrdinal) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaPythonDevice *device
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaSetDevice(int __pyx_v_deviceOrdinal) {
  cudaError_t __pyx_v_err;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_device;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaSetDevice", __pyx_f[0], 1042, 1, __PYX_ERR(0, 1042, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1043
 * 
 * cdef cudaError_t _cudaSetDevice(int deviceOrdinal) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cudaPythonDevice *device
 * 
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1046
 *     cdef cudaPythonDevice *device
 * 
 *     err = m_global.lazyInitDriver()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1046, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1047
 * 
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1048
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     device = m_global.getDevice(deviceOrdinal)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1047
 * 
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1050
 *         return err
 * 
 *     device = m_global.getDevice(deviceOrdinal)             # <<<<<<<<<<<<<<
 *     if device == NULL:
 *         _setLastError(err)
 */
  __pyx_v_device = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_deviceOrdinal);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1051
 * 
 *     device = m_global.getDevice(deviceOrdinal)
 *     if device == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return cudaErrorInvalidDevice
 */
  __pyx_t_2 = (__pyx_v_device == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1052
 *     device = m_global.getDevice(deviceOrdinal)
 *     if device == NULL:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidDevice
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1052, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1053
 *     if device == NULL:
 *         _setLastError(err)
 *         return cudaErrorInvalidDevice             # <<<<<<<<<<<<<<
 * 
 *     if device.primaryContext == NULL:
 */
    __pyx_r = cudaErrorInvalidDevice;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1051
 * 
 *     device = m_global.getDevice(deviceOrdinal)
 *     if device == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return cudaErrorInvalidDevice
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1055
 *         return cudaErrorInvalidDevice
 * 
 *     if device.primaryContext == NULL:             # <<<<<<<<<<<<<<
 *         initPrimaryContext(device)
 * 
 */
  __pyx_t_2 = (__pyx_v_device->primaryContext == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1056
 * 
 *     if device.primaryContext == NULL:
 *         initPrimaryContext(device)             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuCtxSetCurrent(device.primaryContext)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_initPrimaryContext(__pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1056, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1055
 *         return cudaErrorInvalidDevice
 * 
 *     if device.primaryContext == NULL:             # <<<<<<<<<<<<<<
 *         initPrimaryContext(device)
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1058
 *         initPrimaryContext(device)
 * 
 *     err = <cudaError_t>cydriver._cuCtxSetCurrent(device.primaryContext)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetCurrent(__pyx_v_device->primaryContext); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1058, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1059
 * 
 *     err = <cudaError_t>cydriver._cuCtxSetCurrent(device.primaryContext)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1060
 *     err = <cudaError_t>cydriver._cuCtxSetCurrent(device.primaryContext)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1060, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1059
 * 
 *     err = <cudaError_t>cydriver._cuCtxSetCurrent(device.primaryContext)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1061
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1042
 * 
 * 
 * cdef cudaError_t _cudaSetDevice(int deviceOrdinal) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaPythonDevice *device
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaSetDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1064
 * 
 * 
 * cdef cudaError_t _cudaGetDeviceProperties_v2(cudaDeviceProp* prop, int deviceOrdinal) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDeviceProperties_v2(struct cudaDeviceProp *__pyx_v_prop, int __pyx_v_deviceOrdinal) {
  cudaError_t __pyx_v_err;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_device;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  struct cudaDeviceProp __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetDeviceProperties_v2", __pyx_f[0], 1064, 1, __PYX_ERR(0, 1064, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1065
 * 
 * cdef cudaError_t _cudaGetDeviceProperties_v2(cudaDeviceProp* prop, int deviceOrdinal) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1066
 * cdef cudaError_t _cudaGetDeviceProperties_v2(cudaDeviceProp* prop, int deviceOrdinal) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1066, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1067
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1068
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     device = m_global.getDevice(deviceOrdinal)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1067
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1070
 *         return err
 * 
 *     device = m_global.getDevice(deviceOrdinal)             # <<<<<<<<<<<<<<
 *     if device == NULL:
 *         _setLastError(err)
 */
  __pyx_v_device = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_deviceOrdinal);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1071
 * 
 *     device = m_global.getDevice(deviceOrdinal)
 *     if device == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return cudaErrorInvalidDevice
 */
  __pyx_t_2 = (__pyx_v_device == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1072
 *     device = m_global.getDevice(deviceOrdinal)
 *     if device == NULL:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidDevice
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1072, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1073
 *     if device == NULL:
 *         _setLastError(err)
 *         return cudaErrorInvalidDevice             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.kernelExecTimeoutEnabled),  cydriver.CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, device[0].driverDevice)
 */
    __pyx_r = cudaErrorInvalidDevice;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1071
 * 
 *     device = m_global.getDevice(deviceOrdinal)
 *     if device == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return cudaErrorInvalidDevice
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1075
 *         return cudaErrorInvalidDevice
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.kernelExecTimeoutEnabled),  cydriver.CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, device[0].driverDevice)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetAttribute((&(__pyx_v_device[0]).deviceProperties.kernelExecTimeoutEnabled), CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, (__pyx_v_device[0]).driverDevice); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1075, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1076
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.kernelExecTimeoutEnabled),  cydriver.CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, device[0].driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1077
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.kernelExecTimeoutEnabled),  cydriver.CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, device[0].driverDevice)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1077, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1078
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.computeMode),  cydriver.CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, device[0].driverDevice)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1076
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.kernelExecTimeoutEnabled),  cydriver.CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, device[0].driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1080
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.computeMode),  cydriver.CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, device[0].driverDevice)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetAttribute((&(__pyx_v_device[0]).deviceProperties.computeMode), CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, (__pyx_v_device[0]).driverDevice); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1081
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.computeMode),  cydriver.CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, device[0].driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1082
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.computeMode),  cydriver.CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, device[0].driverDevice)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1082, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1083
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.clockRate), cydriver.CU_DEVICE_ATTRIBUTE_CLOCK_RATE, device[0].driverDevice)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1081
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.computeMode),  cydriver.CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, device[0].driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1085
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.clockRate), cydriver.CU_DEVICE_ATTRIBUTE_CLOCK_RATE, device[0].driverDevice)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetAttribute((&(__pyx_v_device[0]).deviceProperties.clockRate), CU_DEVICE_ATTRIBUTE_CLOCK_RATE, (__pyx_v_device[0]).driverDevice); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1085, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1086
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.clockRate), cydriver.CU_DEVICE_ATTRIBUTE_CLOCK_RATE, device[0].driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1087
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.clockRate), cydriver.CU_DEVICE_ATTRIBUTE_CLOCK_RATE, device[0].driverDevice)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1087, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1088
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.memoryClockRate), cydriver.CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, device[0].driverDevice)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1086
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.clockRate), cydriver.CU_DEVICE_ATTRIBUTE_CLOCK_RATE, device[0].driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1090
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.memoryClockRate), cydriver.CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, device[0].driverDevice)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetAttribute((&(__pyx_v_device[0]).deviceProperties.memoryClockRate), CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, (__pyx_v_device[0]).driverDevice); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1090, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1091
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.memoryClockRate), cydriver.CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, device[0].driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1092
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.memoryClockRate), cydriver.CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, device[0].driverDevice)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1092, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1093
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.singleToDoublePrecisionPerfRatio), cydriver.CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO, device[0].driverDevice)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1091
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.memoryClockRate), cydriver.CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, device[0].driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1095
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.singleToDoublePrecisionPerfRatio), cydriver.CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO, device[0].driverDevice)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetAttribute((&(__pyx_v_device[0]).deviceProperties.singleToDoublePrecisionPerfRatio), CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO, (__pyx_v_device[0]).driverDevice); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1095, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1096
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.singleToDoublePrecisionPerfRatio), cydriver.CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO, device[0].driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1097
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.singleToDoublePrecisionPerfRatio), cydriver.CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO, device[0].driverDevice)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1097, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1098
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     prop[0] = device[0].deviceProperties
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1096
 * 
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(&(device[0].deviceProperties.singleToDoublePrecisionPerfRatio), cydriver.CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO, device[0].driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1100
 *         return err
 * 
 *     prop[0] = device[0].deviceProperties             # <<<<<<<<<<<<<<
 * 
 *     return cudaSuccess
 */
  __pyx_t_4 = (__pyx_v_device[0]).deviceProperties;
  (__pyx_v_prop[0]) = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1102
 *     prop[0] = device[0].deviceProperties
 * 
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1064
 * 
 * 
 * cdef cudaError_t _cudaGetDeviceProperties_v2(cudaDeviceProp* prop, int deviceOrdinal) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetDeviceProperties_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1105
 * 
 * 
 * cdef cudaError_t _cudaChooseDevice(int* device, const cudaDeviceProp* prop) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if device == NULL or prop == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaChooseDevice(int *__pyx_v_device, struct cudaDeviceProp const *__pyx_v_prop) {
  cudaError_t __pyx_v_err;
  int __pyx_v_best;
  int __pyx_v_maxrank;
  int __pyx_v_rank;
  char *__pyx_v_dontCare_name;
  int __pyx_v_dontCare_major;
  int __pyx_v_dontCare_minor;
  size_t __pyx_v_dontCare_totalGlobalMem;
  int __pyx_v_deviceOrdinal;
  struct cudaDeviceProp *__pyx_v_devProp;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  char __pyx_t_4[1];
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaChooseDevice", __pyx_f[0], 1105, 1, __PYX_ERR(0, 1105, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1106
 * 
 * cdef cudaError_t _cudaChooseDevice(int* device, const cudaDeviceProp* prop) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if device == NULL or prop == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_2 = (__pyx_v_device == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_prop == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1107
 * cdef cudaError_t _cudaChooseDevice(int* device, const cudaDeviceProp* prop) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if device == NULL or prop == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1107, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1108
 *     if device == NULL or prop == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1106
 * 
 * cdef cudaError_t _cudaChooseDevice(int* device, const cudaDeviceProp* prop) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if device == NULL or prop == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1110
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1111
 * 
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1111, __pyx_L1_error)
  __pyx_v_err = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1112
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef int best = -1
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1113
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef int best = -1
 *     cdef int maxrank = -1
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1112
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef int best = -1
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1114
 *     if err != cudaSuccess:
 *         return err
 *     cdef int best = -1             # <<<<<<<<<<<<<<
 *     cdef int maxrank = -1
 *     cdef int rank = 0
 */
  __pyx_v_best = -1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1115
 *         return err
 *     cdef int best = -1
 *     cdef int maxrank = -1             # <<<<<<<<<<<<<<
 *     cdef int rank = 0
 *     cdef char* dontCare_name = [b'\0']
 */
  __pyx_v_maxrank = -1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1116
 *     cdef int best = -1
 *     cdef int maxrank = -1
 *     cdef int rank = 0             # <<<<<<<<<<<<<<
 *     cdef char* dontCare_name = [b'\0']
 *     cdef int dontCare_major = -1
 */
  __pyx_v_rank = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1117
 *     cdef int maxrank = -1
 *     cdef int rank = 0
 *     cdef char* dontCare_name = [b'\0']             # <<<<<<<<<<<<<<
 *     cdef int dontCare_major = -1
 *     cdef int dontCare_minor = -1
 */
  __pyx_t_4[0] = '\x00';
  __pyx_v_dontCare_name = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1118
 *     cdef int rank = 0
 *     cdef char* dontCare_name = [b'\0']
 *     cdef int dontCare_major = -1             # <<<<<<<<<<<<<<
 *     cdef int dontCare_minor = -1
 *     cdef size_t dontCare_totalGlobalMem = 0
 */
  __pyx_v_dontCare_major = -1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1119
 *     cdef char* dontCare_name = [b'\0']
 *     cdef int dontCare_major = -1
 *     cdef int dontCare_minor = -1             # <<<<<<<<<<<<<<
 *     cdef size_t dontCare_totalGlobalMem = 0
 *     cdef int deviceOrdinal = 0
 */
  __pyx_v_dontCare_minor = -1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1120
 *     cdef int dontCare_major = -1
 *     cdef int dontCare_minor = -1
 *     cdef size_t dontCare_totalGlobalMem = 0             # <<<<<<<<<<<<<<
 *     cdef int deviceOrdinal = 0
 *     cdef cudaDeviceProp *devProp
 */
  __pyx_v_dontCare_totalGlobalMem = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1121
 *     cdef int dontCare_minor = -1
 *     cdef size_t dontCare_totalGlobalMem = 0
 *     cdef int deviceOrdinal = 0             # <<<<<<<<<<<<<<
 *     cdef cudaDeviceProp *devProp
 * 
 */
  __pyx_v_deviceOrdinal = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1124
 *     cdef cudaDeviceProp *devProp
 * 
 *     for deviceOrdinal in range(m_global._numDevices):             # <<<<<<<<<<<<<<
 *         devProp = &m_global._deviceList[deviceOrdinal].deviceProperties
 *         rank = 0
 */
  __pyx_t_5 = __pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->_numDevices;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_deviceOrdinal = __pyx_t_7;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1125
 * 
 *     for deviceOrdinal in range(m_global._numDevices):
 *         devProp = &m_global._deviceList[deviceOrdinal].deviceProperties             # <<<<<<<<<<<<<<
 *         rank = 0
 *         if (strncmp(prop[0].name, dontCare_name, sizeof(prop[0].name)) != 0):
 */
    __pyx_v_devProp = (&(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->_deviceList[__pyx_v_deviceOrdinal]).deviceProperties);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1126
 *     for deviceOrdinal in range(m_global._numDevices):
 *         devProp = &m_global._deviceList[deviceOrdinal].deviceProperties
 *         rank = 0             # <<<<<<<<<<<<<<
 *         if (strncmp(prop[0].name, dontCare_name, sizeof(prop[0].name)) != 0):
 *             rank += strncmp(prop[0].name, devProp[0].name, sizeof(prop[0].name)) == 0
 */
    __pyx_v_rank = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1127
 *         devProp = &m_global._deviceList[deviceOrdinal].deviceProperties
 *         rank = 0
 *         if (strncmp(prop[0].name, dontCare_name, sizeof(prop[0].name)) != 0):             # <<<<<<<<<<<<<<
 *             rank += strncmp(prop[0].name, devProp[0].name, sizeof(prop[0].name)) == 0
 *         if (prop[0].major != dontCare_major):
 */
    __pyx_t_1 = (strncmp((__pyx_v_prop[0]).name, __pyx_v_dontCare_name, (sizeof((__pyx_v_prop[0]).name))) != 0);
    if (__pyx_t_1) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1128
 *         rank = 0
 *         if (strncmp(prop[0].name, dontCare_name, sizeof(prop[0].name)) != 0):
 *             rank += strncmp(prop[0].name, devProp[0].name, sizeof(prop[0].name)) == 0             # <<<<<<<<<<<<<<
 *         if (prop[0].major != dontCare_major):
 *             rank += prop[0].major <= devProp[0].major
 */
      __pyx_v_rank = (__pyx_v_rank + (strncmp((__pyx_v_prop[0]).name, (__pyx_v_devProp[0]).name, (sizeof((__pyx_v_prop[0]).name))) == 0));

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1127
 *         devProp = &m_global._deviceList[deviceOrdinal].deviceProperties
 *         rank = 0
 *         if (strncmp(prop[0].name, dontCare_name, sizeof(prop[0].name)) != 0):             # <<<<<<<<<<<<<<
 *             rank += strncmp(prop[0].name, devProp[0].name, sizeof(prop[0].name)) == 0
 *         if (prop[0].major != dontCare_major):
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1129
 *         if (strncmp(prop[0].name, dontCare_name, sizeof(prop[0].name)) != 0):
 *             rank += strncmp(prop[0].name, devProp[0].name, sizeof(prop[0].name)) == 0
 *         if (prop[0].major != dontCare_major):             # <<<<<<<<<<<<<<
 *             rank += prop[0].major <= devProp[0].major
 *         if (prop[0].major == devProp[0].major and prop[0].minor != dontCare_minor):
 */
    __pyx_t_1 = ((__pyx_v_prop[0]).major != __pyx_v_dontCare_major);
    if (__pyx_t_1) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1130
 *             rank += strncmp(prop[0].name, devProp[0].name, sizeof(prop[0].name)) == 0
 *         if (prop[0].major != dontCare_major):
 *             rank += prop[0].major <= devProp[0].major             # <<<<<<<<<<<<<<
 *         if (prop[0].major == devProp[0].major and prop[0].minor != dontCare_minor):
 *             rank += prop[0].minor <= devProp[0].minor
 */
      __pyx_v_rank = (__pyx_v_rank + ((__pyx_v_prop[0]).major <= (__pyx_v_devProp[0]).major));

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1129
 *         if (strncmp(prop[0].name, dontCare_name, sizeof(prop[0].name)) != 0):
 *             rank += strncmp(prop[0].name, devProp[0].name, sizeof(prop[0].name)) == 0
 *         if (prop[0].major != dontCare_major):             # <<<<<<<<<<<<<<
 *             rank += prop[0].major <= devProp[0].major
 *         if (prop[0].major == devProp[0].major and prop[0].minor != dontCare_minor):
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1131
 *         if (prop[0].major != dontCare_major):
 *             rank += prop[0].major <= devProp[0].major
 *         if (prop[0].major == devProp[0].major and prop[0].minor != dontCare_minor):             # <<<<<<<<<<<<<<
 *             rank += prop[0].minor <= devProp[0].minor
 *         if (prop[0].totalGlobalMem != dontCare_totalGlobalMem):
 */
    __pyx_t_2 = ((__pyx_v_prop[0]).major == (__pyx_v_devProp[0]).major);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_prop[0]).minor != __pyx_v_dontCare_minor);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    if (__pyx_t_1) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1132
 *             rank += prop[0].major <= devProp[0].major
 *         if (prop[0].major == devProp[0].major and prop[0].minor != dontCare_minor):
 *             rank += prop[0].minor <= devProp[0].minor             # <<<<<<<<<<<<<<
 *         if (prop[0].totalGlobalMem != dontCare_totalGlobalMem):
 *             rank += prop[0].totalGlobalMem <= devProp[0].totalGlobalMem
 */
      __pyx_v_rank = (__pyx_v_rank + ((__pyx_v_prop[0]).minor <= (__pyx_v_devProp[0]).minor));

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1131
 *         if (prop[0].major != dontCare_major):
 *             rank += prop[0].major <= devProp[0].major
 *         if (prop[0].major == devProp[0].major and prop[0].minor != dontCare_minor):             # <<<<<<<<<<<<<<
 *             rank += prop[0].minor <= devProp[0].minor
 *         if (prop[0].totalGlobalMem != dontCare_totalGlobalMem):
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1133
 *         if (prop[0].major == devProp[0].major and prop[0].minor != dontCare_minor):
 *             rank += prop[0].minor <= devProp[0].minor
 *         if (prop[0].totalGlobalMem != dontCare_totalGlobalMem):             # <<<<<<<<<<<<<<
 *             rank += prop[0].totalGlobalMem <= devProp[0].totalGlobalMem
 *         if (rank > maxrank):
 */
    __pyx_t_1 = ((__pyx_v_prop[0]).totalGlobalMem != __pyx_v_dontCare_totalGlobalMem);
    if (__pyx_t_1) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1134
 *             rank += prop[0].minor <= devProp[0].minor
 *         if (prop[0].totalGlobalMem != dontCare_totalGlobalMem):
 *             rank += prop[0].totalGlobalMem <= devProp[0].totalGlobalMem             # <<<<<<<<<<<<<<
 *         if (rank > maxrank):
 *             maxrank = rank
 */
      __pyx_v_rank = (__pyx_v_rank + ((__pyx_v_prop[0]).totalGlobalMem <= (__pyx_v_devProp[0]).totalGlobalMem));

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1133
 *         if (prop[0].major == devProp[0].major and prop[0].minor != dontCare_minor):
 *             rank += prop[0].minor <= devProp[0].minor
 *         if (prop[0].totalGlobalMem != dontCare_totalGlobalMem):             # <<<<<<<<<<<<<<
 *             rank += prop[0].totalGlobalMem <= devProp[0].totalGlobalMem
 *         if (rank > maxrank):
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1135
 *         if (prop[0].totalGlobalMem != dontCare_totalGlobalMem):
 *             rank += prop[0].totalGlobalMem <= devProp[0].totalGlobalMem
 *         if (rank > maxrank):             # <<<<<<<<<<<<<<
 *             maxrank = rank
 *             best = deviceOrdinal
 */
    __pyx_t_1 = (__pyx_v_rank > __pyx_v_maxrank);
    if (__pyx_t_1) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1136
 *             rank += prop[0].totalGlobalMem <= devProp[0].totalGlobalMem
 *         if (rank > maxrank):
 *             maxrank = rank             # <<<<<<<<<<<<<<
 *             best = deviceOrdinal
 * 
 */
      __pyx_v_maxrank = __pyx_v_rank;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1137
 *         if (rank > maxrank):
 *             maxrank = rank
 *             best = deviceOrdinal             # <<<<<<<<<<<<<<
 * 
 *     device[0] = best
 */
      __pyx_v_best = __pyx_v_deviceOrdinal;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1135
 *         if (prop[0].totalGlobalMem != dontCare_totalGlobalMem):
 *             rank += prop[0].totalGlobalMem <= devProp[0].totalGlobalMem
 *         if (rank > maxrank):             # <<<<<<<<<<<<<<
 *             maxrank = rank
 *             best = deviceOrdinal
 */
    }
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1139
 *             best = deviceOrdinal
 * 
 *     device[0] = best             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
  (__pyx_v_device[0]) = __pyx_v_best;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1140
 * 
 *     device[0] = best
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1105
 * 
 * 
 * cdef cudaError_t _cudaChooseDevice(int* device, const cudaDeviceProp* prop) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if device == NULL or prop == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaChooseDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1143
 * 
 * 
 * cdef cudaError_t _cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyArrayToArray(cudaArray_t __pyx_v_dst, size_t __pyx_v_wOffsetDst, size_t __pyx_v_hOffsetDst, cudaArray_const_t __pyx_v_src, size_t __pyx_v_wOffsetSrc, size_t __pyx_v_hOffsetSrc, size_t __pyx_v_count, enum cudaMemcpyKind __pyx_v_kind) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpyArrayToArray", __pyx_f[0], 1143, 1, __PYX_ERR(0, 1143, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1144
 * 
 * cdef cudaError_t _cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1146
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1146, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1147
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, count, kind)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1148
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = memcpyArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, count, kind)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1147
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = memcpyArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, count, kind)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1149
 *     if err != cudaSuccess:
 *         return err
 *     err = memcpyArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, count, kind)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyArrayToArray(__pyx_v_dst, __pyx_v_hOffsetDst, __pyx_v_wOffsetDst, __pyx_v_src, __pyx_v_hOffsetSrc, __pyx_v_wOffsetSrc, __pyx_v_count, __pyx_v_kind); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1149, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1150
 *         return err
 *     err = memcpyArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, count, kind)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1151
 *     err = memcpyArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, count, kind)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1151, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1150
 *         return err
 *     err = memcpyArrayToArray(dst, hOffsetDst, wOffsetDst, src, hOffsetSrc, wOffsetSrc, count, kind)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1152
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1143
 * 
 * 
 * cdef cudaError_t _cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpyArrayToArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1155
 * 
 * 
 * cdef cudaError_t _cudaGetChannelDesc(cudaChannelFormatDesc* desc, cudaArray_const_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetChannelDesc(struct cudaChannelFormatDesc *__pyx_v_desc, cudaArray_const_t __pyx_v_array) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetChannelDesc", __pyx_f[0], 1155, 1, __PYX_ERR(0, 1155, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1156
 * 
 * cdef cudaError_t _cudaGetChannelDesc(cudaChannelFormatDesc* desc, cudaArray_const_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     if desc == NULL:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1158
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if desc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_desc == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1159
 * 
 *     if desc == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1159, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1160
 *     if desc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1158
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if desc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1162
 *         return cudaErrorInvalidValue
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1162, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1163
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = getChannelDesc(array, desc)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1164
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = getChannelDesc(array, desc)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1163
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = getChannelDesc(array, desc)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1165
 *     if err != cudaSuccess:
 *         return err
 *     err = getChannelDesc(array, desc)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getChannelDesc(__pyx_v_array, __pyx_v_desc); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1165, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1166
 *         return err
 *     err = getChannelDesc(array, desc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1167
 *     err = getChannelDesc(array, desc)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1167, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1166
 *         return err
 *     err = getChannelDesc(array, desc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1168
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1155
 * 
 * 
 * cdef cudaError_t _cudaGetChannelDesc(cudaChannelFormatDesc* desc, cudaArray_const_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetChannelDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1171
 * 
 * 
 * cdef cudaError_t _cudaCreateTextureObject(cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaCreateTextureObject(cudaTextureObject_t *__pyx_v_pTexObject, struct cudaResourceDesc const *__pyx_v_pResDesc, struct cudaTextureDesc const *__pyx_v_pTexDesc, struct cudaResourceViewDesc const *__pyx_v_pResViewDesc) {
  cudaError_t __pyx_v_err;
  CUDA_RESOURCE_DESC __pyx_v_rd;
  CUDA_TEXTURE_DESC __pyx_v_td;
  CUDA_RESOURCE_VIEW_DESC __pyx_v_rvd;
  struct cudaTextureDesc __pyx_v_texDesc;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  CUresult __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaCreateTextureObject", __pyx_f[0], 1171, 1, __PYX_ERR(0, 1171, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1172
 * 
 * cdef cudaError_t _cudaCreateTextureObject(cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     if pResDesc == NULL or pTexDesc == NULL:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1174
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pResDesc == NULL or pTexDesc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_2 = (__pyx_v_pResDesc == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_pTexDesc == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1175
 * 
 *     if pResDesc == NULL or pTexDesc == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1175, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1176
 *     if pResDesc == NULL or pTexDesc == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cydriver.CUDA_RESOURCE_DESC rd
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1174
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     if pResDesc == NULL or pTexDesc == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1182
 *     cdef cydriver.CUDA_RESOURCE_VIEW_DESC rvd
 *     cdef cudaTextureDesc texDesc
 *     memcpy(&texDesc, pTexDesc, sizeof(cudaTextureDesc))             # <<<<<<<<<<<<<<
 *     texDesc.seamlessCubemap = 0
 * 
 */
  (void)(memcpy((&__pyx_v_texDesc), __pyx_v_pTexDesc, (sizeof(struct cudaTextureDesc))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1183
 *     cdef cudaTextureDesc texDesc
 *     memcpy(&texDesc, pTexDesc, sizeof(cudaTextureDesc))
 *     texDesc.seamlessCubemap = 0             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_texDesc.seamlessCubemap = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1185
 *     texDesc.seamlessCubemap = 0
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1185, __pyx_L1_error)
  __pyx_v_err = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1186
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     if pResViewDesc:
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1187
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     if pResViewDesc:
 *         err = getDriverResDescFromResDesc(&rd, pResDesc, &td, &texDesc, &rvd, pResViewDesc)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1186
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     if pResViewDesc:
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1188
 *     if err != cudaSuccess:
 *         return err
 *     if pResViewDesc:             # <<<<<<<<<<<<<<
 *         err = getDriverResDescFromResDesc(&rd, pResDesc, &td, &texDesc, &rvd, pResViewDesc)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_pResViewDesc != 0);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1189
 *         return err
 *     if pResViewDesc:
 *         err = getDriverResDescFromResDesc(&rd, pResDesc, &td, &texDesc, &rvd, pResViewDesc)             # <<<<<<<<<<<<<<
 *     else:
 *         err = getDriverResDescFromResDesc(&rd, pResDesc, &td, &texDesc, NULL, pResViewDesc)
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getDriverResDescFromResDesc((&__pyx_v_rd), __pyx_v_pResDesc, (&__pyx_v_td), (&__pyx_v_texDesc), (&__pyx_v_rvd), __pyx_v_pResViewDesc); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1189, __pyx_L1_error)
    __pyx_v_err = __pyx_t_3;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1188
 *     if err != cudaSuccess:
 *         return err
 *     if pResViewDesc:             # <<<<<<<<<<<<<<
 *         err = getDriverResDescFromResDesc(&rd, pResDesc, &td, &texDesc, &rvd, pResViewDesc)
 *     else:
 */
    goto __pyx_L7;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1191
 *         err = getDriverResDescFromResDesc(&rd, pResDesc, &td, &texDesc, &rvd, pResViewDesc)
 *     else:
 *         err = getDriverResDescFromResDesc(&rd, pResDesc, &td, &texDesc, NULL, pResViewDesc)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getDriverResDescFromResDesc((&__pyx_v_rd), __pyx_v_pResDesc, (&__pyx_v_td), (&__pyx_v_texDesc), NULL, __pyx_v_pResViewDesc); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1191, __pyx_L1_error)
    __pyx_v_err = __pyx_t_3;
  }
  __pyx_L7:;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1192
 *     else:
 *         err = getDriverResDescFromResDesc(&rd, pResDesc, &td, &texDesc, NULL, pResViewDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1193
 *         err = getDriverResDescFromResDesc(&rd, pResDesc, &td, &texDesc, NULL, pResViewDesc)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     if pResViewDesc:
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1193, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1194
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     if pResViewDesc:
 *         err = <cudaError_t>cydriver._cuTexObjectCreate(pTexObject, &rd, &td, &rvd)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1192
 *     else:
 *         err = getDriverResDescFromResDesc(&rd, pResDesc, &td, &texDesc, NULL, pResViewDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1195
 *         _setLastError(err)
 *         return err
 *     if pResViewDesc:             # <<<<<<<<<<<<<<
 *         err = <cudaError_t>cydriver._cuTexObjectCreate(pTexObject, &rd, &td, &rvd)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_pResViewDesc != 0);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1196
 *         return err
 *     if pResViewDesc:
 *         err = <cudaError_t>cydriver._cuTexObjectCreate(pTexObject, &rd, &td, &rvd)             # <<<<<<<<<<<<<<
 *     else:
 *         err = <cudaError_t>cydriver._cuTexObjectCreate(pTexObject, &rd, &td, NULL)
 */
    __pyx_t_4 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectCreate(__pyx_v_pTexObject, (&__pyx_v_rd), (&__pyx_v_td), (&__pyx_v_rvd)); if (unlikely(__pyx_t_4 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1196, __pyx_L1_error)
    __pyx_v_err = ((cudaError_t)__pyx_t_4);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1195
 *         _setLastError(err)
 *         return err
 *     if pResViewDesc:             # <<<<<<<<<<<<<<
 *         err = <cudaError_t>cydriver._cuTexObjectCreate(pTexObject, &rd, &td, &rvd)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1198
 *         err = <cudaError_t>cydriver._cuTexObjectCreate(pTexObject, &rd, &td, &rvd)
 *     else:
 *         err = <cudaError_t>cydriver._cuTexObjectCreate(pTexObject, &rd, &td, NULL)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  /*else*/ {
    __pyx_t_4 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectCreate(__pyx_v_pTexObject, (&__pyx_v_rd), (&__pyx_v_td), NULL); if (unlikely(__pyx_t_4 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1198, __pyx_L1_error)
    __pyx_v_err = ((cudaError_t)__pyx_t_4);
  }
  __pyx_L9:;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1199
 *     else:
 *         err = <cudaError_t>cydriver._cuTexObjectCreate(pTexObject, &rd, &td, NULL)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1200
 *         err = <cudaError_t>cydriver._cuTexObjectCreate(pTexObject, &rd, &td, NULL)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1200, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1199
 *     else:
 *         err = <cudaError_t>cydriver._cuTexObjectCreate(pTexObject, &rd, &td, NULL)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1201
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1171
 * 
 * 
 * cdef cudaError_t _cudaCreateTextureObject(cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaCreateTextureObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1203
 *     return err
 * 
 * cdef cudaError_t _cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *__pyx_v_pTexDesc, cudaTextureObject_t __pyx_v_texObject) {
  cudaError_t __pyx_v_err;
  struct cudaResourceDesc __pyx_v_resDesc;
  CUDA_RESOURCE_DESC __pyx_v_rd;
  CUDA_TEXTURE_DESC __pyx_v_td;
  struct cudaTextureDesc __pyx_v_texDesc;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetTextureObjectTextureDesc", __pyx_f[0], 1203, 1, __PYX_ERR(0, 1203, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1204
 * 
 * cdef cudaError_t _cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaResourceDesc resDesc
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1211
 *     cdef cudaTextureDesc texDesc
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1211, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1212
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&rd, texObject)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1213
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&rd, texObject)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1212
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&rd, texObject)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1214
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&rd, texObject)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectGetResourceDesc((&__pyx_v_rd), __pyx_v_texObject); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1214, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1215
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&rd, texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1216
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&rd, texObject)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectGetTextureDesc(&td, texObject)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1216, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1217
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuTexObjectGetTextureDesc(&td, texObject)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1215
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&rd, texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1218
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectGetTextureDesc(&td, texObject)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectGetTextureDesc((&__pyx_v_td), __pyx_v_texObject); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1218, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1219
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectGetTextureDesc(&td, texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1220
 *     err = <cudaError_t>cydriver._cuTexObjectGetTextureDesc(&td, texObject)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, &texDesc, &td, NULL, NULL)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1220, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1221
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, &texDesc, &td, NULL, NULL)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1219
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectGetTextureDesc(&td, texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1222
 *         _setLastError(err)
 *         return err
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, &texDesc, &td, NULL, NULL)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getResDescFromDriverResDesc((&__pyx_v_resDesc), (&__pyx_v_rd), (&__pyx_v_texDesc), (&__pyx_v_td), NULL, NULL); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1222, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1223
 *         return err
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, &texDesc, &td, NULL, NULL)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1224
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, &texDesc, &td, NULL, NULL)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     memcpy(pTexDesc, &texDesc, sizeof(cudaTextureDesc))
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1224, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1225
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     memcpy(pTexDesc, &texDesc, sizeof(cudaTextureDesc))
 * 
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1223
 *         return err
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, &texDesc, &td, NULL, NULL)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1226
 *         _setLastError(err)
 *         return err
 *     memcpy(pTexDesc, &texDesc, sizeof(cudaTextureDesc))             # <<<<<<<<<<<<<<
 * 
 *     return cudaSuccess
 */
  (void)(memcpy(__pyx_v_pTexDesc, (&__pyx_v_texDesc), (sizeof(struct cudaTextureDesc))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1228
 *     memcpy(pTexDesc, &texDesc, sizeof(cudaTextureDesc))
 * 
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1203
 *     return err
 * 
 * cdef cudaError_t _cudaGetTextureObjectTextureDesc(cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetTextureObjectTextureDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1230
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaResourceDesc resDesc
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *__pyx_v_pResViewDesc, cudaTextureObject_t __pyx_v_texObject) {
  cudaError_t __pyx_v_err;
  struct cudaResourceDesc __pyx_v_resDesc;
  CUDA_RESOURCE_DESC __pyx_v_rd;
  CUDA_RESOURCE_VIEW_DESC __pyx_v_rvd;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetTextureObjectResourceViewDesc", __pyx_f[0], 1230, 1, __PYX_ERR(0, 1230, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1231
 * 
 * cdef cudaError_t _cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cudaResourceDesc resDesc
 *     cdef cydriver.CUDA_RESOURCE_DESC rd
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1236
 *     cdef cydriver.CUDA_RESOURCE_VIEW_DESC rvd
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1236, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1237
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceDesc(&rd, texObject)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1238
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceDesc(&rd, texObject)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1237
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceDesc(&rd, texObject)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1239
 *     if err != cudaSuccess:
 *         return err
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceDesc(&rd, texObject)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_8cydriver_cuTexObjectGetResourceDesc((&__pyx_v_rd), __pyx_v_texObject); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1239, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1240
 *         return err
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceDesc(&rd, texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1241
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceDesc(&rd, texObject)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceViewDesc(&rvd, texObject)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1241, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1242
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceViewDesc(&rvd, texObject)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1240
 *         return err
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceDesc(&rd, texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1243
 *         _setLastError(err)
 *         return err
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceViewDesc(&rvd, texObject)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_8cydriver_cuTexObjectGetResourceViewDesc((&__pyx_v_rvd), __pyx_v_texObject); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1243, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1244
 *         return err
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceViewDesc(&rvd, texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1245
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceViewDesc(&rvd, texObject)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, NULL, NULL, pResViewDesc, &rvd)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1245, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1246
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, NULL, NULL, pResViewDesc, &rvd)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1244
 *         return err
 *     err =  <cudaError_t>cydriver.cuTexObjectGetResourceViewDesc(&rvd, texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1247
 *         _setLastError(err)
 *         return err
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, NULL, NULL, pResViewDesc, &rvd)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getResDescFromDriverResDesc((&__pyx_v_resDesc), (&__pyx_v_rd), NULL, NULL, __pyx_v_pResViewDesc, (&__pyx_v_rvd)); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1247, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1248
 *         return err
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, NULL, NULL, pResViewDesc, &rvd)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1249
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, NULL, NULL, pResViewDesc, &rvd)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1249, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1250
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     return cudaSuccess
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1248
 *         return err
 *     err = getResDescFromDriverResDesc(&resDesc, &rd, NULL, NULL, pResViewDesc, &rvd)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1252
 *         return err
 * 
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1230
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaResourceDesc resDesc
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetTextureObjectResourceViewDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1255
 * 
 * 
 * cdef cudaError_t _cudaGetExportTable(const void** ppExportTable, const cudaUUID_t* pExportTableId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetExportTable(void const **__pyx_v_ppExportTable, cudaUUID_t const *__pyx_v_pExportTableId) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetExportTable", __pyx_f[0], 1255, 1, __PYX_ERR(0, 1255, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1256
 * 
 * cdef cudaError_t _cudaGetExportTable(const void** ppExportTable, const cudaUUID_t* pExportTableId) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitDriver()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1258
 *     cdef cudaError_t err = cudaSuccess
 * 
 *     err = m_global.lazyInitDriver()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1258, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1259
 * 
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGetExportTable(ppExportTable, <const cydriver.CUuuid*>pExportTableId)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1260
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGetExportTable(ppExportTable, <const cydriver.CUuuid*>pExportTableId)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1259
 * 
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGetExportTable(ppExportTable, <const cydriver.CUuuid*>pExportTableId)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1261
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGetExportTable(ppExportTable, <const cydriver.CUuuid*>pExportTableId)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGetExportTable(__pyx_v_ppExportTable, ((CUuuid const *)__pyx_v_pExportTableId)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1261, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1262
 *         return err
 *     err = <cudaError_t>cydriver._cuGetExportTable(ppExportTable, <const cydriver.CUuuid*>pExportTableId)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1263
 *     err = <cudaError_t>cydriver._cuGetExportTable(ppExportTable, <const cydriver.CUuuid*>pExportTableId)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1263, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1262
 *         return err
 *     err = <cudaError_t>cydriver._cuGetExportTable(ppExportTable, <const cydriver.CUuuid*>pExportTableId)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1264
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1255
 * 
 * 
 * cdef cudaError_t _cudaGetExportTable(const void** ppExportTable, const cudaUUID_t* pExportTableId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetExportTable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1267
 * 
 * 
 * cdef cudaError_t _cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if p == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy3DPeer(struct cudaMemcpy3DPeerParms const *__pyx_v_p) {
  cudaError_t __pyx_v_err;
  struct cudaMemcpy3DParms __pyx_v_cp;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  cudaArray_t __pyx_t_3;
  struct cudaPos __pyx_t_4;
  struct cudaPitchedPtr __pyx_t_5;
  struct cudaExtent __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy3DPeer", __pyx_f[0], 1267, 1, __PYX_ERR(0, 1267, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1268
 * 
 * cdef cudaError_t _cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_p == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1269
 * cdef cudaError_t _cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1269, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1270
 *     if p == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1268
 * 
 * cdef cudaError_t _cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1272
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cudaMemcpy3DParms cp
 *     memset(&cp, 0, sizeof(cp))
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1274
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaMemcpy3DParms cp
 *     memset(&cp, 0, sizeof(cp))             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  (void)(memset((&__pyx_v_cp), 0, (sizeof(__pyx_v_cp))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1275
 *     cdef cudaMemcpy3DParms cp
 *     memset(&cp, 0, sizeof(cp))
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1275, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1276
 *     memset(&cp, 0, sizeof(cp))
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cp.srcArray = p[0].srcArray
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1277
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cp.srcArray = p[0].srcArray
 *     cp.srcPos = p[0].srcPos
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1276
 *     memset(&cp, 0, sizeof(cp))
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cp.srcArray = p[0].srcArray
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1278
 *     if err != cudaSuccess:
 *         return err
 *     cp.srcArray = p[0].srcArray             # <<<<<<<<<<<<<<
 *     cp.srcPos = p[0].srcPos
 *     cp.srcPtr = p[0].srcPtr
 */
  __pyx_t_3 = (__pyx_v_p[0]).srcArray;
  __pyx_v_cp.srcArray = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1279
 *         return err
 *     cp.srcArray = p[0].srcArray
 *     cp.srcPos = p[0].srcPos             # <<<<<<<<<<<<<<
 *     cp.srcPtr = p[0].srcPtr
 *     cp.dstArray = p[0].dstArray
 */
  __pyx_t_4 = (__pyx_v_p[0]).srcPos;
  __pyx_v_cp.srcPos = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1280
 *     cp.srcArray = p[0].srcArray
 *     cp.srcPos = p[0].srcPos
 *     cp.srcPtr = p[0].srcPtr             # <<<<<<<<<<<<<<
 *     cp.dstArray = p[0].dstArray
 *     cp.dstPos = p[0].dstPos
 */
  __pyx_t_5 = (__pyx_v_p[0]).srcPtr;
  __pyx_v_cp.srcPtr = __pyx_t_5;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1281
 *     cp.srcPos = p[0].srcPos
 *     cp.srcPtr = p[0].srcPtr
 *     cp.dstArray = p[0].dstArray             # <<<<<<<<<<<<<<
 *     cp.dstPos = p[0].dstPos
 *     cp.dstPtr = p[0].dstPtr
 */
  __pyx_t_3 = (__pyx_v_p[0]).dstArray;
  __pyx_v_cp.dstArray = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1282
 *     cp.srcPtr = p[0].srcPtr
 *     cp.dstArray = p[0].dstArray
 *     cp.dstPos = p[0].dstPos             # <<<<<<<<<<<<<<
 *     cp.dstPtr = p[0].dstPtr
 *     cp.extent = p[0].extent
 */
  __pyx_t_4 = (__pyx_v_p[0]).dstPos;
  __pyx_v_cp.dstPos = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1283
 *     cp.dstArray = p[0].dstArray
 *     cp.dstPos = p[0].dstPos
 *     cp.dstPtr = p[0].dstPtr             # <<<<<<<<<<<<<<
 *     cp.extent = p[0].extent
 *     cp.kind = cudaMemcpyKind.cudaMemcpyDeviceToDevice
 */
  __pyx_t_5 = (__pyx_v_p[0]).dstPtr;
  __pyx_v_cp.dstPtr = __pyx_t_5;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1284
 *     cp.dstPos = p[0].dstPos
 *     cp.dstPtr = p[0].dstPtr
 *     cp.extent = p[0].extent             # <<<<<<<<<<<<<<
 *     cp.kind = cudaMemcpyKind.cudaMemcpyDeviceToDevice
 * 
 */
  __pyx_t_6 = (__pyx_v_p[0]).extent;
  __pyx_v_cp.extent = __pyx_t_6;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1285
 *     cp.dstPtr = p[0].dstPtr
 *     cp.extent = p[0].extent
 *     cp.kind = cudaMemcpyKind.cudaMemcpyDeviceToDevice             # <<<<<<<<<<<<<<
 * 
 *     err = memcpy3D(&cp, True, p[0].srcDevice, p[0].dstDevice, NULL, False)
 */
  __pyx_v_cp.kind = cudaMemcpyDeviceToDevice;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1287
 *     cp.kind = cudaMemcpyKind.cudaMemcpyDeviceToDevice
 * 
 *     err = memcpy3D(&cp, True, p[0].srcDevice, p[0].dstDevice, NULL, False)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy3D((&__pyx_v_cp), 1, (__pyx_v_p[0]).srcDevice, (__pyx_v_p[0]).dstDevice, NULL, 0); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1287, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1288
 * 
 *     err = memcpy3D(&cp, True, p[0].srcDevice, p[0].dstDevice, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1289
 *     err = memcpy3D(&cp, True, p[0].srcDevice, p[0].dstDevice, NULL, False)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1289, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1288
 * 
 *     err = memcpy3D(&cp, True, p[0].srcDevice, p[0].dstDevice, NULL, False)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1290
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1267
 * 
 * 
 * cdef cudaError_t _cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms* p) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if p == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy3DPeer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1292
 *     return err
 * 
 * cdef cudaError_t _cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if p == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy3DPeerAsync(struct cudaMemcpy3DPeerParms const *__pyx_v_p, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  struct cudaMemcpy3DParms __pyx_v_cp;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  cudaArray_t __pyx_t_3;
  struct cudaPos __pyx_t_4;
  struct cudaPitchedPtr __pyx_t_5;
  struct cudaExtent __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpy3DPeerAsync", __pyx_f[0], 1292, 1, __PYX_ERR(0, 1292, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1293
 * 
 * cdef cudaError_t _cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_p == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1294
 * cdef cudaError_t _cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1294, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1295
 *     if p == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1293
 * 
 * cdef cudaError_t _cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if p == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1297
 *         return cudaErrorInvalidValue
 * 
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cudaMemcpy3DParms cp
 *     memset(&cp, 0, sizeof(cp))
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1299
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaMemcpy3DParms cp
 *     memset(&cp, 0, sizeof(cp))             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
  (void)(memset((&__pyx_v_cp), 0, (sizeof(__pyx_v_cp))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1301
 *     memset(&cp, 0, sizeof(cp))
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1301, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1302
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cp.srcArray = p[0].srcArray
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1303
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cp.srcArray = p[0].srcArray
 *     cp.srcPos = p[0].srcPos
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1302
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cp.srcArray = p[0].srcArray
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1304
 *     if err != cudaSuccess:
 *         return err
 *     cp.srcArray = p[0].srcArray             # <<<<<<<<<<<<<<
 *     cp.srcPos = p[0].srcPos
 *     cp.srcPtr = p[0].srcPtr
 */
  __pyx_t_3 = (__pyx_v_p[0]).srcArray;
  __pyx_v_cp.srcArray = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1305
 *         return err
 *     cp.srcArray = p[0].srcArray
 *     cp.srcPos = p[0].srcPos             # <<<<<<<<<<<<<<
 *     cp.srcPtr = p[0].srcPtr
 *     cp.dstArray = p[0].dstArray
 */
  __pyx_t_4 = (__pyx_v_p[0]).srcPos;
  __pyx_v_cp.srcPos = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1306
 *     cp.srcArray = p[0].srcArray
 *     cp.srcPos = p[0].srcPos
 *     cp.srcPtr = p[0].srcPtr             # <<<<<<<<<<<<<<
 *     cp.dstArray = p[0].dstArray
 *     cp.dstPos = p[0].dstPos
 */
  __pyx_t_5 = (__pyx_v_p[0]).srcPtr;
  __pyx_v_cp.srcPtr = __pyx_t_5;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1307
 *     cp.srcPos = p[0].srcPos
 *     cp.srcPtr = p[0].srcPtr
 *     cp.dstArray = p[0].dstArray             # <<<<<<<<<<<<<<
 *     cp.dstPos = p[0].dstPos
 *     cp.dstPtr = p[0].dstPtr
 */
  __pyx_t_3 = (__pyx_v_p[0]).dstArray;
  __pyx_v_cp.dstArray = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1308
 *     cp.srcPtr = p[0].srcPtr
 *     cp.dstArray = p[0].dstArray
 *     cp.dstPos = p[0].dstPos             # <<<<<<<<<<<<<<
 *     cp.dstPtr = p[0].dstPtr
 *     cp.extent = p[0].extent
 */
  __pyx_t_4 = (__pyx_v_p[0]).dstPos;
  __pyx_v_cp.dstPos = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1309
 *     cp.dstArray = p[0].dstArray
 *     cp.dstPos = p[0].dstPos
 *     cp.dstPtr = p[0].dstPtr             # <<<<<<<<<<<<<<
 *     cp.extent = p[0].extent
 *     cp.kind = cudaMemcpyKind.cudaMemcpyDeviceToDevice
 */
  __pyx_t_5 = (__pyx_v_p[0]).dstPtr;
  __pyx_v_cp.dstPtr = __pyx_t_5;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1310
 *     cp.dstPos = p[0].dstPos
 *     cp.dstPtr = p[0].dstPtr
 *     cp.extent = p[0].extent             # <<<<<<<<<<<<<<
 *     cp.kind = cudaMemcpyKind.cudaMemcpyDeviceToDevice
 * 
 */
  __pyx_t_6 = (__pyx_v_p[0]).extent;
  __pyx_v_cp.extent = __pyx_t_6;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1311
 *     cp.dstPtr = p[0].dstPtr
 *     cp.extent = p[0].extent
 *     cp.kind = cudaMemcpyKind.cudaMemcpyDeviceToDevice             # <<<<<<<<<<<<<<
 * 
 *     err = memcpy3D(&cp, True, p[0].srcDevice, p[0].dstDevice, stream, True)
 */
  __pyx_v_cp.kind = cudaMemcpyDeviceToDevice;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1313
 *     cp.kind = cudaMemcpyKind.cudaMemcpyDeviceToDevice
 * 
 *     err = memcpy3D(&cp, True, p[0].srcDevice, p[0].dstDevice, stream, True)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy3D((&__pyx_v_cp), 1, (__pyx_v_p[0]).srcDevice, (__pyx_v_p[0]).dstDevice, __pyx_v_stream, 1); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1313, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1314
 * 
 *     err = memcpy3D(&cp, True, p[0].srcDevice, p[0].dstDevice, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1315
 *     err = memcpy3D(&cp, True, p[0].srcDevice, p[0].dstDevice, stream, True)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1315, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1314
 * 
 *     err = memcpy3D(&cp, True, p[0].srcDevice, p[0].dstDevice, stream, True)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1316
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1292
 *     return err
 * 
 * cdef cudaError_t _cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms* p, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if p == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpy3DPeerAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1319
 * 
 * 
 * cdef cudaPitchedPtr _make_cudaPitchedPtr(void* d, size_t p, size_t xsz, size_t ysz) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaPitchedPtr s
 *     s.ptr   = d
 */

static struct cudaPitchedPtr __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__make_cudaPitchedPtr(void *__pyx_v_d, size_t __pyx_v_p, size_t __pyx_v_xsz, size_t __pyx_v_ysz) {
  struct cudaPitchedPtr __pyx_v_s;
  struct cudaPitchedPtr __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_make_cudaPitchedPtr", __pyx_f[0], 1319, 1, __PYX_ERR(0, 1319, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1321
 * cdef cudaPitchedPtr _make_cudaPitchedPtr(void* d, size_t p, size_t xsz, size_t ysz) noexcept nogil:
 *     cdef cudaPitchedPtr s
 *     s.ptr   = d             # <<<<<<<<<<<<<<
 *     s.pitch = p
 *     s.xsize = xsz
 */
  __pyx_v_s.ptr = __pyx_v_d;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1322
 *     cdef cudaPitchedPtr s
 *     s.ptr   = d
 *     s.pitch = p             # <<<<<<<<<<<<<<
 *     s.xsize = xsz
 *     s.ysize = ysz
 */
  __pyx_v_s.pitch = __pyx_v_p;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1323
 *     s.ptr   = d
 *     s.pitch = p
 *     s.xsize = xsz             # <<<<<<<<<<<<<<
 *     s.ysize = ysz
 *     return s
 */
  __pyx_v_s.xsize = __pyx_v_xsz;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1324
 *     s.pitch = p
 *     s.xsize = xsz
 *     s.ysize = ysz             # <<<<<<<<<<<<<<
 *     return s
 * 
 */
  __pyx_v_s.ysize = __pyx_v_ysz;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1325
 *     s.xsize = xsz
 *     s.ysize = ysz
 *     return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1319
 * 
 * 
 * cdef cudaPitchedPtr _make_cudaPitchedPtr(void* d, size_t p, size_t xsz, size_t ysz) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaPitchedPtr s
 *     s.ptr   = d
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("cuda.bindings._lib.cyruntime.cyruntime._make_cudaPitchedPtr", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1328
 * 
 * 
 * cdef cudaPos _make_cudaPos(size_t x, size_t y, size_t z) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaPos p
 *     p.x = x
 */

static struct cudaPos __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__make_cudaPos(size_t __pyx_v_x, size_t __pyx_v_y, size_t __pyx_v_z) {
  struct cudaPos __pyx_v_p;
  struct cudaPos __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_make_cudaPos", __pyx_f[0], 1328, 1, __PYX_ERR(0, 1328, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1330
 * cdef cudaPos _make_cudaPos(size_t x, size_t y, size_t z) noexcept nogil:
 *     cdef cudaPos p
 *     p.x = x             # <<<<<<<<<<<<<<
 *     p.y = y
 *     p.z = z
 */
  __pyx_v_p.x = __pyx_v_x;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1331
 *     cdef cudaPos p
 *     p.x = x
 *     p.y = y             # <<<<<<<<<<<<<<
 *     p.z = z
 *     return p
 */
  __pyx_v_p.y = __pyx_v_y;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1332
 *     p.x = x
 *     p.y = y
 *     p.z = z             # <<<<<<<<<<<<<<
 *     return p
 * 
 */
  __pyx_v_p.z = __pyx_v_z;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1333
 *     p.y = y
 *     p.z = z
 *     return p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1328
 * 
 * 
 * cdef cudaPos _make_cudaPos(size_t x, size_t y, size_t z) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaPos p
 *     p.x = x
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("cuda.bindings._lib.cyruntime.cyruntime._make_cudaPos", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1336
 * 
 * 
 * cdef cudaExtent _make_cudaExtent(size_t w, size_t h, size_t d) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaExtent e
 *     e.width  = w
 */

static struct cudaExtent __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__make_cudaExtent(size_t __pyx_v_w, size_t __pyx_v_h, size_t __pyx_v_d) {
  struct cudaExtent __pyx_v_e;
  struct cudaExtent __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_make_cudaExtent", __pyx_f[0], 1336, 1, __PYX_ERR(0, 1336, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1338
 * cdef cudaExtent _make_cudaExtent(size_t w, size_t h, size_t d) noexcept nogil:
 *     cdef cudaExtent e
 *     e.width  = w             # <<<<<<<<<<<<<<
 *     e.height = h
 *     e.depth  = d
 */
  __pyx_v_e.width = __pyx_v_w;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1339
 *     cdef cudaExtent e
 *     e.width  = w
 *     e.height = h             # <<<<<<<<<<<<<<
 *     e.depth  = d
 *     return e
 */
  __pyx_v_e.height = __pyx_v_h;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1340
 *     e.width  = w
 *     e.height = h
 *     e.depth  = d             # <<<<<<<<<<<<<<
 *     return e
 * 
 */
  __pyx_v_e.depth = __pyx_v_d;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1341
 *     e.height = h
 *     e.depth  = d
 *     return e             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_e;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1336
 * 
 * 
 * cdef cudaExtent _make_cudaExtent(size_t w, size_t h, size_t d) noexcept nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaExtent e
 *     e.width  = w
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_WriteUnraisable("cuda.bindings._lib.cyruntime.cyruntime._make_cudaExtent", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1344
 * 
 * 
 * cdef cudaError_t _cudaSetDeviceFlags(unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     flags &= ~cudaDeviceMapHost
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaSetDeviceFlags(unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  unsigned int __pyx_v_scheduleFlags;
  CUcontext __pyx_v_context;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_device;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  int __pyx_t_3;
  CUresult __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaSetDeviceFlags", __pyx_f[0], 1344, 1, __PYX_ERR(0, 1344, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1345
 * 
 * cdef cudaError_t _cudaSetDeviceFlags(unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     flags &= ~cudaDeviceMapHost
 *     if flags & ~cudaDeviceMask:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1346
 * cdef cudaError_t _cudaSetDeviceFlags(unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     flags &= ~cudaDeviceMapHost             # <<<<<<<<<<<<<<
 *     if flags & ~cudaDeviceMask:
 *         _setLastError(cudaErrorInvalidValue)
 */
  __pyx_v_flags = (__pyx_v_flags & (~__pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceMapHost));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1347
 *     cdef cudaError_t err = cudaSuccess
 *     flags &= ~cudaDeviceMapHost
 *     if flags & ~cudaDeviceMask:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = ((__pyx_v_flags & (~__pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceMask)) != 0);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1348
 *     flags &= ~cudaDeviceMapHost
 *     if flags & ~cudaDeviceMask:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 *     cdef unsigned int scheduleFlags = flags & cudaDeviceScheduleMask
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1348, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1349
 *     if flags & ~cudaDeviceMask:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *     cdef unsigned int scheduleFlags = flags & cudaDeviceScheduleMask
 *     if scheduleFlags and (scheduleFlags != cudaDeviceScheduleSpin and
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1347
 *     cdef cudaError_t err = cudaSuccess
 *     flags &= ~cudaDeviceMapHost
 *     if flags & ~cudaDeviceMask:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1350
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 *     cdef unsigned int scheduleFlags = flags & cudaDeviceScheduleMask             # <<<<<<<<<<<<<<
 *     if scheduleFlags and (scheduleFlags != cudaDeviceScheduleSpin and
 *                           scheduleFlags != cudaDeviceScheduleYield and
 */
  __pyx_v_scheduleFlags = (__pyx_v_flags & __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleMask);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1351
 *         return cudaErrorInvalidValue
 *     cdef unsigned int scheduleFlags = flags & cudaDeviceScheduleMask
 *     if scheduleFlags and (scheduleFlags != cudaDeviceScheduleSpin and             # <<<<<<<<<<<<<<
 *                           scheduleFlags != cudaDeviceScheduleYield and
 *                           scheduleFlags != cudaDeviceScheduleBlockingSync):
 */
  __pyx_t_3 = (__pyx_v_scheduleFlags != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1353
 *     if scheduleFlags and (scheduleFlags != cudaDeviceScheduleSpin and
 *                           scheduleFlags != cudaDeviceScheduleYield and
 *                           scheduleFlags != cudaDeviceScheduleBlockingSync):             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  switch (__pyx_v_scheduleFlags) {
    case __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleSpin:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1351
 *         return cudaErrorInvalidValue
 *     cdef unsigned int scheduleFlags = flags & cudaDeviceScheduleMask
 *     if scheduleFlags and (scheduleFlags != cudaDeviceScheduleSpin and             # <<<<<<<<<<<<<<
 *                           scheduleFlags != cudaDeviceScheduleYield and
 *                           scheduleFlags != cudaDeviceScheduleBlockingSync):
 */
    case __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleYield:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1352
 *     cdef unsigned int scheduleFlags = flags & cudaDeviceScheduleMask
 *     if scheduleFlags and (scheduleFlags != cudaDeviceScheduleSpin and
 *                           scheduleFlags != cudaDeviceScheduleYield and             # <<<<<<<<<<<<<<
 *                           scheduleFlags != cudaDeviceScheduleBlockingSync):
 *         _setLastError(cudaErrorInvalidValue)
 */
    case __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleBlockingSync:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1351
 *         return cudaErrorInvalidValue
 *     cdef unsigned int scheduleFlags = flags & cudaDeviceScheduleMask
 *     if scheduleFlags and (scheduleFlags != cudaDeviceScheduleSpin and             # <<<<<<<<<<<<<<
 *                           scheduleFlags != cudaDeviceScheduleYield and
 *                           scheduleFlags != cudaDeviceScheduleBlockingSync):
 */
    __pyx_t_3 = 0;
    break;
    default:
    __pyx_t_3 = 1;
    break;
  }
  __pyx_t_1 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1354
 *                           scheduleFlags != cudaDeviceScheduleYield and
 *                           scheduleFlags != cudaDeviceScheduleBlockingSync):
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 *     err = m_global.lazyInitContextState()
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1354, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1355
 *                           scheduleFlags != cudaDeviceScheduleBlockingSync):
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1351
 *         return cudaErrorInvalidValue
 *     cdef unsigned int scheduleFlags = flags & cudaDeviceScheduleMask
 *     if scheduleFlags and (scheduleFlags != cudaDeviceScheduleSpin and             # <<<<<<<<<<<<<<
 *                           scheduleFlags != cudaDeviceScheduleYield and
 *                           scheduleFlags != cudaDeviceScheduleBlockingSync):
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1356
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1356, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1357
 *         return cudaErrorInvalidValue
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1358
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     cdef cydriver.CUcontext context
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1357
 *         return cudaErrorInvalidValue
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1361
 * 
 *     cdef cydriver.CUcontext context
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_4 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_context)); if (unlikely(__pyx_t_4 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1361, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_4);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1362
 *     cdef cydriver.CUcontext context
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1363
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1363, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1364
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     cdef cudaPythonDevice* device
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1362
 *     cdef cydriver.CUcontext context
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1367
 * 
 *     cdef cudaPythonDevice* device
 *     device = m_global.getDeviceFromPrimaryCtx(context)             # <<<<<<<<<<<<<<
 *     if device == NULL:
 *         # We don't know if context provided is primary or not
 */
  __pyx_v_device = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDeviceFromPrimaryCtx(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_context);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1368
 *     cdef cudaPythonDevice* device
 *     device = m_global.getDeviceFromPrimaryCtx(context)
 *     if device == NULL:             # <<<<<<<<<<<<<<
 *         # We don't know if context provided is primary or not
 *         # cudaSetDevice may need to be called before retrying call
 */
  __pyx_t_1 = (__pyx_v_device == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1371
 *         # We don't know if context provided is primary or not
 *         # cudaSetDevice may need to be called before retrying call
 *         return cudaErrorIncompatibleDriverContext             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuDevicePrimaryCtxSetFlags_v2(device[0].driverDevice, flags)
 */
    __pyx_r = cudaErrorIncompatibleDriverContext;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1368
 *     cdef cudaPythonDevice* device
 *     device = m_global.getDeviceFromPrimaryCtx(context)
 *     if device == NULL:             # <<<<<<<<<<<<<<
 *         # We don't know if context provided is primary or not
 *         # cudaSetDevice may need to be called before retrying call
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1373
 *         return cudaErrorIncompatibleDriverContext
 * 
 *     err = <cudaError_t>cydriver._cuDevicePrimaryCtxSetFlags_v2(device[0].driverDevice, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_4 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDevicePrimaryCtxSetFlags_v2((__pyx_v_device[0]).driverDevice, __pyx_v_flags); if (unlikely(__pyx_t_4 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1373, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_4);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1374
 * 
 *     err = <cudaError_t>cydriver._cuDevicePrimaryCtxSetFlags_v2(device[0].driverDevice, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1375
 *     err = <cudaError_t>cydriver._cuDevicePrimaryCtxSetFlags_v2(device[0].driverDevice, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1375, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1374
 * 
 *     err = <cudaError_t>cydriver._cuDevicePrimaryCtxSetFlags_v2(device[0].driverDevice, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1376
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1344
 * 
 * 
 * cdef cudaError_t _cudaSetDeviceFlags(unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     flags &= ~cudaDeviceMapHost
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaSetDeviceFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1379
 * 
 * 
 * cdef cudaError_t _cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     if nodeParams == NULL:
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddMemAllocNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaMemAllocNodeParams *__pyx_v_nodeParams) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddMemAllocNode", __pyx_f[0], 1379, 1, __PYX_ERR(0, 1379, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1380
 * 
 * cdef cudaError_t _cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1381
 * cdef cudaError_t _cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     if nodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_nodeParams == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1382
 *     cdef cudaError_t err = cudaSuccess
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1382, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1383
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1381
 * cdef cudaError_t _cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     if nodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1385
 *         return cudaErrorInvalidValue
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1385, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1386
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>nodeParams)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1387
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1386
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>nodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1388
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemAllocNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, ((CUDA_MEM_ALLOC_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1388, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1389
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1390
 *     err = <cudaError_t>cydriver._cuGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1390, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1389
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddMemAllocNode(pGraphNode, graph, pDependencies, numDependencies, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1391
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1379
 * 
 * 
 * cdef cudaError_t _cudaGraphAddMemAllocNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     if nodeParams == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddMemAllocNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1394
 * 
 * 
 * cdef cudaError_t _cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     if params_out == NULL:
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemAllocNodeGetParams(cudaGraphNode_t __pyx_v_node, struct cudaMemAllocNodeParams *__pyx_v_params_out) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphMemAllocNodeGetParams", __pyx_f[0], 1394, 1, __PYX_ERR(0, 1394, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1395
 * 
 * cdef cudaError_t _cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     if params_out == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1396
 * cdef cudaError_t _cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     if params_out == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_params_out == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1397
 *     cdef cudaError_t err = cudaSuccess
 *     if params_out == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1397, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1398
 *     if params_out == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1396
 * cdef cudaError_t _cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     if params_out == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1400
 *         return cudaErrorInvalidValue
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1400, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1401
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemAllocNodeGetParams(node, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>params_out)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1402
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphMemAllocNodeGetParams(node, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>params_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1401
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemAllocNodeGetParams(node, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>params_out)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1403
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemAllocNodeGetParams(node, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>params_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemAllocNodeGetParams(__pyx_v_node, ((CUDA_MEM_ALLOC_NODE_PARAMS *)__pyx_v_params_out)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1403, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1404
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemAllocNodeGetParams(node, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>params_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1405
 *     err = <cudaError_t>cydriver._cuGraphMemAllocNodeGetParams(node, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>params_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1405, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1404
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemAllocNodeGetParams(node, <cydriver.CUDA_MEM_ALLOC_NODE_PARAMS *>params_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1406
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1394
 * 
 * 
 * cdef cudaError_t _cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     if params_out == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphMemAllocNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1409
 * 
 * 
 * cdef cudaError_t _cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     if dptr_out == NULL:
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemFreeNodeGetParams(cudaGraphNode_t __pyx_v_node, void *__pyx_v_dptr_out) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphMemFreeNodeGetParams", __pyx_f[0], 1409, 1, __PYX_ERR(0, 1409, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1410
 * 
 * cdef cudaError_t _cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     if dptr_out == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1411
 * cdef cudaError_t _cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     if dptr_out == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_dptr_out == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1412
 *     cdef cudaError_t err = cudaSuccess
 *     if dptr_out == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1412, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1413
 *     if dptr_out == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1411
 * cdef cudaError_t _cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     if dptr_out == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1415
 *         return cudaErrorInvalidValue
 * 
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1415, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1416
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemFreeNodeGetParams(node, <cydriver.CUdeviceptr *>dptr_out)
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1417
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphMemFreeNodeGetParams(node, <cydriver.CUdeviceptr *>dptr_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1416
 * 
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemFreeNodeGetParams(node, <cydriver.CUdeviceptr *>dptr_out)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1418
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemFreeNodeGetParams(node, <cydriver.CUdeviceptr *>dptr_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemFreeNodeGetParams(__pyx_v_node, ((CUdeviceptr *)__pyx_v_dptr_out)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1418, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1419
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemFreeNodeGetParams(node, <cydriver.CUdeviceptr *>dptr_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1420
 *     err = <cudaError_t>cydriver._cuGraphMemFreeNodeGetParams(node, <cydriver.CUdeviceptr *>dptr_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1420, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1419
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemFreeNodeGetParams(node, <cydriver.CUdeviceptr *>dptr_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1421
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1409
 * 
 * 
 * cdef cudaError_t _cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void* dptr_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     if dptr_out == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphMemFreeNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1424
 * 
 * 
 * cdef cudaError_t _cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemAdvise(void const *__pyx_v_devPtr, size_t __pyx_v_count, enum cudaMemoryAdvise __pyx_v_advice, int __pyx_v_device) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemAdvise", __pyx_f[0], 1424, 1, __PYX_ERR(0, 1424, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1425
 * 
 * cdef cudaError_t _cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1426
 * cdef cudaError_t _cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1426, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1427
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAdvise(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, <cydriver.CUdevice>device)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1428
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemAdvise(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1427
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAdvise(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, <cydriver.CUdevice>device)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1429
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAdvise(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, <cydriver.CUdevice>device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAdvise(((CUdeviceptr)__pyx_v_devPtr), __pyx_v_count, ((CUmem_advise)__pyx_v_advice), ((CUdevice)__pyx_v_device)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1429, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1430
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAdvise(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1431
 *     err = <cudaError_t>cydriver._cuMemAdvise(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1431, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1430
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAdvise(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1432
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1424
 * 
 * 
 * cdef cudaError_t _cudaMemAdvise(const void* devPtr, size_t count, cudaMemoryAdvise advice, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemAdvise", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1435
 * 
 * 
 * cdef cudaError_t _cudaMemAdvise_v2(const void* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUmemLocation _driver_location
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemAdvise_v2(void const *__pyx_v_devPtr, size_t __pyx_v_count, enum cudaMemoryAdvise __pyx_v_advice, struct cudaMemLocation __pyx_v_location) {
  cudaError_t __pyx_v_err;
  CUmemLocation __pyx_v__driver_location;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  int __pyx_t_3;
  CUresult __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemAdvise_v2", __pyx_f[0], 1435, 1, __PYX_ERR(0, 1435, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1436
 * 
 * cdef cudaError_t _cudaMemAdvise_v2(const void* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUmemLocation _driver_location
 *     _driver_location.type = <cydriver.CUmemLocationType>location.type
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1438
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUmemLocation _driver_location
 *     _driver_location.type = <cydriver.CUmemLocationType>location.type             # <<<<<<<<<<<<<<
 *     _driver_location.id = location.id
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v__driver_location.type = ((CUmemLocationType)__pyx_v_location.type);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1439
 *     cdef cydriver.CUmemLocation _driver_location
 *     _driver_location.type = <cydriver.CUmemLocationType>location.type
 *     _driver_location.id = location.id             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_t_1 = __pyx_v_location.id;
  __pyx_v__driver_location.id = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1440
 *     _driver_location.type = <cydriver.CUmemLocationType>location.type
 *     _driver_location.id = location.id
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1440, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1441
 *     _driver_location.id = location.id
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAdvise_v2(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, _driver_location)
 */
  __pyx_t_3 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_3) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1442
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemAdvise_v2(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, _driver_location)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1441
 *     _driver_location.id = location.id
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAdvise_v2(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, _driver_location)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1443
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAdvise_v2(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, _driver_location)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_4 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAdvise_v2(((CUdeviceptr)__pyx_v_devPtr), __pyx_v_count, ((CUmem_advise)__pyx_v_advice), __pyx_v__driver_location); if (unlikely(__pyx_t_4 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1443, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_4);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1444
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAdvise_v2(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, _driver_location)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_3 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_3) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1445
 *     err = <cudaError_t>cydriver._cuMemAdvise_v2(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, _driver_location)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1445, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1444
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAdvise_v2(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUmem_advise>advice, _driver_location)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1446
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1435
 * 
 * 
 * cdef cudaError_t _cudaMemAdvise_v2(const void* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUmemLocation _driver_location
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemAdvise_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1449
 * 
 * 
 * cdef cudaError_t _cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttribute(data, dataSize, <cydriver.CUmem_range_attribute>attribute, <cydriver.CUdeviceptr>devPtr, count)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemRangeGetAttribute(void *__pyx_v_data, size_t __pyx_v_dataSize, enum cudaMemRangeAttribute __pyx_v_attribute, void const *__pyx_v_devPtr, size_t __pyx_v_count) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  CUresult __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemRangeGetAttribute", __pyx_f[0], 1449, 1, __PYX_ERR(0, 1449, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1450
 * 
 * cdef cudaError_t _cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttribute(data, dataSize, <cydriver.CUmem_range_attribute>attribute, <cydriver.CUdeviceptr>devPtr, count)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1451
 * cdef cudaError_t _cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttribute(data, dataSize, <cydriver.CUmem_range_attribute>attribute, <cydriver.CUdeviceptr>devPtr, count)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemRangeGetAttribute(__pyx_v_data, __pyx_v_dataSize, ((CUmem_range_attribute)__pyx_v_attribute), ((CUdeviceptr)__pyx_v_devPtr), __pyx_v_count); if (unlikely(__pyx_t_1 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1451, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_1);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1452
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttribute(data, dataSize, <cydriver.CUmem_range_attribute>attribute, <cydriver.CUdeviceptr>devPtr, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1453
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttribute(data, dataSize, <cydriver.CUmem_range_attribute>attribute, <cydriver.CUdeviceptr>devPtr, count)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1453, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1452
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttribute(data, dataSize, <cydriver.CUmem_range_attribute>attribute, <cydriver.CUdeviceptr>devPtr, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1454
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1449
 * 
 * 
 * cdef cudaError_t _cudaMemRangeGetAttribute(void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttribute(data, dataSize, <cydriver.CUmem_range_attribute>attribute, <cydriver.CUdeviceptr>devPtr, count)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemRangeGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1457
 * 
 * 
 * cdef cudaError_t _cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttributes(data, dataSizes, <cydriver.CUmem_range_attribute*>attributes, numAttributes, <cydriver.CUdeviceptr>devPtr, count)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemRangeGetAttributes(void **__pyx_v_data, size_t *__pyx_v_dataSizes, enum cudaMemRangeAttribute *__pyx_v_attributes, size_t __pyx_v_numAttributes, void const *__pyx_v_devPtr, size_t __pyx_v_count) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  CUresult __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemRangeGetAttributes", __pyx_f[0], 1457, 1, __PYX_ERR(0, 1457, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1458
 * 
 * cdef cudaError_t _cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttributes(data, dataSizes, <cydriver.CUmem_range_attribute*>attributes, numAttributes, <cydriver.CUdeviceptr>devPtr, count)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1459
 * cdef cudaError_t _cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttributes(data, dataSizes, <cydriver.CUmem_range_attribute*>attributes, numAttributes, <cydriver.CUdeviceptr>devPtr, count)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemRangeGetAttributes(__pyx_v_data, __pyx_v_dataSizes, ((CUmem_range_attribute *)__pyx_v_attributes), __pyx_v_numAttributes, ((CUdeviceptr)__pyx_v_devPtr), __pyx_v_count); if (unlikely(__pyx_t_1 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1459, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_1);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1460
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttributes(data, dataSizes, <cydriver.CUmem_range_attribute*>attributes, numAttributes, <cydriver.CUdeviceptr>devPtr, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1461
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttributes(data, dataSizes, <cydriver.CUmem_range_attribute*>attributes, numAttributes, <cydriver.CUdeviceptr>devPtr, count)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1461, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1460
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttributes(data, dataSizes, <cydriver.CUmem_range_attribute*>attributes, numAttributes, <cydriver.CUdeviceptr>devPtr, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1462
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1457
 * 
 * 
 * cdef cudaError_t _cudaMemRangeGetAttributes(void** data, size_t* dataSizes, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuMemRangeGetAttributes(data, dataSizes, <cydriver.CUmem_range_attribute*>attributes, numAttributes, <cydriver.CUdeviceptr>devPtr, count)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemRangeGetAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1465
 * 
 * 
 * cdef cudaError_t _cudaGetDeviceCount(int* count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDeviceCount(int *__pyx_v_count) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetDeviceCount", __pyx_f[0], 1465, 1, __PYX_ERR(0, 1465, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1466
 * 
 * cdef cudaError_t _cudaGetDeviceCount(int* count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1467
 * cdef cudaError_t _cudaGetDeviceCount(int* count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1467, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1468
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     count[0] = m_global._numDevices
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1469
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     count[0] = m_global._numDevices
 *     return cudaSuccess
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1468
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     count[0] = m_global._numDevices
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1470
 *     if err != cudaSuccess:
 *         return err
 *     count[0] = m_global._numDevices             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
  __pyx_t_3 = __pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->_numDevices;
  (__pyx_v_count[0]) = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1471
 *         return err
 *     count[0] = m_global._numDevices
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1465
 * 
 * 
 * cdef cudaError_t _cudaGetDeviceCount(int* count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetDeviceCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1474
 * 
 * 
 * cdef cudaError_t _cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(value, <cydriver.CUdevice_attribute>attr, <cydriver.CUdevice>device)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetAttribute(int *__pyx_v_value, enum cudaDeviceAttr __pyx_v_attr, int __pyx_v_device) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  CUresult __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetAttribute", __pyx_f[0], 1474, 1, __PYX_ERR(0, 1474, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1475
 * 
 * cdef cudaError_t _cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(value, <cydriver.CUdevice_attribute>attr, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1476
 * cdef cudaError_t _cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(value, <cydriver.CUdevice_attribute>attr, <cydriver.CUdevice>device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetAttribute(__pyx_v_value, ((CUdevice_attribute)__pyx_v_attr), ((CUdevice)__pyx_v_device)); if (unlikely(__pyx_t_1 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1476, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_1);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1477
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(value, <cydriver.CUdevice_attribute>attr, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1478
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(value, <cydriver.CUdevice_attribute>attr, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1478, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1477
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(value, <cydriver.CUdevice_attribute>attr, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1479
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1474
 * 
 * 
 * cdef cudaError_t _cudaDeviceGetAttribute(int* value, cudaDeviceAttr attr, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetAttribute(value, <cydriver.CUdevice_attribute>attr, <cydriver.CUdevice>device)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1482
 * 
 * 
 * cdef cudaError_t _cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig __pyx_v_config) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceSetSharedMemConfig", __pyx_f[0], 1482, 1, __PYX_ERR(0, 1482, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1483
 * 
 * cdef cudaError_t _cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1484
 * cdef cudaError_t _cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1484, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1485
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetSharedMemConfig(<cydriver.CUsharedconfig>config)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1486
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxSetSharedMemConfig(<cydriver.CUsharedconfig>config)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1485
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetSharedMemConfig(<cydriver.CUsharedconfig>config)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1487
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetSharedMemConfig(<cydriver.CUsharedconfig>config)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetSharedMemConfig(((CUsharedconfig)__pyx_v_config)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1487, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1488
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetSharedMemConfig(<cydriver.CUsharedconfig>config)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1489
 *     err = <cudaError_t>cydriver._cuCtxSetSharedMemConfig(<cydriver.CUsharedconfig>config)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1489, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1488
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetSharedMemConfig(<cydriver.CUsharedconfig>config)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1490
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1482
 * 
 * 
 * cdef cudaError_t _cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceSetSharedMemConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1493
 * 
 * 
 * cdef cudaError_t _cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetByPCIBusId(<cydriver.CUdevice*>device, pciBusId)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetByPCIBusId(int *__pyx_v_device, char const *__pyx_v_pciBusId) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  CUresult __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetByPCIBusId", __pyx_f[0], 1493, 1, __PYX_ERR(0, 1493, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1494
 * 
 * cdef cudaError_t _cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceGetByPCIBusId(<cydriver.CUdevice*>device, pciBusId)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1495
 * cdef cudaError_t _cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetByPCIBusId(<cydriver.CUdevice*>device, pciBusId)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetByPCIBusId(((CUdevice *)__pyx_v_device), __pyx_v_pciBusId); if (unlikely(__pyx_t_1 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1495, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_1);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1496
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetByPCIBusId(<cydriver.CUdevice*>device, pciBusId)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1497
 *     err = <cudaError_t>cydriver._cuDeviceGetByPCIBusId(<cydriver.CUdevice*>device, pciBusId)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1497, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1496
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetByPCIBusId(<cydriver.CUdevice*>device, pciBusId)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1498
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1493
 * 
 * 
 * cdef cudaError_t _cudaDeviceGetByPCIBusId(int* device, const char* pciBusId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetByPCIBusId(<cydriver.CUdevice*>device, pciBusId)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetByPCIBusId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1501
 * 
 * 
 * cdef cudaError_t _cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetPCIBusId(pciBusId, length, <cydriver.CUdevice>device)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetPCIBusId(char *__pyx_v_pciBusId, int __pyx_v_length, int __pyx_v_device) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  CUresult __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetPCIBusId", __pyx_f[0], 1501, 1, __PYX_ERR(0, 1501, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1502
 * 
 * cdef cudaError_t _cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceGetPCIBusId(pciBusId, length, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1503
 * cdef cudaError_t _cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetPCIBusId(pciBusId, length, <cydriver.CUdevice>device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetPCIBusId(__pyx_v_pciBusId, __pyx_v_length, ((CUdevice)__pyx_v_device)); if (unlikely(__pyx_t_1 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1503, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_1);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1504
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetPCIBusId(pciBusId, length, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1505
 *     err = <cudaError_t>cydriver._cuDeviceGetPCIBusId(pciBusId, length, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1505, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1504
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetPCIBusId(pciBusId, length, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1506
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1501
 * 
 * 
 * cdef cudaError_t _cudaDeviceGetPCIBusId(char* pciBusId, int length, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetPCIBusId(pciBusId, length, <cydriver.CUdevice>device)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetPCIBusId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1509
 * 
 * 
 * cdef cudaError_t _cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetP2PAttribute(value, <cydriver.CUdevice_P2PAttribute>attr, <cydriver.CUdevice>srcDevice, <cydriver.CUdevice>dstDevice)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetP2PAttribute(int *__pyx_v_value, enum cudaDeviceP2PAttr __pyx_v_attr, int __pyx_v_srcDevice, int __pyx_v_dstDevice) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  CUresult __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetP2PAttribute", __pyx_f[0], 1509, 1, __PYX_ERR(0, 1509, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1510
 * 
 * cdef cudaError_t _cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceGetP2PAttribute(value, <cydriver.CUdevice_P2PAttribute>attr, <cydriver.CUdevice>srcDevice, <cydriver.CUdevice>dstDevice)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1511
 * cdef cudaError_t _cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetP2PAttribute(value, <cydriver.CUdevice_P2PAttribute>attr, <cydriver.CUdevice>srcDevice, <cydriver.CUdevice>dstDevice)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetP2PAttribute(__pyx_v_value, ((CUdevice_P2PAttribute)__pyx_v_attr), ((CUdevice)__pyx_v_srcDevice), ((CUdevice)__pyx_v_dstDevice)); if (unlikely(__pyx_t_1 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1511, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_1);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1512
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetP2PAttribute(value, <cydriver.CUdevice_P2PAttribute>attr, <cydriver.CUdevice>srcDevice, <cydriver.CUdevice>dstDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1513
 *     err = <cudaError_t>cydriver._cuDeviceGetP2PAttribute(value, <cydriver.CUdevice_P2PAttribute>attr, <cydriver.CUdevice>srcDevice, <cydriver.CUdevice>dstDevice)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1513, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1512
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetP2PAttribute(value, <cydriver.CUdevice_P2PAttribute>attr, <cydriver.CUdevice>srcDevice, <cydriver.CUdevice>dstDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1514
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1509
 * 
 * 
 * cdef cudaError_t _cudaDeviceGetP2PAttribute(int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuDeviceGetP2PAttribute(value, <cydriver.CUdevice_P2PAttribute>attr, <cydriver.CUdevice>srcDevice, <cydriver.CUdevice>dstDevice)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetP2PAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1517
 * 
 * 
 * cdef cudaError_t _cudaArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaArrayGetSparseProperties(struct cudaArraySparseProperties *__pyx_v_sparseProperties, cudaArray_t __pyx_v_array) {
  cudaError_t __pyx_v_err;
  CUDA_ARRAY_SPARSE_PROPERTIES __pyx_v__driver_sparseProperties;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  unsigned int __pyx_t_4;
  unsigned PY_LONG_LONG __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaArrayGetSparseProperties", __pyx_f[0], 1517, 1, __PYX_ERR(0, 1517, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1518
 * 
 * cdef cudaError_t _cudaArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 *     if not sparseProperties:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1520
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 *     if not sparseProperties:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaError.cudaErrorInvalidValue
 */
  __pyx_t_1 = (!(__pyx_v_sparseProperties != 0));
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1521
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 *     if not sparseProperties:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaError.cudaErrorInvalidValue
 *     memset(sparseProperties, 0, sizeof(cudaArraySparseProperties))
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1521, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1522
 *     if not sparseProperties:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaError.cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *     memset(sparseProperties, 0, sizeof(cudaArraySparseProperties))
 * 
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1520
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 *     if not sparseProperties:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaError.cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1523
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaError.cudaErrorInvalidValue
 *     memset(sparseProperties, 0, sizeof(cudaArraySparseProperties))             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuArrayGetSparseProperties(&_driver_sparseProperties, <cydriver.CUarray>array)
 */
  (void)(memset(__pyx_v_sparseProperties, 0, (sizeof(struct cudaArraySparseProperties))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1525
 *     memset(sparseProperties, 0, sizeof(cudaArraySparseProperties))
 * 
 *     err = <cudaError_t>cydriver._cuArrayGetSparseProperties(&_driver_sparseProperties, <cydriver.CUarray>array)             # <<<<<<<<<<<<<<
 *     if err == cudaSuccess:
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayGetSparseProperties((&__pyx_v__driver_sparseProperties), ((CUarray)__pyx_v_array)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1525, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1526
 * 
 *     err = <cudaError_t>cydriver._cuArrayGetSparseProperties(&_driver_sparseProperties, <cydriver.CUarray>array)
 *     if err == cudaSuccess:             # <<<<<<<<<<<<<<
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize
 */
  __pyx_t_1 = (__pyx_v_err == cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1527
 *     err = <cudaError_t>cydriver._cuArrayGetSparseProperties(&_driver_sparseProperties, <cydriver.CUarray>array)
 *     if err == cudaSuccess:
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel             # <<<<<<<<<<<<<<
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize
 *         sparseProperties[0].flags             = _driver_sparseProperties.flags
 */
    __pyx_t_4 = __pyx_v__driver_sparseProperties.miptailFirstLevel;
    (__pyx_v_sparseProperties[0]).miptailFirstLevel = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1528
 *     if err == cudaSuccess:
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize             # <<<<<<<<<<<<<<
 *         sparseProperties[0].flags             = _driver_sparseProperties.flags
 *         sparseProperties[0].tileExtent.width  = _driver_sparseProperties.tileExtent.width
 */
    __pyx_t_5 = __pyx_v__driver_sparseProperties.miptailSize;
    (__pyx_v_sparseProperties[0]).miptailSize = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1529
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize
 *         sparseProperties[0].flags             = _driver_sparseProperties.flags             # <<<<<<<<<<<<<<
 *         sparseProperties[0].tileExtent.width  = _driver_sparseProperties.tileExtent.width
 *         sparseProperties[0].tileExtent.height = _driver_sparseProperties.tileExtent.height
 */
    __pyx_t_4 = __pyx_v__driver_sparseProperties.flags;
    (__pyx_v_sparseProperties[0]).flags = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1530
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize
 *         sparseProperties[0].flags             = _driver_sparseProperties.flags
 *         sparseProperties[0].tileExtent.width  = _driver_sparseProperties.tileExtent.width             # <<<<<<<<<<<<<<
 *         sparseProperties[0].tileExtent.height = _driver_sparseProperties.tileExtent.height
 *         sparseProperties[0].tileExtent.depth  = _driver_sparseProperties.tileExtent.depth
 */
    __pyx_t_4 = __pyx_v__driver_sparseProperties.tileExtent.width;
    (__pyx_v_sparseProperties[0]).tileExtent.width = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1531
 *         sparseProperties[0].flags             = _driver_sparseProperties.flags
 *         sparseProperties[0].tileExtent.width  = _driver_sparseProperties.tileExtent.width
 *         sparseProperties[0].tileExtent.height = _driver_sparseProperties.tileExtent.height             # <<<<<<<<<<<<<<
 *         sparseProperties[0].tileExtent.depth  = _driver_sparseProperties.tileExtent.depth
 * 
 */
    __pyx_t_4 = __pyx_v__driver_sparseProperties.tileExtent.height;
    (__pyx_v_sparseProperties[0]).tileExtent.height = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1532
 *         sparseProperties[0].tileExtent.width  = _driver_sparseProperties.tileExtent.width
 *         sparseProperties[0].tileExtent.height = _driver_sparseProperties.tileExtent.height
 *         sparseProperties[0].tileExtent.depth  = _driver_sparseProperties.tileExtent.depth             # <<<<<<<<<<<<<<
 * 
 *     if err != cudaSuccess:
 */
    __pyx_t_4 = __pyx_v__driver_sparseProperties.tileExtent.depth;
    (__pyx_v_sparseProperties[0]).tileExtent.depth = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1526
 * 
 *     err = <cudaError_t>cydriver._cuArrayGetSparseProperties(&_driver_sparseProperties, <cydriver.CUarray>array)
 *     if err == cudaSuccess:             # <<<<<<<<<<<<<<
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1534
 *         sparseProperties[0].tileExtent.depth  = _driver_sparseProperties.tileExtent.depth
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1535
 * 
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1535, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1534
 *         sparseProperties[0].tileExtent.depth  = _driver_sparseProperties.tileExtent.depth
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1536
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1517
 * 
 * 
 * cdef cudaError_t _cudaArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaArrayGetSparseProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1539
 * 
 * 
 * cdef cudaError_t _cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMipmappedArrayGetSparseProperties(struct cudaArraySparseProperties *__pyx_v_sparseProperties, cudaMipmappedArray_t __pyx_v_mipmap) {
  cudaError_t __pyx_v_err;
  CUDA_ARRAY_SPARSE_PROPERTIES __pyx_v__driver_sparseProperties;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  unsigned int __pyx_t_4;
  unsigned PY_LONG_LONG __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMipmappedArrayGetSparseProperties", __pyx_f[0], 1539, 1, __PYX_ERR(0, 1539, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1540
 * 
 * cdef cudaError_t _cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 *     if not sparseProperties:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1542
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 *     if not sparseProperties:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaError.cudaErrorInvalidValue
 */
  __pyx_t_1 = (!(__pyx_v_sparseProperties != 0));
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1543
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 *     if not sparseProperties:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaError.cudaErrorInvalidValue
 *     memset(sparseProperties, 0, sizeof(cudaArraySparseProperties))
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1543, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1544
 *     if not sparseProperties:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaError.cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *     memset(sparseProperties, 0, sizeof(cudaArraySparseProperties))
 * 
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1542
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 *     if not sparseProperties:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaError.cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1545
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaError.cudaErrorInvalidValue
 *     memset(sparseProperties, 0, sizeof(cudaArraySparseProperties))             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetSparseProperties(&_driver_sparseProperties, <cydriver.CUmipmappedArray>mipmap)
 */
  (void)(memset(__pyx_v_sparseProperties, 0, (sizeof(struct cudaArraySparseProperties))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1547
 *     memset(sparseProperties, 0, sizeof(cudaArraySparseProperties))
 * 
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetSparseProperties(&_driver_sparseProperties, <cydriver.CUmipmappedArray>mipmap)             # <<<<<<<<<<<<<<
 *     if err == cudaSuccess:
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayGetSparseProperties((&__pyx_v__driver_sparseProperties), ((CUmipmappedArray)__pyx_v_mipmap)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1547, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1548
 * 
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetSparseProperties(&_driver_sparseProperties, <cydriver.CUmipmappedArray>mipmap)
 *     if err == cudaSuccess:             # <<<<<<<<<<<<<<
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize
 */
  __pyx_t_1 = (__pyx_v_err == cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1549
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetSparseProperties(&_driver_sparseProperties, <cydriver.CUmipmappedArray>mipmap)
 *     if err == cudaSuccess:
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel             # <<<<<<<<<<<<<<
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize
 *         sparseProperties[0].flags             = _driver_sparseProperties.flags
 */
    __pyx_t_4 = __pyx_v__driver_sparseProperties.miptailFirstLevel;
    (__pyx_v_sparseProperties[0]).miptailFirstLevel = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1550
 *     if err == cudaSuccess:
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize             # <<<<<<<<<<<<<<
 *         sparseProperties[0].flags             = _driver_sparseProperties.flags
 *         sparseProperties[0].tileExtent.width  = _driver_sparseProperties.tileExtent.width
 */
    __pyx_t_5 = __pyx_v__driver_sparseProperties.miptailSize;
    (__pyx_v_sparseProperties[0]).miptailSize = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1551
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize
 *         sparseProperties[0].flags             = _driver_sparseProperties.flags             # <<<<<<<<<<<<<<
 *         sparseProperties[0].tileExtent.width  = _driver_sparseProperties.tileExtent.width
 *         sparseProperties[0].tileExtent.height = _driver_sparseProperties.tileExtent.height
 */
    __pyx_t_4 = __pyx_v__driver_sparseProperties.flags;
    (__pyx_v_sparseProperties[0]).flags = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1552
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize
 *         sparseProperties[0].flags             = _driver_sparseProperties.flags
 *         sparseProperties[0].tileExtent.width  = _driver_sparseProperties.tileExtent.width             # <<<<<<<<<<<<<<
 *         sparseProperties[0].tileExtent.height = _driver_sparseProperties.tileExtent.height
 *         sparseProperties[0].tileExtent.depth  = _driver_sparseProperties.tileExtent.depth
 */
    __pyx_t_4 = __pyx_v__driver_sparseProperties.tileExtent.width;
    (__pyx_v_sparseProperties[0]).tileExtent.width = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1553
 *         sparseProperties[0].flags             = _driver_sparseProperties.flags
 *         sparseProperties[0].tileExtent.width  = _driver_sparseProperties.tileExtent.width
 *         sparseProperties[0].tileExtent.height = _driver_sparseProperties.tileExtent.height             # <<<<<<<<<<<<<<
 *         sparseProperties[0].tileExtent.depth  = _driver_sparseProperties.tileExtent.depth
 * 
 */
    __pyx_t_4 = __pyx_v__driver_sparseProperties.tileExtent.height;
    (__pyx_v_sparseProperties[0]).tileExtent.height = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1554
 *         sparseProperties[0].tileExtent.width  = _driver_sparseProperties.tileExtent.width
 *         sparseProperties[0].tileExtent.height = _driver_sparseProperties.tileExtent.height
 *         sparseProperties[0].tileExtent.depth  = _driver_sparseProperties.tileExtent.depth             # <<<<<<<<<<<<<<
 * 
 *     if err != cudaSuccess:
 */
    __pyx_t_4 = __pyx_v__driver_sparseProperties.tileExtent.depth;
    (__pyx_v_sparseProperties[0]).tileExtent.depth = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1548
 * 
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetSparseProperties(&_driver_sparseProperties, <cydriver.CUmipmappedArray>mipmap)
 *     if err == cudaSuccess:             # <<<<<<<<<<<<<<
 *         sparseProperties[0].miptailFirstLevel = _driver_sparseProperties.miptailFirstLevel
 *         sparseProperties[0].miptailSize       = _driver_sparseProperties.miptailSize
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1556
 *         sparseProperties[0].tileExtent.depth  = _driver_sparseProperties.tileExtent.depth
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1557
 * 
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1557, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1556
 *         sparseProperties[0].tileExtent.depth  = _driver_sparseProperties.tileExtent.depth
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1558
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1539
 * 
 * 
 * cdef cudaError_t _cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_SPARSE_PROPERTIES _driver_sparseProperties
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMipmappedArrayGetSparseProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1561
 * 
 * 
 * cdef cudaError_t _cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceCanAccessPeer(int *__pyx_v_canAccessPeer, int __pyx_v_device, int __pyx_v_peerDevice) {
  cudaError_t __pyx_v_err;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_driverDevice;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_driverPeerDevice;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  CUresult __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceCanAccessPeer", __pyx_f[0], 1561, 1, __PYX_ERR(0, 1561, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1562
 * 
 * cdef cudaError_t _cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1563
 * cdef cudaError_t _cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1563, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1564
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cudaPythonDevice *driverDevice
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1565
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cudaPythonDevice *driverDevice
 *     cdef cudaPythonDevice *driverPeerDevice
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1564
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cudaPythonDevice *driverDevice
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1568
 *     cdef cudaPythonDevice *driverDevice
 *     cdef cudaPythonDevice *driverPeerDevice
 *     driverDevice = m_global.getDevice(device)             # <<<<<<<<<<<<<<
 *     driverPeerDevice = m_global.getDevice(peerDevice)
 *     if driverDevice == NULL or driverPeerDevice == NULL:
 */
  __pyx_v_driverDevice = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_device);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1569
 *     cdef cudaPythonDevice *driverPeerDevice
 *     driverDevice = m_global.getDevice(device)
 *     driverPeerDevice = m_global.getDevice(peerDevice)             # <<<<<<<<<<<<<<
 *     if driverDevice == NULL or driverPeerDevice == NULL:
 *         return cudaErrorInvalidDevice
 */
  __pyx_v_driverPeerDevice = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_peerDevice);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1570
 *     driverDevice = m_global.getDevice(device)
 *     driverPeerDevice = m_global.getDevice(peerDevice)
 *     if driverDevice == NULL or driverPeerDevice == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidDevice
 * 
 */
  __pyx_t_3 = (__pyx_v_driverDevice == NULL);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_driverPeerDevice == NULL);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1571
 *     driverPeerDevice = m_global.getDevice(peerDevice)
 *     if driverDevice == NULL or driverPeerDevice == NULL:
 *         return cudaErrorInvalidDevice             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuDeviceCanAccessPeer(canAccessPeer, driverDevice.driverDevice, driverPeerDevice.driverDevice)
 */
    __pyx_r = cudaErrorInvalidDevice;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1570
 *     driverDevice = m_global.getDevice(device)
 *     driverPeerDevice = m_global.getDevice(peerDevice)
 *     if driverDevice == NULL or driverPeerDevice == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidDevice
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1573
 *         return cudaErrorInvalidDevice
 * 
 *     err = <cudaError_t>cydriver._cuDeviceCanAccessPeer(canAccessPeer, driverDevice.driverDevice, driverPeerDevice.driverDevice)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_4 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceCanAccessPeer(__pyx_v_canAccessPeer, __pyx_v_driverDevice->driverDevice, __pyx_v_driverPeerDevice->driverDevice); if (unlikely(__pyx_t_4 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1573, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_4);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1574
 * 
 *     err = <cudaError_t>cydriver._cuDeviceCanAccessPeer(canAccessPeer, driverDevice.driverDevice, driverPeerDevice.driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1575
 *     err = <cudaError_t>cydriver._cuDeviceCanAccessPeer(canAccessPeer, driverDevice.driverDevice, driverPeerDevice.driverDevice)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     if device == peerDevice:
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1575, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1576
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     if device == peerDevice:
 *         canAccessPeer[0] = 0
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1574
 * 
 *     err = <cudaError_t>cydriver._cuDeviceCanAccessPeer(canAccessPeer, driverDevice.driverDevice, driverPeerDevice.driverDevice)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1577
 *         _setLastError(err)
 *         return err
 *     if device == peerDevice:             # <<<<<<<<<<<<<<
 *         canAccessPeer[0] = 0
 *     return err
 */
  __pyx_t_2 = (__pyx_v_device == __pyx_v_peerDevice);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1578
 *         return err
 *     if device == peerDevice:
 *         canAccessPeer[0] = 0             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    (__pyx_v_canAccessPeer[0]) = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1577
 *         _setLastError(err)
 *         return err
 *     if device == peerDevice:             # <<<<<<<<<<<<<<
 *         canAccessPeer[0] = 0
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1579
 *     if device == peerDevice:
 *         canAccessPeer[0] = 0
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1561
 * 
 * 
 * cdef cudaError_t _cudaDeviceCanAccessPeer(int* canAccessPeer, int device, int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitDriver()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceCanAccessPeer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1582
 * 
 * 
 * cdef cudaError_t _cudaMemcpyPeer(void* dst, int dstDevice, const void* src, int srcDevice, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaPythonDevice *device
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyPeer(void *__pyx_v_dst, int __pyx_v_dstDevice, void const *__pyx_v_src, int __pyx_v_srcDevice, size_t __pyx_v_count) {
  cudaError_t __pyx_v_err;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_device;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_peerDevice;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  CUresult __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpyPeer", __pyx_f[0], 1582, 1, __PYX_ERR(0, 1582, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1583
 * 
 * cdef cudaError_t _cudaMemcpyPeer(void* dst, int dstDevice, const void* src, int srcDevice, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cudaPythonDevice *device
 *     cdef cudaPythonDevice *peerDevice
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1586
 *     cdef cudaPythonDevice *device
 *     cdef cudaPythonDevice *peerDevice
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1586, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1587
 *     cdef cudaPythonDevice *peerDevice
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     if count > 0:
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1588
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     if count > 0:
 *         peerDevice = m_global.getDevice(dstDevice)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1587
 *     cdef cudaPythonDevice *peerDevice
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     if count > 0:
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1589
 *     if err != cudaSuccess:
 *         return err
 *     if count > 0:             # <<<<<<<<<<<<<<
 *         peerDevice = m_global.getDevice(dstDevice)
 *         device = m_global.getDevice(srcDevice)
 */
  __pyx_t_2 = (__pyx_v_count > 0);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1590
 *         return err
 *     if count > 0:
 *         peerDevice = m_global.getDevice(dstDevice)             # <<<<<<<<<<<<<<
 *         device = m_global.getDevice(srcDevice)
 *         if device == NULL or peerDevice == NULL:
 */
    __pyx_v_peerDevice = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_dstDevice);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1591
 *     if count > 0:
 *         peerDevice = m_global.getDevice(dstDevice)
 *         device = m_global.getDevice(srcDevice)             # <<<<<<<<<<<<<<
 *         if device == NULL or peerDevice == NULL:
 *             _setLastError(err)
 */
    __pyx_v_device = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_srcDevice);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1592
 *         peerDevice = m_global.getDevice(dstDevice)
 *         device = m_global.getDevice(srcDevice)
 *         if device == NULL or peerDevice == NULL:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return cudaErrorInvalidDevice
 */
    __pyx_t_3 = (__pyx_v_device == NULL);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_peerDevice == NULL);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1593
 *         device = m_global.getDevice(srcDevice)
 *         if device == NULL or peerDevice == NULL:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *             return cudaErrorInvalidDevice
 *         err = initPrimaryContext(peerDevice)
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1593, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1594
 *         if device == NULL or peerDevice == NULL:
 *             _setLastError(err)
 *             return cudaErrorInvalidDevice             # <<<<<<<<<<<<<<
 *         err = initPrimaryContext(peerDevice)
 *         if err != cudaSuccess:
 */
      __pyx_r = cudaErrorInvalidDevice;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1592
 *         peerDevice = m_global.getDevice(dstDevice)
 *         device = m_global.getDevice(srcDevice)
 *         if device == NULL or peerDevice == NULL:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return cudaErrorInvalidDevice
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1595
 *             _setLastError(err)
 *             return cudaErrorInvalidDevice
 *         err = initPrimaryContext(peerDevice)             # <<<<<<<<<<<<<<
 *         if err != cudaSuccess:
 *             _setLastError(err)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_initPrimaryContext(__pyx_v_peerDevice); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1595, __pyx_L1_error)
    __pyx_v_err = __pyx_t_1;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1596
 *             return cudaErrorInvalidDevice
 *         err = initPrimaryContext(peerDevice)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    __pyx_t_2 = (__pyx_v_err != cudaSuccess);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1597
 *         err = initPrimaryContext(peerDevice)
 *         if err != cudaSuccess:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *             return err
 *         err = initPrimaryContext(device)
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1597, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1598
 *         if err != cudaSuccess:
 *             _setLastError(err)
 *             return err             # <<<<<<<<<<<<<<
 *         err = initPrimaryContext(device)
 *         if err != cudaSuccess:
 */
      __pyx_r = __pyx_v_err;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1596
 *             return cudaErrorInvalidDevice
 *         err = initPrimaryContext(peerDevice)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1599
 *             _setLastError(err)
 *             return err
 *         err = initPrimaryContext(device)             # <<<<<<<<<<<<<<
 *         if err != cudaSuccess:
 *             _setLastError(err)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_initPrimaryContext(__pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1599, __pyx_L1_error)
    __pyx_v_err = __pyx_t_1;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1600
 *             return err
 *         err = initPrimaryContext(device)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    __pyx_t_2 = (__pyx_v_err != cudaSuccess);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1601
 *         err = initPrimaryContext(device)
 *         if err != cudaSuccess:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *             return err
 *         err = <cudaError_t>cydriver._cuMemcpyPeer(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count)
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1601, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1602
 *         if err != cudaSuccess:
 *             _setLastError(err)
 *             return err             # <<<<<<<<<<<<<<
 *         err = <cudaError_t>cydriver._cuMemcpyPeer(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count)
 *         if err != cudaSuccess:
 */
      __pyx_r = __pyx_v_err;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1600
 *             return err
 *         err = initPrimaryContext(device)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1603
 *             _setLastError(err)
 *             return err
 *         err = <cudaError_t>cydriver._cuMemcpyPeer(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count)             # <<<<<<<<<<<<<<
 *         if err != cudaSuccess:
 *             _setLastError(err)
 */
    __pyx_t_4 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemcpyPeer(((CUdeviceptr)__pyx_v_dst), (__pyx_v_peerDevice[0]).primaryContext, ((CUdeviceptr)__pyx_v_src), (__pyx_v_device[0]).primaryContext, __pyx_v_count); if (unlikely(__pyx_t_4 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1603, __pyx_L1_error)
    __pyx_v_err = ((cudaError_t)__pyx_t_4);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1604
 *             return err
 *         err = <cudaError_t>cydriver._cuMemcpyPeer(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    __pyx_t_2 = (__pyx_v_err != cudaSuccess);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1605
 *         err = <cudaError_t>cydriver._cuMemcpyPeer(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count)
 *         if err != cudaSuccess:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *             return err
 *     return err
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1605, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1606
 *         if err != cudaSuccess:
 *             _setLastError(err)
 *             return err             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
      __pyx_r = __pyx_v_err;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1604
 *             return err
 *         err = <cudaError_t>cydriver._cuMemcpyPeer(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1589
 *     if err != cudaSuccess:
 *         return err
 *     if count > 0:             # <<<<<<<<<<<<<<
 *         peerDevice = m_global.getDevice(dstDevice)
 *         device = m_global.getDevice(srcDevice)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1607
 *             _setLastError(err)
 *             return err
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1582
 * 
 * 
 * cdef cudaError_t _cudaMemcpyPeer(void* dst, int dstDevice, const void* src, int srcDevice, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaPythonDevice *device
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpyPeer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1610
 * 
 * 
 * cdef cudaError_t _cudaMemcpyPeerAsync(void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaPythonDevice *device
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyPeerAsync(void *__pyx_v_dst, int __pyx_v_dstDevice, void const *__pyx_v_src, int __pyx_v_srcDevice, size_t __pyx_v_count, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_device;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_peerDevice;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  CUresult __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemcpyPeerAsync", __pyx_f[0], 1610, 1, __PYX_ERR(0, 1610, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1611
 * 
 * cdef cudaError_t _cudaMemcpyPeerAsync(void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cudaPythonDevice *device
 *     cdef cudaPythonDevice *peerDevice
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1614
 *     cdef cudaPythonDevice *device
 *     cdef cudaPythonDevice *peerDevice
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1614, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1615
 *     cdef cudaPythonDevice *peerDevice
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     if count > 0:
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1616
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     if count > 0:
 *         peerDevice = m_global.getDevice(dstDevice)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1615
 *     cdef cudaPythonDevice *peerDevice
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     if count > 0:
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1617
 *     if err != cudaSuccess:
 *         return err
 *     if count > 0:             # <<<<<<<<<<<<<<
 *         peerDevice = m_global.getDevice(dstDevice)
 *         device = m_global.getDevice(srcDevice)
 */
  __pyx_t_2 = (__pyx_v_count > 0);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1618
 *         return err
 *     if count > 0:
 *         peerDevice = m_global.getDevice(dstDevice)             # <<<<<<<<<<<<<<
 *         device = m_global.getDevice(srcDevice)
 *         if device == NULL or peerDevice == NULL:
 */
    __pyx_v_peerDevice = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_dstDevice);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1619
 *     if count > 0:
 *         peerDevice = m_global.getDevice(dstDevice)
 *         device = m_global.getDevice(srcDevice)             # <<<<<<<<<<<<<<
 *         if device == NULL or peerDevice == NULL:
 *             _setLastError(err)
 */
    __pyx_v_device = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_srcDevice);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1620
 *         peerDevice = m_global.getDevice(dstDevice)
 *         device = m_global.getDevice(srcDevice)
 *         if device == NULL or peerDevice == NULL:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return cudaErrorInvalidDevice
 */
    __pyx_t_3 = (__pyx_v_device == NULL);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_peerDevice == NULL);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1621
 *         device = m_global.getDevice(srcDevice)
 *         if device == NULL or peerDevice == NULL:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *             return cudaErrorInvalidDevice
 *         err = initPrimaryContext(peerDevice)
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1621, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1622
 *         if device == NULL or peerDevice == NULL:
 *             _setLastError(err)
 *             return cudaErrorInvalidDevice             # <<<<<<<<<<<<<<
 *         err = initPrimaryContext(peerDevice)
 *         if err != cudaSuccess:
 */
      __pyx_r = cudaErrorInvalidDevice;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1620
 *         peerDevice = m_global.getDevice(dstDevice)
 *         device = m_global.getDevice(srcDevice)
 *         if device == NULL or peerDevice == NULL:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return cudaErrorInvalidDevice
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1623
 *             _setLastError(err)
 *             return cudaErrorInvalidDevice
 *         err = initPrimaryContext(peerDevice)             # <<<<<<<<<<<<<<
 *         if err != cudaSuccess:
 *             _setLastError(err)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_initPrimaryContext(__pyx_v_peerDevice); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1623, __pyx_L1_error)
    __pyx_v_err = __pyx_t_1;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1624
 *             return cudaErrorInvalidDevice
 *         err = initPrimaryContext(peerDevice)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    __pyx_t_2 = (__pyx_v_err != cudaSuccess);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1625
 *         err = initPrimaryContext(peerDevice)
 *         if err != cudaSuccess:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *             return err
 *         err = initPrimaryContext(device)
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1625, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1626
 *         if err != cudaSuccess:
 *             _setLastError(err)
 *             return err             # <<<<<<<<<<<<<<
 *         err = initPrimaryContext(device)
 *         if err != cudaSuccess:
 */
      __pyx_r = __pyx_v_err;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1624
 *             return cudaErrorInvalidDevice
 *         err = initPrimaryContext(peerDevice)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1627
 *             _setLastError(err)
 *             return err
 *         err = initPrimaryContext(device)             # <<<<<<<<<<<<<<
 *         if err != cudaSuccess:
 *             _setLastError(err)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_initPrimaryContext(__pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1627, __pyx_L1_error)
    __pyx_v_err = __pyx_t_1;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1628
 *             return err
 *         err = initPrimaryContext(device)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    __pyx_t_2 = (__pyx_v_err != cudaSuccess);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1629
 *         err = initPrimaryContext(device)
 *         if err != cudaSuccess:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *             return err
 *         err = <cudaError_t>cydriver._cuMemcpyPeerAsync(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count, <cydriver.CUstream>stream)
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1629, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1630
 *         if err != cudaSuccess:
 *             _setLastError(err)
 *             return err             # <<<<<<<<<<<<<<
 *         err = <cudaError_t>cydriver._cuMemcpyPeerAsync(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count, <cydriver.CUstream>stream)
 *         if err != cudaSuccess:
 */
      __pyx_r = __pyx_v_err;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1628
 *             return err
 *         err = initPrimaryContext(device)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1631
 *             _setLastError(err)
 *             return err
 *         err = <cudaError_t>cydriver._cuMemcpyPeerAsync(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count, <cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *         if err != cudaSuccess:
 *             _setLastError(err)
 */
    __pyx_t_4 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemcpyPeerAsync(((CUdeviceptr)__pyx_v_dst), (__pyx_v_peerDevice[0]).primaryContext, ((CUdeviceptr)__pyx_v_src), (__pyx_v_device[0]).primaryContext, __pyx_v_count, ((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_4 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1631, __pyx_L1_error)
    __pyx_v_err = ((cudaError_t)__pyx_t_4);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1632
 *             return err
 *         err = <cudaError_t>cydriver._cuMemcpyPeerAsync(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count, <cydriver.CUstream>stream)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    __pyx_t_2 = (__pyx_v_err != cudaSuccess);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1633
 *         err = <cudaError_t>cydriver._cuMemcpyPeerAsync(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count, <cydriver.CUstream>stream)
 *         if err != cudaSuccess:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *             return err
 *     return err
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1633, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1634
 *         if err != cudaSuccess:
 *             _setLastError(err)
 *             return err             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
      __pyx_r = __pyx_v_err;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1632
 *             return err
 *         err = <cudaError_t>cydriver._cuMemcpyPeerAsync(<cydriver.CUdeviceptr>dst, peerDevice[0].primaryContext, <cydriver.CUdeviceptr>src, device[0].primaryContext, count, <cydriver.CUstream>stream)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1617
 *     if err != cudaSuccess:
 *         return err
 *     if count > 0:             # <<<<<<<<<<<<<<
 *         peerDevice = m_global.getDevice(dstDevice)
 *         device = m_global.getDevice(srcDevice)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1635
 *             _setLastError(err)
 *             return err
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1610
 * 
 * 
 * cdef cudaError_t _cudaMemcpyPeerAsync(void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaPythonDevice *device
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemcpyPeerAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1638
 * 
 * 
 * cdef cudaError_t _cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUcontext context
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceEnablePeerAccess(int __pyx_v_peerDevice, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  CUcontext __pyx_v_context;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_dev;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceEnablePeerAccess", __pyx_f[0], 1638, 1, __PYX_ERR(0, 1638, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1639
 * 
 * cdef cudaError_t _cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cudaPythonDevice *dev
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1642
 *     cdef cydriver.CUcontext context
 *     cdef cudaPythonDevice *dev
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1642, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1643
 *     cdef cudaPythonDevice *dev
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1644
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1644, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1645
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1643
 *     cdef cudaPythonDevice *dev
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1646
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_context)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1646, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1647
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1648
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     dev = m_global.getDeviceFromPrimaryCtx(context)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1648, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1649
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     dev = m_global.getDeviceFromPrimaryCtx(context)
 *     if dev == NULL:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1647
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1650
 *         _setLastError(err)
 *         return err
 *     dev = m_global.getDeviceFromPrimaryCtx(context)             # <<<<<<<<<<<<<<
 *     if dev == NULL:
 *         # We don't know if context provided is primary or not
 */
  __pyx_v_dev = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDeviceFromPrimaryCtx(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_context);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1651
 *         return err
 *     dev = m_global.getDeviceFromPrimaryCtx(context)
 *     if dev == NULL:             # <<<<<<<<<<<<<<
 *         # We don't know if context provided is primary or not
 *         # cudaSetDevice may need to be called before retrying call
 */
  __pyx_t_2 = (__pyx_v_dev == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1654
 *         # We don't know if context provided is primary or not
 *         # cudaSetDevice may need to be called before retrying call
 *         _setLastError(cudaErrorIncompatibleDriverContext)             # <<<<<<<<<<<<<<
 *         return cudaErrorIncompatibleDriverContext
 *     dev = m_global.getDevice(peerDevice)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorIncompatibleDriverContext); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1654, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1655
 *         # cudaSetDevice may need to be called before retrying call
 *         _setLastError(cudaErrorIncompatibleDriverContext)
 *         return cudaErrorIncompatibleDriverContext             # <<<<<<<<<<<<<<
 *     dev = m_global.getDevice(peerDevice)
 *     if dev == NULL:
 */
    __pyx_r = cudaErrorIncompatibleDriverContext;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1651
 *         return err
 *     dev = m_global.getDeviceFromPrimaryCtx(context)
 *     if dev == NULL:             # <<<<<<<<<<<<<<
 *         # We don't know if context provided is primary or not
 *         # cudaSetDevice may need to be called before retrying call
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1656
 *         _setLastError(cudaErrorIncompatibleDriverContext)
 *         return cudaErrorIncompatibleDriverContext
 *     dev = m_global.getDevice(peerDevice)             # <<<<<<<<<<<<<<
 *     if dev == NULL:
 *         return cudaErrorInvalidDevice
 */
  __pyx_v_dev = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_peerDevice);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1657
 *         return cudaErrorIncompatibleDriverContext
 *     dev = m_global.getDevice(peerDevice)
 *     if dev == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidDevice
 *     err = initPrimaryContext(dev)
 */
  __pyx_t_2 = (__pyx_v_dev == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1658
 *     dev = m_global.getDevice(peerDevice)
 *     if dev == NULL:
 *         return cudaErrorInvalidDevice             # <<<<<<<<<<<<<<
 *     err = initPrimaryContext(dev)
 *     if err != cudaSuccess:
 */
    __pyx_r = cudaErrorInvalidDevice;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1657
 *         return cudaErrorIncompatibleDriverContext
 *     dev = m_global.getDevice(peerDevice)
 *     if dev == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidDevice
 *     err = initPrimaryContext(dev)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1659
 *     if dev == NULL:
 *         return cudaErrorInvalidDevice
 *     err = initPrimaryContext(dev)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_initPrimaryContext(__pyx_v_dev); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1659, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1660
 *         return cudaErrorInvalidDevice
 *     err = initPrimaryContext(dev)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1661
 *     err = initPrimaryContext(dev)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxEnablePeerAccess(dev.primaryContext, flags)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1661, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1662
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxEnablePeerAccess(dev.primaryContext, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1660
 *         return cudaErrorInvalidDevice
 *     err = initPrimaryContext(dev)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1663
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxEnablePeerAccess(dev.primaryContext, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxEnablePeerAccess(__pyx_v_dev->primaryContext, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1663, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1664
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxEnablePeerAccess(dev.primaryContext, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1665
 *     err = <cudaError_t>cydriver._cuCtxEnablePeerAccess(dev.primaryContext, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1665, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1664
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxEnablePeerAccess(dev.primaryContext, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1666
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1638
 * 
 * 
 * cdef cudaError_t _cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUcontext context
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceEnablePeerAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1669
 * 
 * 
 * cdef cudaError_t _cudaDeviceDisablePeerAccess(int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUcontext context
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceDisablePeerAccess(int __pyx_v_peerDevice) {
  cudaError_t __pyx_v_err;
  CUcontext __pyx_v_context;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_dev;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceDisablePeerAccess", __pyx_f[0], 1669, 1, __PYX_ERR(0, 1669, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1670
 * 
 * cdef cudaError_t _cudaDeviceDisablePeerAccess(int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     cdef cudaPythonDevice *dev
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1673
 *     cdef cydriver.CUcontext context
 *     cdef cudaPythonDevice *dev
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1673, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1674
 *     cdef cudaPythonDevice *dev
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1675
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1675, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1676
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1674
 *     cdef cudaPythonDevice *dev
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1677
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_context)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1677, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1678
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1679
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     dev = m_global.getDeviceFromPrimaryCtx(context)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1679, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1680
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     dev = m_global.getDeviceFromPrimaryCtx(context)
 *     if dev == NULL:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1678
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1681
 *         _setLastError(err)
 *         return err
 *     dev = m_global.getDeviceFromPrimaryCtx(context)             # <<<<<<<<<<<<<<
 *     if dev == NULL:
 *         # We don't know if context provided is primary or not
 */
  __pyx_v_dev = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDeviceFromPrimaryCtx(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_context);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1682
 *         return err
 *     dev = m_global.getDeviceFromPrimaryCtx(context)
 *     if dev == NULL:             # <<<<<<<<<<<<<<
 *         # We don't know if context provided is primary or not
 *         # cudaSetDevice may need to be called before retrying call
 */
  __pyx_t_2 = (__pyx_v_dev == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1685
 *         # We don't know if context provided is primary or not
 *         # cudaSetDevice may need to be called before retrying call
 *         _setLastError(cudaErrorIncompatibleDriverContext)             # <<<<<<<<<<<<<<
 *         return cudaErrorIncompatibleDriverContext
 *     dev = m_global.getDevice(peerDevice)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorIncompatibleDriverContext); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1685, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1686
 *         # cudaSetDevice may need to be called before retrying call
 *         _setLastError(cudaErrorIncompatibleDriverContext)
 *         return cudaErrorIncompatibleDriverContext             # <<<<<<<<<<<<<<
 *     dev = m_global.getDevice(peerDevice)
 *     if dev == NULL:
 */
    __pyx_r = cudaErrorIncompatibleDriverContext;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1682
 *         return err
 *     dev = m_global.getDeviceFromPrimaryCtx(context)
 *     if dev == NULL:             # <<<<<<<<<<<<<<
 *         # We don't know if context provided is primary or not
 *         # cudaSetDevice may need to be called before retrying call
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1687
 *         _setLastError(cudaErrorIncompatibleDriverContext)
 *         return cudaErrorIncompatibleDriverContext
 *     dev = m_global.getDevice(peerDevice)             # <<<<<<<<<<<<<<
 *     if dev == NULL:
 *         return cudaErrorInvalidDevice
 */
  __pyx_v_dev = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_peerDevice);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1688
 *         return cudaErrorIncompatibleDriverContext
 *     dev = m_global.getDevice(peerDevice)
 *     if dev == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidDevice
 *     err = initPrimaryContext(dev)
 */
  __pyx_t_2 = (__pyx_v_dev == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1689
 *     dev = m_global.getDevice(peerDevice)
 *     if dev == NULL:
 *         return cudaErrorInvalidDevice             # <<<<<<<<<<<<<<
 *     err = initPrimaryContext(dev)
 *     if err != cudaSuccess:
 */
    __pyx_r = cudaErrorInvalidDevice;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1688
 *         return cudaErrorIncompatibleDriverContext
 *     dev = m_global.getDevice(peerDevice)
 *     if dev == NULL:             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidDevice
 *     err = initPrimaryContext(dev)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1690
 *     if dev == NULL:
 *         return cudaErrorInvalidDevice
 *     err = initPrimaryContext(dev)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_initPrimaryContext(__pyx_v_dev); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1690, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1691
 *         return cudaErrorInvalidDevice
 *     err = initPrimaryContext(dev)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1692
 *     err = initPrimaryContext(dev)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxDisablePeerAccess(dev.primaryContext)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1692, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1693
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxDisablePeerAccess(dev.primaryContext)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1691
 *         return cudaErrorInvalidDevice
 *     err = initPrimaryContext(dev)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1694
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxDisablePeerAccess(dev.primaryContext)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxDisablePeerAccess(__pyx_v_dev->primaryContext); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1694, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1695
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxDisablePeerAccess(dev.primaryContext)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1696
 *     err = <cudaError_t>cydriver._cuCtxDisablePeerAccess(dev.primaryContext)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1696, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1695
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxDisablePeerAccess(dev.primaryContext)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1697
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1669
 * 
 * 
 * cdef cudaError_t _cudaDeviceDisablePeerAccess(int peerDevice) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUcontext context
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceDisablePeerAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1699
 *     return err
 * 
 * cdef cudaError_t _cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t *__pyx_v_mipmap, cudaExternalMemory_t __pyx_v_extMem, struct cudaExternalMemoryMipmappedArrayDesc const *__pyx_v_mipmapDesc) {
  cudaError_t __pyx_v_err;
  CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC __pyx_v__driver_mipmapDesc;
  cudaError_t __pyx_v_err_rt;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  unsigned PY_LONG_LONG __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  unsigned int __pyx_t_5;
  CUresult __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaExternalMemoryGetMappedMipmappedArray", __pyx_f[0], 1699, 1, __PYX_ERR(0, 1699, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1700
 * 
 * cdef cudaError_t _cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC _driver_mipmapDesc
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1701
 * cdef cudaError_t _cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC _driver_mipmapDesc
 *     memset(&_driver_mipmapDesc, 0, sizeof(_driver_mipmapDesc))
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1701, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1703
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC _driver_mipmapDesc
 *     memset(&_driver_mipmapDesc, 0, sizeof(_driver_mipmapDesc))             # <<<<<<<<<<<<<<
 *     _driver_mipmapDesc.offset = mipmapDesc[0].offset
 *     _driver_mipmapDesc.arrayDesc.Width = mipmapDesc[0].extent.width
 */
  (void)(memset((&__pyx_v__driver_mipmapDesc), 0, (sizeof(__pyx_v__driver_mipmapDesc))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1704
 *     cdef cydriver.CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC _driver_mipmapDesc
 *     memset(&_driver_mipmapDesc, 0, sizeof(_driver_mipmapDesc))
 *     _driver_mipmapDesc.offset = mipmapDesc[0].offset             # <<<<<<<<<<<<<<
 *     _driver_mipmapDesc.arrayDesc.Width = mipmapDesc[0].extent.width
 *     _driver_mipmapDesc.arrayDesc.Height = mipmapDesc[0].extent.height
 */
  __pyx_t_2 = (__pyx_v_mipmapDesc[0]).offset;
  __pyx_v__driver_mipmapDesc.offset = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1705
 *     memset(&_driver_mipmapDesc, 0, sizeof(_driver_mipmapDesc))
 *     _driver_mipmapDesc.offset = mipmapDesc[0].offset
 *     _driver_mipmapDesc.arrayDesc.Width = mipmapDesc[0].extent.width             # <<<<<<<<<<<<<<
 *     _driver_mipmapDesc.arrayDesc.Height = mipmapDesc[0].extent.height
 *     _driver_mipmapDesc.arrayDesc.Depth = mipmapDesc[0].extent.depth
 */
  __pyx_t_3 = (__pyx_v_mipmapDesc[0]).extent.width;
  __pyx_v__driver_mipmapDesc.arrayDesc.Width = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1706
 *     _driver_mipmapDesc.offset = mipmapDesc[0].offset
 *     _driver_mipmapDesc.arrayDesc.Width = mipmapDesc[0].extent.width
 *     _driver_mipmapDesc.arrayDesc.Height = mipmapDesc[0].extent.height             # <<<<<<<<<<<<<<
 *     _driver_mipmapDesc.arrayDesc.Depth = mipmapDesc[0].extent.depth
 *     err_rt = getDescInfo(&mipmapDesc[0].formatDesc, <int *>&_driver_mipmapDesc.arrayDesc.NumChannels, &_driver_mipmapDesc.arrayDesc.Format)
 */
  __pyx_t_3 = (__pyx_v_mipmapDesc[0]).extent.height;
  __pyx_v__driver_mipmapDesc.arrayDesc.Height = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1707
 *     _driver_mipmapDesc.arrayDesc.Width = mipmapDesc[0].extent.width
 *     _driver_mipmapDesc.arrayDesc.Height = mipmapDesc[0].extent.height
 *     _driver_mipmapDesc.arrayDesc.Depth = mipmapDesc[0].extent.depth             # <<<<<<<<<<<<<<
 *     err_rt = getDescInfo(&mipmapDesc[0].formatDesc, <int *>&_driver_mipmapDesc.arrayDesc.NumChannels, &_driver_mipmapDesc.arrayDesc.Format)
 *     if err_rt != cudaError.cudaSuccess:
 */
  __pyx_t_3 = (__pyx_v_mipmapDesc[0]).extent.depth;
  __pyx_v__driver_mipmapDesc.arrayDesc.Depth = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1708
 *     _driver_mipmapDesc.arrayDesc.Height = mipmapDesc[0].extent.height
 *     _driver_mipmapDesc.arrayDesc.Depth = mipmapDesc[0].extent.depth
 *     err_rt = getDescInfo(&mipmapDesc[0].formatDesc, <int *>&_driver_mipmapDesc.arrayDesc.NumChannels, &_driver_mipmapDesc.arrayDesc.Format)             # <<<<<<<<<<<<<<
 *     if err_rt != cudaError.cudaSuccess:
 *         _setLastError(err_rt)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getDescInfo((&(__pyx_v_mipmapDesc[0]).formatDesc), ((int *)(&__pyx_v__driver_mipmapDesc.arrayDesc.NumChannels)), (&__pyx_v__driver_mipmapDesc.arrayDesc.Format)); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1708, __pyx_L1_error)
  __pyx_v_err_rt = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1709
 *     _driver_mipmapDesc.arrayDesc.Depth = mipmapDesc[0].extent.depth
 *     err_rt = getDescInfo(&mipmapDesc[0].formatDesc, <int *>&_driver_mipmapDesc.arrayDesc.NumChannels, &_driver_mipmapDesc.arrayDesc.Format)
 *     if err_rt != cudaError.cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err_rt)
 *         return err_rt
 */
  __pyx_t_4 = (__pyx_v_err_rt != cudaSuccess);
  if (__pyx_t_4) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1710
 *     err_rt = getDescInfo(&mipmapDesc[0].formatDesc, <int *>&_driver_mipmapDesc.arrayDesc.NumChannels, &_driver_mipmapDesc.arrayDesc.Format)
 *     if err_rt != cudaError.cudaSuccess:
 *         _setLastError(err_rt)             # <<<<<<<<<<<<<<
 *         return err_rt
 *     _driver_mipmapDesc.arrayDesc.Flags = mipmapDesc[0].flags
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err_rt); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1710, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1711
 *     if err_rt != cudaError.cudaSuccess:
 *         _setLastError(err_rt)
 *         return err_rt             # <<<<<<<<<<<<<<
 *     _driver_mipmapDesc.arrayDesc.Flags = mipmapDesc[0].flags
 *     _driver_mipmapDesc.numLevels = mipmapDesc[0].numLevels
 */
    __pyx_r = __pyx_v_err_rt;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1709
 *     _driver_mipmapDesc.arrayDesc.Depth = mipmapDesc[0].extent.depth
 *     err_rt = getDescInfo(&mipmapDesc[0].formatDesc, <int *>&_driver_mipmapDesc.arrayDesc.NumChannels, &_driver_mipmapDesc.arrayDesc.Format)
 *     if err_rt != cudaError.cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err_rt)
 *         return err_rt
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1712
 *         _setLastError(err_rt)
 *         return err_rt
 *     _driver_mipmapDesc.arrayDesc.Flags = mipmapDesc[0].flags             # <<<<<<<<<<<<<<
 *     _driver_mipmapDesc.numLevels = mipmapDesc[0].numLevels
 * 
 */
  __pyx_t_5 = (__pyx_v_mipmapDesc[0]).flags;
  __pyx_v__driver_mipmapDesc.arrayDesc.Flags = __pyx_t_5;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1713
 *         return err_rt
 *     _driver_mipmapDesc.arrayDesc.Flags = mipmapDesc[0].flags
 *     _driver_mipmapDesc.numLevels = mipmapDesc[0].numLevels             # <<<<<<<<<<<<<<
 * 
 *     if err != cudaSuccess:
 */
  __pyx_t_5 = (__pyx_v_mipmapDesc[0]).numLevels;
  __pyx_v__driver_mipmapDesc.numLevels = __pyx_t_5;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1715
 *     _driver_mipmapDesc.numLevels = mipmapDesc[0].numLevels
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmap, <cydriver.CUexternalMemory>extMem, &_driver_mipmapDesc)
 */
  __pyx_t_4 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_4) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1716
 * 
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmap, <cydriver.CUexternalMemory>extMem, &_driver_mipmapDesc)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1715
 *     _driver_mipmapDesc.numLevels = mipmapDesc[0].numLevels
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmap, <cydriver.CUexternalMemory>extMem, &_driver_mipmapDesc)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1717
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmap, <cydriver.CUexternalMemory>extMem, &_driver_mipmapDesc)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_6 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuExternalMemoryGetMappedMipmappedArray(((CUmipmappedArray *)__pyx_v_mipmap), ((CUexternalMemory)__pyx_v_extMem), (&__pyx_v__driver_mipmapDesc)); if (unlikely(__pyx_t_6 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1717, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_6);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1718
 *         return err
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmap, <cydriver.CUexternalMemory>extMem, &_driver_mipmapDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_4 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_4) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1719
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmap, <cydriver.CUexternalMemory>extMem, &_driver_mipmapDesc)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1719, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1718
 *         return err
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmap, <cydriver.CUexternalMemory>extMem, &_driver_mipmapDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1720
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1699
 *     return err
 * 
 * cdef cudaError_t _cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaExternalMemoryGetMappedMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1722
 *     return err
 * 
 * cdef cudaError_t _cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *__pyx_v_pResDesc, cudaSurfaceObject_t __pyx_v_surfObject) {
  cudaError_t __pyx_v_err;
  CUDA_RESOURCE_DESC __pyx_v__driver_pResDesc;
  long __pyx_v_channel_size;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetSurfaceObjectResourceDesc", __pyx_f[0], 1722, 1, __PYX_ERR(0, 1722, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1723
 * 
 * cdef cudaError_t _cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1724
 * cdef cudaError_t _cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1724, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1727
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuSurfObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUsurfObject>surfObject)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1728
 * 
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuSurfObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUsurfObject>surfObject)
 *     memset(pResDesc, 0, sizeof(cudaResourceDesc))
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1727
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuSurfObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUsurfObject>surfObject)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1729
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuSurfObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUsurfObject>surfObject)             # <<<<<<<<<<<<<<
 *     memset(pResDesc, 0, sizeof(cudaResourceDesc))
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_ARRAY:
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSurfObjectGetResourceDesc((&__pyx_v__driver_pResDesc), ((CUsurfObject)__pyx_v_surfObject)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1729, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1730
 *         return err
 *     err = <cudaError_t>cydriver._cuSurfObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUsurfObject>surfObject)
 *     memset(pResDesc, 0, sizeof(cudaResourceDesc))             # <<<<<<<<<<<<<<
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_ARRAY:
 *         pResDesc[0].resType         = cudaResourceType.cudaResourceTypeArray
 */
  (void)(memset(__pyx_v_pResDesc, 0, (sizeof(struct cudaResourceDesc))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1731
 *     err = <cudaError_t>cydriver._cuSurfObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUsurfObject>surfObject)
 *     memset(pResDesc, 0, sizeof(cudaResourceDesc))
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_ARRAY:             # <<<<<<<<<<<<<<
 *         pResDesc[0].resType         = cudaResourceType.cudaResourceTypeArray
 *         pResDesc[0].res.array.array = <cudaArray_t>_driver_pResDesc.res.array.hArray
 */
  switch (__pyx_v__driver_pResDesc.resType) {
    case CU_RESOURCE_TYPE_ARRAY:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1732
 *     memset(pResDesc, 0, sizeof(cudaResourceDesc))
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_ARRAY:
 *         pResDesc[0].resType         = cudaResourceType.cudaResourceTypeArray             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.array.array = <cudaArray_t>_driver_pResDesc.res.array.hArray
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_MIPMAPPED_ARRAY:
 */
    (__pyx_v_pResDesc[0]).resType = cudaResourceTypeArray;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1733
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_ARRAY:
 *         pResDesc[0].resType         = cudaResourceType.cudaResourceTypeArray
 *         pResDesc[0].res.array.array = <cudaArray_t>_driver_pResDesc.res.array.hArray             # <<<<<<<<<<<<<<
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_MIPMAPPED_ARRAY:
 *         pResDesc[0].resType = cudaResourceType.cudaResourceTypeMipmappedArray
 */
    (__pyx_v_pResDesc[0]).res.array.array = ((cudaArray_t)__pyx_v__driver_pResDesc.res.array.hArray);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1731
 *     err = <cudaError_t>cydriver._cuSurfObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUsurfObject>surfObject)
 *     memset(pResDesc, 0, sizeof(cudaResourceDesc))
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_ARRAY:             # <<<<<<<<<<<<<<
 *         pResDesc[0].resType         = cudaResourceType.cudaResourceTypeArray
 *         pResDesc[0].res.array.array = <cudaArray_t>_driver_pResDesc.res.array.hArray
 */
    break;
    case CU_RESOURCE_TYPE_MIPMAPPED_ARRAY:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1735
 *         pResDesc[0].res.array.array = <cudaArray_t>_driver_pResDesc.res.array.hArray
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_MIPMAPPED_ARRAY:
 *         pResDesc[0].resType = cudaResourceType.cudaResourceTypeMipmappedArray             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.mipmap.mipmap = <cudaMipmappedArray_t>_driver_pResDesc.res.mipmap.hMipmappedArray
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR:
 */
    (__pyx_v_pResDesc[0]).resType = cudaResourceTypeMipmappedArray;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1736
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_MIPMAPPED_ARRAY:
 *         pResDesc[0].resType = cudaResourceType.cudaResourceTypeMipmappedArray
 *         pResDesc[0].res.mipmap.mipmap = <cudaMipmappedArray_t>_driver_pResDesc.res.mipmap.hMipmappedArray             # <<<<<<<<<<<<<<
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR:
 *         pResDesc[0].resType                = cudaResourceType.cudaResourceTypeLinear
 */
    (__pyx_v_pResDesc[0]).res.mipmap.mipmap = ((cudaMipmappedArray_t)__pyx_v__driver_pResDesc.res.mipmap.hMipmappedArray);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1734
 *         pResDesc[0].resType         = cudaResourceType.cudaResourceTypeArray
 *         pResDesc[0].res.array.array = <cudaArray_t>_driver_pResDesc.res.array.hArray
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_MIPMAPPED_ARRAY:             # <<<<<<<<<<<<<<
 *         pResDesc[0].resType = cudaResourceType.cudaResourceTypeMipmappedArray
 *         pResDesc[0].res.mipmap.mipmap = <cudaMipmappedArray_t>_driver_pResDesc.res.mipmap.hMipmappedArray
 */
    break;
    case CU_RESOURCE_TYPE_LINEAR:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1738
 *         pResDesc[0].res.mipmap.mipmap = <cudaMipmappedArray_t>_driver_pResDesc.res.mipmap.hMipmappedArray
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR:
 *         pResDesc[0].resType                = cudaResourceType.cudaResourceTypeLinear             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.linear.devPtr      = <void *>_driver_pResDesc.res.linear.devPtr
 *         pResDesc[0].res.linear.sizeInBytes = _driver_pResDesc.res.linear.sizeInBytes
 */
    (__pyx_v_pResDesc[0]).resType = cudaResourceTypeLinear;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1739
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR:
 *         pResDesc[0].resType                = cudaResourceType.cudaResourceTypeLinear
 *         pResDesc[0].res.linear.devPtr      = <void *>_driver_pResDesc.res.linear.devPtr             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.linear.sizeInBytes = _driver_pResDesc.res.linear.sizeInBytes
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:
 */
    (__pyx_v_pResDesc[0]).res.linear.devPtr = ((void *)__pyx_v__driver_pResDesc.res.linear.devPtr);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1740
 *         pResDesc[0].resType                = cudaResourceType.cudaResourceTypeLinear
 *         pResDesc[0].res.linear.devPtr      = <void *>_driver_pResDesc.res.linear.devPtr
 *         pResDesc[0].res.linear.sizeInBytes = _driver_pResDesc.res.linear.sizeInBytes             # <<<<<<<<<<<<<<
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:
 *         pResDesc[0].resType                  = cudaResourceType.cudaResourceTypePitch2D
 */
    __pyx_t_4 = __pyx_v__driver_pResDesc.res.linear.sizeInBytes;
    (__pyx_v_pResDesc[0]).res.linear.sizeInBytes = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1737
 *         pResDesc[0].resType = cudaResourceType.cudaResourceTypeMipmappedArray
 *         pResDesc[0].res.mipmap.mipmap = <cudaMipmappedArray_t>_driver_pResDesc.res.mipmap.hMipmappedArray
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR:             # <<<<<<<<<<<<<<
 *         pResDesc[0].resType                = cudaResourceType.cudaResourceTypeLinear
 *         pResDesc[0].res.linear.devPtr      = <void *>_driver_pResDesc.res.linear.devPtr
 */
    break;
    case CU_RESOURCE_TYPE_PITCH2D:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1742
 *         pResDesc[0].res.linear.sizeInBytes = _driver_pResDesc.res.linear.sizeInBytes
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:
 *         pResDesc[0].resType                  = cudaResourceType.cudaResourceTypePitch2D             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.pitch2D.devPtr       = <void *>_driver_pResDesc.res.pitch2D.devPtr
 *         pResDesc[0].res.pitch2D.pitchInBytes = _driver_pResDesc.res.pitch2D.pitchInBytes
 */
    (__pyx_v_pResDesc[0]).resType = cudaResourceTypePitch2D;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1743
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:
 *         pResDesc[0].resType                  = cudaResourceType.cudaResourceTypePitch2D
 *         pResDesc[0].res.pitch2D.devPtr       = <void *>_driver_pResDesc.res.pitch2D.devPtr             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.pitch2D.pitchInBytes = _driver_pResDesc.res.pitch2D.pitchInBytes
 *         pResDesc[0].res.pitch2D.width        = _driver_pResDesc.res.pitch2D.width
 */
    (__pyx_v_pResDesc[0]).res.pitch2D.devPtr = ((void *)__pyx_v__driver_pResDesc.res.pitch2D.devPtr);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1744
 *         pResDesc[0].resType                  = cudaResourceType.cudaResourceTypePitch2D
 *         pResDesc[0].res.pitch2D.devPtr       = <void *>_driver_pResDesc.res.pitch2D.devPtr
 *         pResDesc[0].res.pitch2D.pitchInBytes = _driver_pResDesc.res.pitch2D.pitchInBytes             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.pitch2D.width        = _driver_pResDesc.res.pitch2D.width
 *         pResDesc[0].res.pitch2D.height       = _driver_pResDesc.res.pitch2D.height
 */
    __pyx_t_4 = __pyx_v__driver_pResDesc.res.pitch2D.pitchInBytes;
    (__pyx_v_pResDesc[0]).res.pitch2D.pitchInBytes = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1745
 *         pResDesc[0].res.pitch2D.devPtr       = <void *>_driver_pResDesc.res.pitch2D.devPtr
 *         pResDesc[0].res.pitch2D.pitchInBytes = _driver_pResDesc.res.pitch2D.pitchInBytes
 *         pResDesc[0].res.pitch2D.width        = _driver_pResDesc.res.pitch2D.width             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.pitch2D.height       = _driver_pResDesc.res.pitch2D.height
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR or _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:
 */
    __pyx_t_4 = __pyx_v__driver_pResDesc.res.pitch2D.width;
    (__pyx_v_pResDesc[0]).res.pitch2D.width = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1746
 *         pResDesc[0].res.pitch2D.pitchInBytes = _driver_pResDesc.res.pitch2D.pitchInBytes
 *         pResDesc[0].res.pitch2D.width        = _driver_pResDesc.res.pitch2D.width
 *         pResDesc[0].res.pitch2D.height       = _driver_pResDesc.res.pitch2D.height             # <<<<<<<<<<<<<<
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR or _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:
 *         channel_size = 0
 */
    __pyx_t_4 = __pyx_v__driver_pResDesc.res.pitch2D.height;
    (__pyx_v_pResDesc[0]).res.pitch2D.height = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1741
 *         pResDesc[0].res.linear.devPtr      = <void *>_driver_pResDesc.res.linear.devPtr
 *         pResDesc[0].res.linear.sizeInBytes = _driver_pResDesc.res.linear.sizeInBytes
 *     elif _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:             # <<<<<<<<<<<<<<
 *         pResDesc[0].resType                  = cudaResourceType.cudaResourceTypePitch2D
 *         pResDesc[0].res.pitch2D.devPtr       = <void *>_driver_pResDesc.res.pitch2D.devPtr
 */
    break;
    default: break;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1747
 *         pResDesc[0].res.pitch2D.width        = _driver_pResDesc.res.pitch2D.width
 *         pResDesc[0].res.pitch2D.height       = _driver_pResDesc.res.pitch2D.height
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR or _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:             # <<<<<<<<<<<<<<
 *         channel_size = 0
 *         if _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT8:
 */
  switch (__pyx_v__driver_pResDesc.resType) {
    case CU_RESOURCE_TYPE_LINEAR:
    case CU_RESOURCE_TYPE_PITCH2D:

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1748
 *         pResDesc[0].res.pitch2D.height       = _driver_pResDesc.res.pitch2D.height
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR or _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:
 *         channel_size = 0             # <<<<<<<<<<<<<<
 *         if _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT8:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 */
    __pyx_v_channel_size = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1749
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR or _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:
 *         channel_size = 0
 *         if _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT8:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 *             channel_size = 8
 */
    switch (__pyx_v__driver_pResDesc.res.linear.format) {
      case CU_AD_FORMAT_UNSIGNED_INT8:

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1750
 *         channel_size = 0
 *         if _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT8:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned             # <<<<<<<<<<<<<<
 *             channel_size = 8
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT16:
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.f = cudaChannelFormatKindUnsigned;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1751
 *         if _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT8:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 *             channel_size = 8             # <<<<<<<<<<<<<<
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT16:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 */
      __pyx_v_channel_size = 8;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1749
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR or _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:
 *         channel_size = 0
 *         if _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT8:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 *             channel_size = 8
 */
      break;
      case CU_AD_FORMAT_UNSIGNED_INT16:

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1753
 *             channel_size = 8
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT16:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned             # <<<<<<<<<<<<<<
 *             channel_size = 16
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT32:
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.f = cudaChannelFormatKindUnsigned;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1754
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT16:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 *             channel_size = 16             # <<<<<<<<<<<<<<
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT32:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 */
      __pyx_v_channel_size = 16;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1752
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 *             channel_size = 8
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT16:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 *             channel_size = 16
 */
      break;
      case CU_AD_FORMAT_UNSIGNED_INT32:

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1756
 *             channel_size = 16
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT32:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned             # <<<<<<<<<<<<<<
 *             channel_size = 32
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT8:
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.f = cudaChannelFormatKindUnsigned;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1757
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT32:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 *             channel_size = 32             # <<<<<<<<<<<<<<
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT8:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 */
      __pyx_v_channel_size = 32;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1755
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 *             channel_size = 16
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT32:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 *             channel_size = 32
 */
      break;
      case CU_AD_FORMAT_SIGNED_INT8:

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1759
 *             channel_size = 32
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT8:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned             # <<<<<<<<<<<<<<
 *             channel_size = 8
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT16:
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.f = cudaChannelFormatKindSigned;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1760
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT8:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 *             channel_size = 8             # <<<<<<<<<<<<<<
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT16:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 */
      __pyx_v_channel_size = 8;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1758
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindUnsigned
 *             channel_size = 32
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT8:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 *             channel_size = 8
 */
      break;
      case CU_AD_FORMAT_SIGNED_INT16:

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1762
 *             channel_size = 8
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT16:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned             # <<<<<<<<<<<<<<
 *             channel_size = 16
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT32:
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.f = cudaChannelFormatKindSigned;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1763
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT16:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 *             channel_size = 16             # <<<<<<<<<<<<<<
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT32:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 */
      __pyx_v_channel_size = 16;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1761
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 *             channel_size = 8
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT16:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 *             channel_size = 16
 */
      break;
      case CU_AD_FORMAT_SIGNED_INT32:

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1765
 *             channel_size = 16
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT32:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned             # <<<<<<<<<<<<<<
 *             channel_size = 32
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_HALF:
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.f = cudaChannelFormatKindSigned;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1766
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT32:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 *             channel_size = 32             # <<<<<<<<<<<<<<
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_HALF:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindFloat
 */
      __pyx_v_channel_size = 32;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1764
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 *             channel_size = 16
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_SIGNED_INT32:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 *             channel_size = 32
 */
      break;
      case CU_AD_FORMAT_HALF:

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1768
 *             channel_size = 32
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_HALF:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindFloat             # <<<<<<<<<<<<<<
 *             channel_size = 16
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_FLOAT:
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.f = cudaChannelFormatKindFloat;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1769
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_HALF:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindFloat
 *             channel_size = 16             # <<<<<<<<<<<<<<
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_FLOAT:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindFloat
 */
      __pyx_v_channel_size = 16;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1767
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindSigned
 *             channel_size = 32
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_HALF:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindFloat
 *             channel_size = 16
 */
      break;
      case CU_AD_FORMAT_FLOAT:

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1771
 *             channel_size = 16
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_FLOAT:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindFloat             # <<<<<<<<<<<<<<
 *             channel_size = 32
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_NV12:
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.f = cudaChannelFormatKindFloat;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1772
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_FLOAT:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindFloat
 *             channel_size = 32             # <<<<<<<<<<<<<<
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_NV12:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindNV12
 */
      __pyx_v_channel_size = 32;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1770
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindFloat
 *             channel_size = 16
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_FLOAT:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindFloat
 *             channel_size = 32
 */
      break;
      case CU_AD_FORMAT_NV12:

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1774
 *             channel_size = 32
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_NV12:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindNV12             # <<<<<<<<<<<<<<
 *             channel_size = 8
 *         else:
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.f = cudaChannelFormatKindNV12;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1775
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_NV12:
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindNV12
 *             channel_size = 8             # <<<<<<<<<<<<<<
 *         else:
 *             _setLastError(cudaErrorInvalidChannelDescriptor)
 */
      __pyx_v_channel_size = 8;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1773
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindFloat
 *             channel_size = 32
 *         elif _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_NV12:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.f = cudaChannelFormatKind.cudaChannelFormatKindNV12
 *             channel_size = 8
 */
      break;
      default:

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1777
 *             channel_size = 8
 *         else:
 *             _setLastError(cudaErrorInvalidChannelDescriptor)             # <<<<<<<<<<<<<<
 *             return cudaError.cudaErrorInvalidChannelDescriptor
 *         pResDesc[0].res.linear.desc.x = 0
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidChannelDescriptor); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1777, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1778
 *         else:
 *             _setLastError(cudaErrorInvalidChannelDescriptor)
 *             return cudaError.cudaErrorInvalidChannelDescriptor             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.linear.desc.x = 0
 *         pResDesc[0].res.linear.desc.y = 0
 */
      __pyx_r = cudaErrorInvalidChannelDescriptor;
      goto __pyx_L0;
      break;
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1779
 *             _setLastError(cudaErrorInvalidChannelDescriptor)
 *             return cudaError.cudaErrorInvalidChannelDescriptor
 *         pResDesc[0].res.linear.desc.x = 0             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.linear.desc.y = 0
 *         pResDesc[0].res.linear.desc.z = 0
 */
    (__pyx_v_pResDesc[0]).res.linear.desc.x = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1780
 *             return cudaError.cudaErrorInvalidChannelDescriptor
 *         pResDesc[0].res.linear.desc.x = 0
 *         pResDesc[0].res.linear.desc.y = 0             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.linear.desc.z = 0
 *         pResDesc[0].res.linear.desc.w = 0
 */
    (__pyx_v_pResDesc[0]).res.linear.desc.y = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1781
 *         pResDesc[0].res.linear.desc.x = 0
 *         pResDesc[0].res.linear.desc.y = 0
 *         pResDesc[0].res.linear.desc.z = 0             # <<<<<<<<<<<<<<
 *         pResDesc[0].res.linear.desc.w = 0
 *         if _driver_pResDesc.res.linear.numChannels >= 4:
 */
    (__pyx_v_pResDesc[0]).res.linear.desc.z = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1782
 *         pResDesc[0].res.linear.desc.y = 0
 *         pResDesc[0].res.linear.desc.z = 0
 *         pResDesc[0].res.linear.desc.w = 0             # <<<<<<<<<<<<<<
 *         if _driver_pResDesc.res.linear.numChannels >= 4:
 *             pResDesc[0].res.linear.desc.w = channel_size
 */
    (__pyx_v_pResDesc[0]).res.linear.desc.w = 0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1783
 *         pResDesc[0].res.linear.desc.z = 0
 *         pResDesc[0].res.linear.desc.w = 0
 *         if _driver_pResDesc.res.linear.numChannels >= 4:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.w = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 3:
 */
    __pyx_t_2 = (__pyx_v__driver_pResDesc.res.linear.numChannels >= 4);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1784
 *         pResDesc[0].res.linear.desc.w = 0
 *         if _driver_pResDesc.res.linear.numChannels >= 4:
 *             pResDesc[0].res.linear.desc.w = channel_size             # <<<<<<<<<<<<<<
 *         if _driver_pResDesc.res.linear.numChannels >= 3:
 *             pResDesc[0].res.linear.desc.z = channel_size
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.w = __pyx_v_channel_size;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1783
 *         pResDesc[0].res.linear.desc.z = 0
 *         pResDesc[0].res.linear.desc.w = 0
 *         if _driver_pResDesc.res.linear.numChannels >= 4:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.w = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 3:
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1785
 *         if _driver_pResDesc.res.linear.numChannels >= 4:
 *             pResDesc[0].res.linear.desc.w = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 3:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.z = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 2:
 */
    __pyx_t_2 = (__pyx_v__driver_pResDesc.res.linear.numChannels >= 3);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1786
 *             pResDesc[0].res.linear.desc.w = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 3:
 *             pResDesc[0].res.linear.desc.z = channel_size             # <<<<<<<<<<<<<<
 *         if _driver_pResDesc.res.linear.numChannels >= 2:
 *             pResDesc[0].res.linear.desc.y = channel_size
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.z = __pyx_v_channel_size;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1785
 *         if _driver_pResDesc.res.linear.numChannels >= 4:
 *             pResDesc[0].res.linear.desc.w = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 3:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.z = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 2:
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1787
 *         if _driver_pResDesc.res.linear.numChannels >= 3:
 *             pResDesc[0].res.linear.desc.z = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 2:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.y = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 1:
 */
    __pyx_t_2 = (__pyx_v__driver_pResDesc.res.linear.numChannels >= 2);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1788
 *             pResDesc[0].res.linear.desc.z = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 2:
 *             pResDesc[0].res.linear.desc.y = channel_size             # <<<<<<<<<<<<<<
 *         if _driver_pResDesc.res.linear.numChannels >= 1:
 *             pResDesc[0].res.linear.desc.x = channel_size
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.y = __pyx_v_channel_size;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1787
 *         if _driver_pResDesc.res.linear.numChannels >= 3:
 *             pResDesc[0].res.linear.desc.z = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 2:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.y = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 1:
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1789
 *         if _driver_pResDesc.res.linear.numChannels >= 2:
 *             pResDesc[0].res.linear.desc.y = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 1:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.x = channel_size
 *         if _driver_pResDesc.res.linear.numChannels < 1 or _driver_pResDesc.res.linear.numChannels >= 5:
 */
    __pyx_t_2 = (__pyx_v__driver_pResDesc.res.linear.numChannels >= 1);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1790
 *             pResDesc[0].res.linear.desc.y = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 1:
 *             pResDesc[0].res.linear.desc.x = channel_size             # <<<<<<<<<<<<<<
 *         if _driver_pResDesc.res.linear.numChannels < 1 or _driver_pResDesc.res.linear.numChannels >= 5:
 *             _setLastError(cudaErrorInvalidChannelDescriptor)
 */
      (__pyx_v_pResDesc[0]).res.linear.desc.x = __pyx_v_channel_size;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1789
 *         if _driver_pResDesc.res.linear.numChannels >= 2:
 *             pResDesc[0].res.linear.desc.y = channel_size
 *         if _driver_pResDesc.res.linear.numChannels >= 1:             # <<<<<<<<<<<<<<
 *             pResDesc[0].res.linear.desc.x = channel_size
 *         if _driver_pResDesc.res.linear.numChannels < 1 or _driver_pResDesc.res.linear.numChannels >= 5:
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1791
 *         if _driver_pResDesc.res.linear.numChannels >= 1:
 *             pResDesc[0].res.linear.desc.x = channel_size
 *         if _driver_pResDesc.res.linear.numChannels < 1 or _driver_pResDesc.res.linear.numChannels >= 5:             # <<<<<<<<<<<<<<
 *             _setLastError(cudaErrorInvalidChannelDescriptor)
 *             return cudaError.cudaErrorInvalidChannelDescriptor
 */
    __pyx_t_5 = (__pyx_v__driver_pResDesc.res.linear.numChannels < 1);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_2 = __pyx_t_5;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_5 = (__pyx_v__driver_pResDesc.res.linear.numChannels >= 5);
    __pyx_t_2 = __pyx_t_5;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1792
 *             pResDesc[0].res.linear.desc.x = channel_size
 *         if _driver_pResDesc.res.linear.numChannels < 1 or _driver_pResDesc.res.linear.numChannels >= 5:
 *             _setLastError(cudaErrorInvalidChannelDescriptor)             # <<<<<<<<<<<<<<
 *             return cudaError.cudaErrorInvalidChannelDescriptor
 * 
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidChannelDescriptor); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1792, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1793
 *         if _driver_pResDesc.res.linear.numChannels < 1 or _driver_pResDesc.res.linear.numChannels >= 5:
 *             _setLastError(cudaErrorInvalidChannelDescriptor)
 *             return cudaError.cudaErrorInvalidChannelDescriptor             # <<<<<<<<<<<<<<
 * 
 *     if err != cudaSuccess:
 */
      __pyx_r = cudaErrorInvalidChannelDescriptor;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1791
 *         if _driver_pResDesc.res.linear.numChannels >= 1:
 *             pResDesc[0].res.linear.desc.x = channel_size
 *         if _driver_pResDesc.res.linear.numChannels < 1 or _driver_pResDesc.res.linear.numChannels >= 5:             # <<<<<<<<<<<<<<
 *             _setLastError(cudaErrorInvalidChannelDescriptor)
 *             return cudaError.cudaErrorInvalidChannelDescriptor
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1747
 *         pResDesc[0].res.pitch2D.width        = _driver_pResDesc.res.pitch2D.width
 *         pResDesc[0].res.pitch2D.height       = _driver_pResDesc.res.pitch2D.height
 *     if _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_LINEAR or _driver_pResDesc.resType == cydriver.CU_RESOURCE_TYPE_PITCH2D:             # <<<<<<<<<<<<<<
 *         channel_size = 0
 *         if _driver_pResDesc.res.linear.format == cydriver.CU_AD_FORMAT_UNSIGNED_INT8:
 */
    break;
    default: break;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1795
 *             return cudaError.cudaErrorInvalidChannelDescriptor
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1796
 * 
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1796, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1795
 *             return cudaError.cudaErrorInvalidChannelDescriptor
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1797
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1722
 *     return err
 * 
 * cdef cudaError_t _cudaGetSurfaceObjectResourceDesc(cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetSurfaceObjectResourceDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1799
 *     return err
 * 
 * cdef cudaError_t _cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphKernelNodeGetParams(cudaGraphNode_t __pyx_v_node, struct cudaKernelNodeParams *__pyx_v_pNodeParams) {
  cudaError_t __pyx_v_err;
  CUDA_KERNEL_NODE_PARAMS __pyx_v_driverNodeParams;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  unsigned int __pyx_t_4;
  void **__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphKernelNodeGetParams", __pyx_f[0], 1799, 1, __PYX_ERR(0, 1799, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1800
 * 
 * cdef cudaError_t _cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1801
 * cdef cudaError_t _cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1801, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1804
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1805
 * 
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)
 *     pNodeParams[0].func = <void*>driverNodeParams.func
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1804
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1806
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     pNodeParams[0].func = <void*>driverNodeParams.func
 *     pNodeParams[0].gridDim.x = driverNodeParams.gridDimX
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeGetParams_v2(((CUgraphNode)__pyx_v_node), (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1806, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1807
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)
 *     pNodeParams[0].func = <void*>driverNodeParams.func             # <<<<<<<<<<<<<<
 *     pNodeParams[0].gridDim.x = driverNodeParams.gridDimX
 *     pNodeParams[0].gridDim.y = driverNodeParams.gridDimY
 */
  (__pyx_v_pNodeParams[0]).func = ((void *)__pyx_v_driverNodeParams.func);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1808
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)
 *     pNodeParams[0].func = <void*>driverNodeParams.func
 *     pNodeParams[0].gridDim.x = driverNodeParams.gridDimX             # <<<<<<<<<<<<<<
 *     pNodeParams[0].gridDim.y = driverNodeParams.gridDimY
 *     pNodeParams[0].gridDim.z = driverNodeParams.gridDimZ
 */
  __pyx_t_4 = __pyx_v_driverNodeParams.gridDimX;
  (__pyx_v_pNodeParams[0]).gridDim.x = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1809
 *     pNodeParams[0].func = <void*>driverNodeParams.func
 *     pNodeParams[0].gridDim.x = driverNodeParams.gridDimX
 *     pNodeParams[0].gridDim.y = driverNodeParams.gridDimY             # <<<<<<<<<<<<<<
 *     pNodeParams[0].gridDim.z = driverNodeParams.gridDimZ
 *     pNodeParams[0].blockDim.x = driverNodeParams.blockDimX
 */
  __pyx_t_4 = __pyx_v_driverNodeParams.gridDimY;
  (__pyx_v_pNodeParams[0]).gridDim.y = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1810
 *     pNodeParams[0].gridDim.x = driverNodeParams.gridDimX
 *     pNodeParams[0].gridDim.y = driverNodeParams.gridDimY
 *     pNodeParams[0].gridDim.z = driverNodeParams.gridDimZ             # <<<<<<<<<<<<<<
 *     pNodeParams[0].blockDim.x = driverNodeParams.blockDimX
 *     pNodeParams[0].blockDim.y = driverNodeParams.blockDimY
 */
  __pyx_t_4 = __pyx_v_driverNodeParams.gridDimZ;
  (__pyx_v_pNodeParams[0]).gridDim.z = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1811
 *     pNodeParams[0].gridDim.y = driverNodeParams.gridDimY
 *     pNodeParams[0].gridDim.z = driverNodeParams.gridDimZ
 *     pNodeParams[0].blockDim.x = driverNodeParams.blockDimX             # <<<<<<<<<<<<<<
 *     pNodeParams[0].blockDim.y = driverNodeParams.blockDimY
 *     pNodeParams[0].blockDim.z = driverNodeParams.blockDimZ
 */
  __pyx_t_4 = __pyx_v_driverNodeParams.blockDimX;
  (__pyx_v_pNodeParams[0]).blockDim.x = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1812
 *     pNodeParams[0].gridDim.z = driverNodeParams.gridDimZ
 *     pNodeParams[0].blockDim.x = driverNodeParams.blockDimX
 *     pNodeParams[0].blockDim.y = driverNodeParams.blockDimY             # <<<<<<<<<<<<<<
 *     pNodeParams[0].blockDim.z = driverNodeParams.blockDimZ
 *     pNodeParams[0].sharedMemBytes = driverNodeParams.sharedMemBytes
 */
  __pyx_t_4 = __pyx_v_driverNodeParams.blockDimY;
  (__pyx_v_pNodeParams[0]).blockDim.y = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1813
 *     pNodeParams[0].blockDim.x = driverNodeParams.blockDimX
 *     pNodeParams[0].blockDim.y = driverNodeParams.blockDimY
 *     pNodeParams[0].blockDim.z = driverNodeParams.blockDimZ             # <<<<<<<<<<<<<<
 *     pNodeParams[0].sharedMemBytes = driverNodeParams.sharedMemBytes
 *     pNodeParams[0].kernelParams = driverNodeParams.kernelParams
 */
  __pyx_t_4 = __pyx_v_driverNodeParams.blockDimZ;
  (__pyx_v_pNodeParams[0]).blockDim.z = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1814
 *     pNodeParams[0].blockDim.y = driverNodeParams.blockDimY
 *     pNodeParams[0].blockDim.z = driverNodeParams.blockDimZ
 *     pNodeParams[0].sharedMemBytes = driverNodeParams.sharedMemBytes             # <<<<<<<<<<<<<<
 *     pNodeParams[0].kernelParams = driverNodeParams.kernelParams
 *     pNodeParams[0].extra = driverNodeParams.extra
 */
  __pyx_t_4 = __pyx_v_driverNodeParams.sharedMemBytes;
  (__pyx_v_pNodeParams[0]).sharedMemBytes = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1815
 *     pNodeParams[0].blockDim.z = driverNodeParams.blockDimZ
 *     pNodeParams[0].sharedMemBytes = driverNodeParams.sharedMemBytes
 *     pNodeParams[0].kernelParams = driverNodeParams.kernelParams             # <<<<<<<<<<<<<<
 *     pNodeParams[0].extra = driverNodeParams.extra
 * 
 */
  __pyx_t_5 = __pyx_v_driverNodeParams.kernelParams;
  (__pyx_v_pNodeParams[0]).kernelParams = __pyx_t_5;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1816
 *     pNodeParams[0].sharedMemBytes = driverNodeParams.sharedMemBytes
 *     pNodeParams[0].kernelParams = driverNodeParams.kernelParams
 *     pNodeParams[0].extra = driverNodeParams.extra             # <<<<<<<<<<<<<<
 * 
 *     if err != cudaSuccess:
 */
  __pyx_t_5 = __pyx_v_driverNodeParams.extra;
  (__pyx_v_pNodeParams[0]).extra = __pyx_t_5;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1818
 *     pNodeParams[0].extra = driverNodeParams.extra
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1819
 * 
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1819, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1818
 *     pNodeParams[0].extra = driverNodeParams.extra
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1820
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1799
 *     return err
 * 
 * cdef cudaError_t _cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphKernelNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1822
 *     return err
 * 
 * cdef cudaError_t _cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaExternalMemoryGetMappedBuffer(void **__pyx_v_devPtr, cudaExternalMemory_t __pyx_v_extMem, struct cudaExternalMemoryBufferDesc const *__pyx_v_bufferDesc) {
  cudaError_t __pyx_v_err;
  CUDA_EXTERNAL_MEMORY_BUFFER_DESC __pyx_v__driver_bufferDesc;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  unsigned PY_LONG_LONG __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_t_4;
  CUresult __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaExternalMemoryGetMappedBuffer", __pyx_f[0], 1822, 1, __PYX_ERR(0, 1822, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1823
 * 
 * cdef cudaError_t _cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUDA_EXTERNAL_MEMORY_BUFFER_DESC _driver_bufferDesc
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1824
 * cdef cudaError_t _cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_EXTERNAL_MEMORY_BUFFER_DESC _driver_bufferDesc
 *     memset(&_driver_bufferDesc, 0, sizeof(_driver_bufferDesc))
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1824, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1826
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUDA_EXTERNAL_MEMORY_BUFFER_DESC _driver_bufferDesc
 *     memset(&_driver_bufferDesc, 0, sizeof(_driver_bufferDesc))             # <<<<<<<<<<<<<<
 *     _driver_bufferDesc.offset = bufferDesc[0].offset
 *     _driver_bufferDesc.size = bufferDesc[0].size
 */
  (void)(memset((&__pyx_v__driver_bufferDesc), 0, (sizeof(__pyx_v__driver_bufferDesc))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1827
 *     cdef cydriver.CUDA_EXTERNAL_MEMORY_BUFFER_DESC _driver_bufferDesc
 *     memset(&_driver_bufferDesc, 0, sizeof(_driver_bufferDesc))
 *     _driver_bufferDesc.offset = bufferDesc[0].offset             # <<<<<<<<<<<<<<
 *     _driver_bufferDesc.size = bufferDesc[0].size
 *     _driver_bufferDesc.flags = bufferDesc[0].flags
 */
  __pyx_t_2 = (__pyx_v_bufferDesc[0]).offset;
  __pyx_v__driver_bufferDesc.offset = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1828
 *     memset(&_driver_bufferDesc, 0, sizeof(_driver_bufferDesc))
 *     _driver_bufferDesc.offset = bufferDesc[0].offset
 *     _driver_bufferDesc.size = bufferDesc[0].size             # <<<<<<<<<<<<<<
 *     _driver_bufferDesc.flags = bufferDesc[0].flags
 * 
 */
  __pyx_t_2 = (__pyx_v_bufferDesc[0]).size;
  __pyx_v__driver_bufferDesc.size = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1829
 *     _driver_bufferDesc.offset = bufferDesc[0].offset
 *     _driver_bufferDesc.size = bufferDesc[0].size
 *     _driver_bufferDesc.flags = bufferDesc[0].flags             # <<<<<<<<<<<<<<
 * 
 *     if err != cudaSuccess:
 */
  __pyx_t_3 = (__pyx_v_bufferDesc[0]).flags;
  __pyx_v__driver_bufferDesc.flags = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1831
 *     _driver_bufferDesc.flags = bufferDesc[0].flags
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedBuffer(<cydriver.CUdeviceptr*>devPtr, <cydriver.CUexternalMemory>extMem, &_driver_bufferDesc)
 */
  __pyx_t_4 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_4) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1832
 * 
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedBuffer(<cydriver.CUdeviceptr*>devPtr, <cydriver.CUexternalMemory>extMem, &_driver_bufferDesc)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1831
 *     _driver_bufferDesc.flags = bufferDesc[0].flags
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedBuffer(<cydriver.CUdeviceptr*>devPtr, <cydriver.CUexternalMemory>extMem, &_driver_bufferDesc)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1833
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedBuffer(<cydriver.CUdeviceptr*>devPtr, <cydriver.CUexternalMemory>extMem, &_driver_bufferDesc)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_5 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuExternalMemoryGetMappedBuffer(((CUdeviceptr *)__pyx_v_devPtr), ((CUexternalMemory)__pyx_v_extMem), (&__pyx_v__driver_bufferDesc)); if (unlikely(__pyx_t_5 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1833, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_5);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1834
 *         return err
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedBuffer(<cydriver.CUdeviceptr*>devPtr, <cydriver.CUexternalMemory>extMem, &_driver_bufferDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_4 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_4) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1835
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedBuffer(<cydriver.CUdeviceptr*>devPtr, <cydriver.CUexternalMemory>extMem, &_driver_bufferDesc)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1835, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1834
 *         return err
 *     err = <cudaError_t>cydriver._cuExternalMemoryGetMappedBuffer(<cydriver.CUdeviceptr*>devPtr, <cydriver.CUexternalMemory>extMem, &_driver_bufferDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1836
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1822
 *     return err
 * 
 * cdef cudaError_t _cudaExternalMemoryGetMappedBuffer(void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaExternalMemoryGetMappedBuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1838
 *     return err
 * 
 * cdef cudaError_t _cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaImportExternalMemory(cudaExternalMemory_t *__pyx_v_extMem_out, struct cudaExternalMemoryHandleDesc const *__pyx_v_memHandleDesc) {
  cudaError_t __pyx_v_err;
  CUDA_EXTERNAL_MEMORY_HANDLE_DESC __pyx_v__driver_memHandleDesc;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  void *__pyx_t_4;
  void const *__pyx_t_5;
  void const *__pyx_t_6;
  unsigned PY_LONG_LONG __pyx_t_7;
  unsigned int __pyx_t_8;
  CUresult __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaImportExternalMemory", __pyx_f[0], 1838, 1, __PYX_ERR(0, 1838, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1839
 * 
 * cdef cudaError_t _cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUDA_EXTERNAL_MEMORY_HANDLE_DESC _driver_memHandleDesc
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1840
 * cdef cudaError_t _cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_EXTERNAL_MEMORY_HANDLE_DESC _driver_memHandleDesc
 *     memset(&_driver_memHandleDesc, 0, sizeof(_driver_memHandleDesc))
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1840, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1842
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUDA_EXTERNAL_MEMORY_HANDLE_DESC _driver_memHandleDesc
 *     memset(&_driver_memHandleDesc, 0, sizeof(_driver_memHandleDesc))             # <<<<<<<<<<<<<<
 * 
 *     if memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueFd:
 */
  (void)(memset((&__pyx_v__driver_memHandleDesc), 0, (sizeof(__pyx_v__driver_memHandleDesc))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1844
 *     memset(&_driver_memHandleDesc, 0, sizeof(_driver_memHandleDesc))
 * 
 *     if memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueFd:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD
 *         _driver_memHandleDesc.handle.fd = memHandleDesc[0].handle.fd
 */
  __pyx_t_2 = ((__pyx_v_memHandleDesc[0]).type == cudaExternalMemoryHandleTypeOpaqueFd);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1845
 * 
 *     if memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueFd:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.fd = memHandleDesc[0].handle.fd
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32:
 */
    __pyx_v__driver_memHandleDesc.type = CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1846
 *     if memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueFd:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD
 *         _driver_memHandleDesc.handle.fd = memHandleDesc[0].handle.fd             # <<<<<<<<<<<<<<
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32
 */
    __pyx_t_3 = (__pyx_v_memHandleDesc[0]).handle.fd;
    __pyx_v__driver_memHandleDesc.handle.fd = __pyx_t_3;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1844
 *     memset(&_driver_memHandleDesc, 0, sizeof(_driver_memHandleDesc))
 * 
 *     if memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueFd:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD
 *         _driver_memHandleDesc.handle.fd = memHandleDesc[0].handle.fd
 */
    goto __pyx_L3;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1847
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD
 *         _driver_memHandleDesc.handle.fd = memHandleDesc[0].handle.fd
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
  __pyx_t_2 = ((__pyx_v_memHandleDesc[0]).type == cudaExternalMemoryHandleTypeOpaqueWin32);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1848
 *         _driver_memHandleDesc.handle.fd = memHandleDesc[0].handle.fd
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 */
    __pyx_v__driver_memHandleDesc.type = CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1849
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32Kmt:
 */
    __pyx_t_4 = (__pyx_v_memHandleDesc[0]).handle.win32.handle;
    __pyx_v__driver_memHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1850
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name             # <<<<<<<<<<<<<<
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32Kmt:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT
 */
    __pyx_t_5 = (__pyx_v_memHandleDesc[0]).handle.win32.name;
    __pyx_v__driver_memHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1847
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD
 *         _driver_memHandleDesc.handle.fd = memHandleDesc[0].handle.fd
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
    goto __pyx_L3;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1851
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32Kmt:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
  __pyx_t_2 = ((__pyx_v_memHandleDesc[0]).type == cudaExternalMemoryHandleTypeOpaqueWin32Kmt);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1852
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32Kmt:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 */
    __pyx_v__driver_memHandleDesc.type = CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1853
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32Kmt:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Heap:
 */
    __pyx_t_4 = (__pyx_v_memHandleDesc[0]).handle.win32.handle;
    __pyx_v__driver_memHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1854
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name             # <<<<<<<<<<<<<<
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Heap:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP
 */
    __pyx_t_5 = (__pyx_v_memHandleDesc[0]).handle.win32.name;
    __pyx_v__driver_memHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1851
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeOpaqueWin32Kmt:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
    goto __pyx_L3;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1855
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Heap:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
  __pyx_t_2 = ((__pyx_v_memHandleDesc[0]).type == cudaExternalMemoryHandleTypeD3D12Heap);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1856
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Heap:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 */
    __pyx_v__driver_memHandleDesc.type = CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1857
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Heap:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Resource:
 */
    __pyx_t_4 = (__pyx_v_memHandleDesc[0]).handle.win32.handle;
    __pyx_v__driver_memHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1858
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name             # <<<<<<<<<<<<<<
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Resource:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE
 */
    __pyx_t_5 = (__pyx_v_memHandleDesc[0]).handle.win32.name;
    __pyx_v__driver_memHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1855
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Heap:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
    goto __pyx_L3;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1859
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Resource:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
  __pyx_t_2 = ((__pyx_v_memHandleDesc[0]).type == cudaExternalMemoryHandleTypeD3D12Resource);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1860
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Resource:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 */
    __pyx_v__driver_memHandleDesc.type = CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1861
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Resource:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11Resource:
 */
    __pyx_t_4 = (__pyx_v_memHandleDesc[0]).handle.win32.handle;
    __pyx_v__driver_memHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1862
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name             # <<<<<<<<<<<<<<
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11Resource:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE
 */
    __pyx_t_5 = (__pyx_v_memHandleDesc[0]).handle.win32.name;
    __pyx_v__driver_memHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1859
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D12Resource:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
    goto __pyx_L3;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1863
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11Resource:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
  __pyx_t_2 = ((__pyx_v_memHandleDesc[0]).type == cudaExternalMemoryHandleTypeD3D11Resource);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1864
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11Resource:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 */
    __pyx_v__driver_memHandleDesc.type = CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1865
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11Resource:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11ResourceKmt:
 */
    __pyx_t_4 = (__pyx_v_memHandleDesc[0]).handle.win32.handle;
    __pyx_v__driver_memHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1866
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name             # <<<<<<<<<<<<<<
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11ResourceKmt:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT
 */
    __pyx_t_5 = (__pyx_v_memHandleDesc[0]).handle.win32.name;
    __pyx_v__driver_memHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1863
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11Resource:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
    goto __pyx_L3;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1867
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11ResourceKmt:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
  __pyx_t_2 = ((__pyx_v_memHandleDesc[0]).type == cudaExternalMemoryHandleTypeD3D11ResourceKmt);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1868
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11ResourceKmt:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 */
    __pyx_v__driver_memHandleDesc.type = CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1869
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11ResourceKmt:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeNvSciBuf:
 */
    __pyx_t_4 = (__pyx_v_memHandleDesc[0]).handle.win32.handle;
    __pyx_v__driver_memHandleDesc.handle.win32.handle = __pyx_t_4;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1870
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name             # <<<<<<<<<<<<<<
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeNvSciBuf:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF
 */
    __pyx_t_5 = (__pyx_v_memHandleDesc[0]).handle.win32.name;
    __pyx_v__driver_memHandleDesc.handle.win32.name = __pyx_t_5;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1867
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeD3D11ResourceKmt:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_RESOURCE_KMT
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 */
    goto __pyx_L3;
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1871
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeNvSciBuf:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF
 *         _driver_memHandleDesc.handle.nvSciBufObject = memHandleDesc[0].handle.nvSciBufObject
 */
  __pyx_t_2 = ((__pyx_v_memHandleDesc[0]).type == cudaExternalMemoryHandleTypeNvSciBuf);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1872
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeNvSciBuf:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.handle.nvSciBufObject = memHandleDesc[0].handle.nvSciBufObject
 *     _driver_memHandleDesc.size = memHandleDesc[0].size
 */
    __pyx_v__driver_memHandleDesc.type = CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1873
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeNvSciBuf:
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF
 *         _driver_memHandleDesc.handle.nvSciBufObject = memHandleDesc[0].handle.nvSciBufObject             # <<<<<<<<<<<<<<
 *     _driver_memHandleDesc.size = memHandleDesc[0].size
 *     _driver_memHandleDesc.flags = memHandleDesc[0].flags
 */
    __pyx_t_6 = (__pyx_v_memHandleDesc[0]).handle.nvSciBufObject;
    __pyx_v__driver_memHandleDesc.handle.nvSciBufObject = __pyx_t_6;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1871
 *         _driver_memHandleDesc.handle.win32.handle = memHandleDesc[0].handle.win32.handle
 *         _driver_memHandleDesc.handle.win32.name = memHandleDesc[0].handle.win32.name
 *     elif memHandleDesc[0].type == cudaExternalMemoryHandleType.cudaExternalMemoryHandleTypeNvSciBuf:             # <<<<<<<<<<<<<<
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF
 *         _driver_memHandleDesc.handle.nvSciBufObject = memHandleDesc[0].handle.nvSciBufObject
 */
  }
  __pyx_L3:;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1874
 *         _driver_memHandleDesc.type = cydriver.CUexternalMemoryHandleType_enum.CU_EXTERNAL_MEMORY_HANDLE_TYPE_NVSCIBUF
 *         _driver_memHandleDesc.handle.nvSciBufObject = memHandleDesc[0].handle.nvSciBufObject
 *     _driver_memHandleDesc.size = memHandleDesc[0].size             # <<<<<<<<<<<<<<
 *     _driver_memHandleDesc.flags = memHandleDesc[0].flags
 * 
 */
  __pyx_t_7 = (__pyx_v_memHandleDesc[0]).size;
  __pyx_v__driver_memHandleDesc.size = __pyx_t_7;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1875
 *         _driver_memHandleDesc.handle.nvSciBufObject = memHandleDesc[0].handle.nvSciBufObject
 *     _driver_memHandleDesc.size = memHandleDesc[0].size
 *     _driver_memHandleDesc.flags = memHandleDesc[0].flags             # <<<<<<<<<<<<<<
 * 
 *     if err != cudaSuccess:
 */
  __pyx_t_8 = (__pyx_v_memHandleDesc[0]).flags;
  __pyx_v__driver_memHandleDesc.flags = __pyx_t_8;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1877
 *     _driver_memHandleDesc.flags = memHandleDesc[0].flags
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuImportExternalMemory(<cydriver.CUexternalMemory*>extMem_out, &_driver_memHandleDesc)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1878
 * 
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuImportExternalMemory(<cydriver.CUexternalMemory*>extMem_out, &_driver_memHandleDesc)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1877
 *     _driver_memHandleDesc.flags = memHandleDesc[0].flags
 * 
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuImportExternalMemory(<cydriver.CUexternalMemory*>extMem_out, &_driver_memHandleDesc)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1879
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuImportExternalMemory(<cydriver.CUexternalMemory*>extMem_out, &_driver_memHandleDesc)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_9 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuImportExternalMemory(((CUexternalMemory *)__pyx_v_extMem_out), (&__pyx_v__driver_memHandleDesc)); if (unlikely(__pyx_t_9 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1879, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_9);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1880
 *         return err
 *     err = <cudaError_t>cydriver._cuImportExternalMemory(<cydriver.CUexternalMemory*>extMem_out, &_driver_memHandleDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1881
 *     err = <cudaError_t>cydriver._cuImportExternalMemory(<cydriver.CUexternalMemory*>extMem_out, &_driver_memHandleDesc)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1881, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1880
 *         return err
 *     err = <cudaError_t>cydriver._cuImportExternalMemory(<cydriver.CUexternalMemory*>extMem_out, &_driver_memHandleDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1882
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1838
 *     return err
 * 
 * cdef cudaError_t _cudaImportExternalMemory(cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaImportExternalMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1884
 *     return err
 * 
 * cdef cudaError_t _cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaCreateSurfaceObject(cudaSurfaceObject_t *__pyx_v_pSurfObject, struct cudaResourceDesc const *__pyx_v_pResDesc) {
  cudaError_t __pyx_v_err;
  CUDA_RESOURCE_DESC __pyx_v__driver_pResDesc;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaCreateSurfaceObject", __pyx_f[0], 1884, 1, __PYX_ERR(0, 1884, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1885
 * 
 * cdef cudaError_t _cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1886
 * cdef cudaError_t _cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1886, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1887
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1888
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 *     memset(&_driver_pResDesc, 0, sizeof(_driver_pResDesc))
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1887
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1890
 *         return err
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 *     memset(&_driver_pResDesc, 0, sizeof(_driver_pResDesc))             # <<<<<<<<<<<<<<
 *     err = toDriverCudaResourceDesc(&_driver_pResDesc, pResDesc)
 *     if err != cudaSuccess:
 */
  (void)(memset((&__pyx_v__driver_pResDesc), 0, (sizeof(__pyx_v__driver_pResDesc))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1891
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 *     memset(&_driver_pResDesc, 0, sizeof(_driver_pResDesc))
 *     err = toDriverCudaResourceDesc(&_driver_pResDesc, pResDesc)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverCudaResourceDesc((&__pyx_v__driver_pResDesc), __pyx_v_pResDesc); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1891, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1892
 *     memset(&_driver_pResDesc, 0, sizeof(_driver_pResDesc))
 *     err = toDriverCudaResourceDesc(&_driver_pResDesc, pResDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1893
 *     err = toDriverCudaResourceDesc(&_driver_pResDesc, pResDesc)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1893, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1894
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuSurfObjectCreate(<cydriver.CUsurfObject*>pSurfObject, &_driver_pResDesc)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1892
 *     memset(&_driver_pResDesc, 0, sizeof(_driver_pResDesc))
 *     err = toDriverCudaResourceDesc(&_driver_pResDesc, pResDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1896
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuSurfObjectCreate(<cydriver.CUsurfObject*>pSurfObject, &_driver_pResDesc)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSurfObjectCreate(((CUsurfObject *)__pyx_v_pSurfObject), (&__pyx_v__driver_pResDesc)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1896, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1897
 * 
 *     err = <cudaError_t>cydriver._cuSurfObjectCreate(<cydriver.CUsurfObject*>pSurfObject, &_driver_pResDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1898
 *     err = <cudaError_t>cydriver._cuSurfObjectCreate(<cydriver.CUsurfObject*>pSurfObject, &_driver_pResDesc)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1898, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1897
 * 
 *     err = <cudaError_t>cydriver._cuSurfObjectCreate(<cydriver.CUsurfObject*>pSurfObject, &_driver_pResDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1899
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1884
 *     return err
 * 
 * cdef cudaError_t _cudaCreateSurfaceObject(cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaCreateSurfaceObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1901
 *     return err
 * 
 * cdef cudaError_t _cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *__pyx_v_pResDesc, cudaTextureObject_t __pyx_v_texObject) {
  cudaError_t __pyx_v_err;
  CUDA_RESOURCE_DESC __pyx_v__driver_pResDesc;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetTextureObjectResourceDesc", __pyx_f[0], 1901, 1, __PYX_ERR(0, 1901, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1902
 * 
 * cdef cudaError_t _cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1903
 * cdef cudaError_t _cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1903, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1904
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1905
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 *     memset(&_driver_pResDesc, 0, sizeof(_driver_pResDesc))
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1904
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1907
 *         return err
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 *     memset(&_driver_pResDesc, 0, sizeof(_driver_pResDesc))             # <<<<<<<<<<<<<<
 *     err = toDriverCudaResourceDesc(&_driver_pResDesc, pResDesc)
 *     if err != cudaSuccess:
 */
  (void)(memset((&__pyx_v__driver_pResDesc), 0, (sizeof(__pyx_v__driver_pResDesc))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1908
 *     cdef cydriver.CUDA_RESOURCE_DESC _driver_pResDesc
 *     memset(&_driver_pResDesc, 0, sizeof(_driver_pResDesc))
 *     err = toDriverCudaResourceDesc(&_driver_pResDesc, pResDesc)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverCudaResourceDesc((&__pyx_v__driver_pResDesc), __pyx_v_pResDesc); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1908, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1909
 *     memset(&_driver_pResDesc, 0, sizeof(_driver_pResDesc))
 *     err = toDriverCudaResourceDesc(&_driver_pResDesc, pResDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1910
 *     err = toDriverCudaResourceDesc(&_driver_pResDesc, pResDesc)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1910, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1911
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUtexObject>texObject)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1909
 *     memset(&_driver_pResDesc, 0, sizeof(_driver_pResDesc))
 *     err = toDriverCudaResourceDesc(&_driver_pResDesc, pResDesc)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1913
 *         return err
 * 
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUtexObject>texObject)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectGetResourceDesc((&__pyx_v__driver_pResDesc), ((CUtexObject)__pyx_v_texObject)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1913, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1914
 * 
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUtexObject>texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1915
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUtexObject>texObject)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1915, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1914
 * 
 *     err = <cudaError_t>cydriver._cuTexObjectGetResourceDesc(&_driver_pResDesc, <cydriver.CUtexObject>texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1916
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1901
 *     return err
 * 
 * cdef cudaError_t _cudaGetTextureObjectResourceDesc(cudaResourceDesc* pResDesc, cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetTextureObjectResourceDesc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1918
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamProducerPresentFrame(__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame __pyx_v_eglframe, cudaStream_t *__pyx_v_pStream) {
  cudaError_t __pyx_v_err;
  __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame __pyx_v_cueglFrame;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEGLStreamProducerPresentFrame", __pyx_f[0], 1918, 1, __PYX_ERR(0, 1918, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1919
 * 
 * cdef cudaError_t _cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1920
 * cdef cudaError_t _cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1920, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1921
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUeglFrame cueglFrame
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1922
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUeglFrame cueglFrame
 *     err = getDriverEglFrame(&cueglFrame, eglframe)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1921
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUeglFrame cueglFrame
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1924
 *         return err
 *     cdef cydriver.CUeglFrame cueglFrame
 *     err = getDriverEglFrame(&cueglFrame, eglframe)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getDriverEglFrame((&__pyx_v_cueglFrame), __pyx_v_eglframe); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1924, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1925
 *     cdef cydriver.CUeglFrame cueglFrame
 *     err = getDriverEglFrame(&cueglFrame, eglframe)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1926
 *     err = getDriverEglFrame(&cueglFrame, eglframe)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerPresentFrame(<cydriver.CUeglStreamConnection*>conn, cueglFrame, pStream)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1926, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1927
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerPresentFrame(<cydriver.CUeglStreamConnection*>conn, cueglFrame, pStream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1925
 *     cdef cydriver.CUeglFrame cueglFrame
 *     err = getDriverEglFrame(&cueglFrame, eglframe)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1928
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerPresentFrame(<cydriver.CUeglStreamConnection*>conn, cueglFrame, pStream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerPresentFrame(((__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *)__pyx_v_conn), __pyx_v_cueglFrame, __pyx_v_pStream); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1928, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1929
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerPresentFrame(<cydriver.CUeglStreamConnection*>conn, cueglFrame, pStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1930
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerPresentFrame(<cydriver.CUeglStreamConnection*>conn, cueglFrame, pStream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1930, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1929
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerPresentFrame(<cydriver.CUeglStreamConnection*>conn, cueglFrame, pStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1931
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1918
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamProducerPresentFrame(cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEGLStreamProducerPresentFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1933
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamProducerReturnFrame(__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame *__pyx_v_eglframe, cudaStream_t *__pyx_v_pStream) {
  cudaError_t __pyx_v_err;
  __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame __pyx_v_cueglFrame;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEGLStreamProducerReturnFrame", __pyx_f[0], 1933, 1, __PYX_ERR(0, 1933, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1934
 * 
 * cdef cudaError_t _cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1935
 * cdef cudaError_t _cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1935, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1936
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     if eglframe == NULL:
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1937
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     if eglframe == NULL:
 *         err = cudaErrorInvalidResourceHandle
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1936
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     if eglframe == NULL:
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1938
 *     if err != cudaSuccess:
 *         return err
 *     if eglframe == NULL:             # <<<<<<<<<<<<<<
 *         err = cudaErrorInvalidResourceHandle
 *         _setLastError(err)
 */
  __pyx_t_2 = (__pyx_v_eglframe == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1939
 *         return err
 *     if eglframe == NULL:
 *         err = cudaErrorInvalidResourceHandle             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
    __pyx_v_err = cudaErrorInvalidResourceHandle;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1940
 *     if eglframe == NULL:
 *         err = cudaErrorInvalidResourceHandle
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUeglFrame cueglFrame
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1940, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1941
 *         err = cudaErrorInvalidResourceHandle
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUeglFrame cueglFrame
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerReturnFrame(<cydriver.CUeglStreamConnection*>conn, &cueglFrame, pStream)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1938
 *     if err != cudaSuccess:
 *         return err
 *     if eglframe == NULL:             # <<<<<<<<<<<<<<
 *         err = cudaErrorInvalidResourceHandle
 *         _setLastError(err)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1943
 *         return err
 *     cdef cydriver.CUeglFrame cueglFrame
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerReturnFrame(<cydriver.CUeglStreamConnection*>conn, &cueglFrame, pStream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerReturnFrame(((__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *)__pyx_v_conn), (&__pyx_v_cueglFrame), __pyx_v_pStream); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1943, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1944
 *     cdef cydriver.CUeglFrame cueglFrame
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerReturnFrame(<cydriver.CUeglStreamConnection*>conn, &cueglFrame, pStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1945
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerReturnFrame(<cydriver.CUeglStreamConnection*>conn, &cueglFrame, pStream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = getRuntimeEglFrame(eglframe, cueglFrame)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1945, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1946
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = getRuntimeEglFrame(eglframe, cueglFrame)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1944
 *     cdef cydriver.CUeglFrame cueglFrame
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerReturnFrame(<cydriver.CUeglStreamConnection*>conn, &cueglFrame, pStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1947
 *         _setLastError(err)
 *         return err
 *     err = getRuntimeEglFrame(eglframe, cueglFrame)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getRuntimeEglFrame(__pyx_v_eglframe, __pyx_v_cueglFrame); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1947, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1948
 *         return err
 *     err = getRuntimeEglFrame(eglframe, cueglFrame)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1949
 *     err = getRuntimeEglFrame(eglframe, cueglFrame)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     return err
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1949, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1950
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1948
 *         return err
 *     err = getRuntimeEglFrame(eglframe, cueglFrame)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1951
 *         _setLastError(err)
 *         return err
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1933
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamProducerReturnFrame(cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEGLStreamProducerReturnFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1953
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsResourceGetMappedEglFrame(__pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame *__pyx_v_eglFrame, cudaGraphicsResource_t __pyx_v_resource, unsigned int __pyx_v_index, unsigned int __pyx_v_mipLevel) {
  cudaError_t __pyx_v_err;
  __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame __pyx_v_cueglFrame;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsResourceGetMappedEglFrame", __pyx_f[0], 1953, 1, __PYX_ERR(0, 1953, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1954
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1955
 * cdef cudaError_t _cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1955, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1956
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUeglFrame cueglFrame
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1957
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUeglFrame cueglFrame
 *     memset(&cueglFrame, 0, sizeof(cueglFrame))
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1956
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUeglFrame cueglFrame
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1959
 *         return err
 *     cdef cydriver.CUeglFrame cueglFrame
 *     memset(&cueglFrame, 0, sizeof(cueglFrame))             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedEglFrame(&cueglFrame, <cydriver.CUgraphicsResource>resource, index, mipLevel)
 *     if err != cudaSuccess:
 */
  (void)(memset((&__pyx_v_cueglFrame), 0, (sizeof(__pyx_v_cueglFrame))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1960
 *     cdef cydriver.CUeglFrame cueglFrame
 *     memset(&cueglFrame, 0, sizeof(cueglFrame))
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedEglFrame(&cueglFrame, <cydriver.CUgraphicsResource>resource, index, mipLevel)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceGetMappedEglFrame((&__pyx_v_cueglFrame), ((CUgraphicsResource)__pyx_v_resource), __pyx_v_index, __pyx_v_mipLevel); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1960, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1961
 *     memset(&cueglFrame, 0, sizeof(cueglFrame))
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedEglFrame(&cueglFrame, <cydriver.CUgraphicsResource>resource, index, mipLevel)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1962
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedEglFrame(&cueglFrame, <cydriver.CUgraphicsResource>resource, index, mipLevel)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = getRuntimeEglFrame(eglFrame, cueglFrame)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1962, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1963
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = getRuntimeEglFrame(eglFrame, cueglFrame)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1961
 *     memset(&cueglFrame, 0, sizeof(cueglFrame))
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedEglFrame(&cueglFrame, <cydriver.CUgraphicsResource>resource, index, mipLevel)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1964
 *         _setLastError(err)
 *         return err
 *     err = getRuntimeEglFrame(eglFrame, cueglFrame)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getRuntimeEglFrame(__pyx_v_eglFrame, __pyx_v_cueglFrame); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1964, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1965
 *         return err
 *     err = getRuntimeEglFrame(eglFrame, cueglFrame)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1966
 *     err = getRuntimeEglFrame(eglFrame, cueglFrame)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     return err
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1966, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1967
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1965
 *         return err
 *     err = getRuntimeEglFrame(eglFrame, cueglFrame)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1968
 *         _setLastError(err)
 *         return err
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1953
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedEglFrame(cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsResourceGetMappedEglFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1970
 *     return err
 * 
 * cdef cudaError_t _cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return cudaErrorNotSupported
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaVDPAUSetVDPAUDevice(CYTHON_UNUSED int __pyx_v_device, CYTHON_UNUSED __pyx_t_4cuda_8bindings_9cyruntime_VdpDevice __pyx_v_vdpDevice, CYTHON_UNUSED __pyx_t_4cuda_8bindings_9cyruntime_VdpGetProcAddress *__pyx_v_vdpGetProcAddress) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaVDPAUSetVDPAUDevice", __pyx_f[0], 1970, 1, __PYX_ERR(0, 1970, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1971
 * 
 * cdef cudaError_t _cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return cudaErrorNotSupported             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = cudaErrorNotSupported;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1970
 *     return err
 * 
 * cdef cudaError_t _cudaVDPAUSetVDPAUDevice(int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return cudaErrorNotSupported
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaVDPAUSetVDPAUDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1973
 *     return cudaErrorNotSupported
 * 
 * cdef cudaError_t _cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *__pyx_v_memoryRequirements, cudaArray_t __pyx_v_array, int __pyx_v_device) {
  cudaError_t __pyx_v_err;
  CUDA_ARRAY_MEMORY_REQUIREMENTS __pyx_v_driverMemoryRequirements;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaArrayGetMemoryRequirements", __pyx_f[0], 1973, 1, __PYX_ERR(0, 1973, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1974
 * 
 * cdef cudaError_t _cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 *     if memoryRequirements == NULL:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1976
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 *     if memoryRequirements == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_memoryRequirements == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1977
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 *     if memoryRequirements == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1977, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1978
 *     if memoryRequirements == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     memset(memoryRequirements, 0, sizeof(memoryRequirements[0]))
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1976
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 *     if memoryRequirements == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1980
 *         return cudaErrorInvalidValue
 * 
 *     memset(memoryRequirements, 0, sizeof(memoryRequirements[0]))             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuArrayGetMemoryRequirements(&driverMemoryRequirements, <cydriver.CUarray>array, device)
 *     if err != cudaSuccess:
 */
  (void)(memset(__pyx_v_memoryRequirements, 0, (sizeof((__pyx_v_memoryRequirements[0])))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1981
 * 
 *     memset(memoryRequirements, 0, sizeof(memoryRequirements[0]))
 *     err = <cudaError_t>cydriver._cuArrayGetMemoryRequirements(&driverMemoryRequirements, <cydriver.CUarray>array, device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayGetMemoryRequirements((&__pyx_v_driverMemoryRequirements), ((CUarray)__pyx_v_array), __pyx_v_device); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1981, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1982
 *     memset(memoryRequirements, 0, sizeof(memoryRequirements[0]))
 *     err = <cudaError_t>cydriver._cuArrayGetMemoryRequirements(&driverMemoryRequirements, <cydriver.CUarray>array, device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1983
 *     err = <cudaError_t>cydriver._cuArrayGetMemoryRequirements(&driverMemoryRequirements, <cydriver.CUarray>array, device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1983, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1984
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     memoryRequirements[0].size = driverMemoryRequirements.size
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1982
 *     memset(memoryRequirements, 0, sizeof(memoryRequirements[0]))
 *     err = <cudaError_t>cydriver._cuArrayGetMemoryRequirements(&driverMemoryRequirements, <cydriver.CUarray>array, device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1986
 *         return err
 * 
 *     memoryRequirements[0].size = driverMemoryRequirements.size             # <<<<<<<<<<<<<<
 *     memoryRequirements[0].alignment = driverMemoryRequirements.alignment
 *     return cudaSuccess
 */
  __pyx_t_4 = __pyx_v_driverMemoryRequirements.size;
  (__pyx_v_memoryRequirements[0]).size = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1987
 * 
 *     memoryRequirements[0].size = driverMemoryRequirements.size
 *     memoryRequirements[0].alignment = driverMemoryRequirements.alignment             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
  __pyx_t_4 = __pyx_v_driverMemoryRequirements.alignment;
  (__pyx_v_memoryRequirements[0]).alignment = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1988
 *     memoryRequirements[0].size = driverMemoryRequirements.size
 *     memoryRequirements[0].alignment = driverMemoryRequirements.alignment
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1973
 *     return cudaErrorNotSupported
 * 
 * cdef cudaError_t _cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaArrayGetMemoryRequirements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1990
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMipmappedArrayGetMemoryRequirements(struct cudaArrayMemoryRequirements *__pyx_v_memoryRequirements, cudaMipmappedArray_t __pyx_v_mipmap, int __pyx_v_device) {
  cudaError_t __pyx_v_err;
  CUDA_ARRAY_MEMORY_REQUIREMENTS __pyx_v_driverMemoryRequirements;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMipmappedArrayGetMemoryRequirements", __pyx_f[0], 1990, 1, __PYX_ERR(0, 1990, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1991
 * 
 * cdef cudaError_t _cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 *     if memoryRequirements == NULL:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1993
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 *     if memoryRequirements == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_memoryRequirements == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1994
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 *     if memoryRequirements == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1994, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1995
 *     if memoryRequirements == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *     memset(memoryRequirements, 0, sizeof(memoryRequirements[0]))
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1993
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 *     if memoryRequirements == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1997
 *         return cudaErrorInvalidValue
 * 
 *     memset(memoryRequirements, 0, sizeof(memoryRequirements[0]))             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetMemoryRequirements(&driverMemoryRequirements, <cydriver.CUmipmappedArray>mipmap, device)
 *     if err != cudaSuccess:
 */
  (void)(memset(__pyx_v_memoryRequirements, 0, (sizeof((__pyx_v_memoryRequirements[0])))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1998
 * 
 *     memset(memoryRequirements, 0, sizeof(memoryRequirements[0]))
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetMemoryRequirements(&driverMemoryRequirements, <cydriver.CUmipmappedArray>mipmap, device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayGetMemoryRequirements((&__pyx_v_driverMemoryRequirements), ((CUmipmappedArray)__pyx_v_mipmap), __pyx_v_device); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 1998, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1999
 *     memset(memoryRequirements, 0, sizeof(memoryRequirements[0]))
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetMemoryRequirements(&driverMemoryRequirements, <cydriver.CUmipmappedArray>mipmap, device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2000
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetMemoryRequirements(&driverMemoryRequirements, <cydriver.CUmipmappedArray>mipmap, device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2000, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2001
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     memoryRequirements[0].size = driverMemoryRequirements.size
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1999
 *     memset(memoryRequirements, 0, sizeof(memoryRequirements[0]))
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetMemoryRequirements(&driverMemoryRequirements, <cydriver.CUmipmappedArray>mipmap, device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2003
 *         return err
 * 
 *     memoryRequirements[0].size = driverMemoryRequirements.size             # <<<<<<<<<<<<<<
 *     memoryRequirements[0].alignment = driverMemoryRequirements.alignment
 *     return cudaSuccess
 */
  __pyx_t_4 = __pyx_v_driverMemoryRequirements.size;
  (__pyx_v_memoryRequirements[0]).size = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2004
 * 
 *     memoryRequirements[0].size = driverMemoryRequirements.size
 *     memoryRequirements[0].alignment = driverMemoryRequirements.alignment             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
  __pyx_t_4 = __pyx_v_driverMemoryRequirements.alignment;
  (__pyx_v_memoryRequirements[0]).alignment = __pyx_t_4;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2005
 *     memoryRequirements[0].size = driverMemoryRequirements.size
 *     memoryRequirements[0].alignment = driverMemoryRequirements.alignment
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1990
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUDA_ARRAY_MEMORY_REQUIREMENTS driverMemoryRequirements
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMipmappedArrayGetMemoryRequirements", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2007
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetAttribute(cudaStream_t __pyx_v_hStream, __pyx_t_4cuda_8bindings_9cyruntime_cudaStreamAttrID __pyx_v_attr, __pyx_t_4cuda_8bindings_9cyruntime_cudaStreamAttrValue *__pyx_v_value_out) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamGetAttribute", __pyx_f[0], 2007, 1, __PYX_ERR(0, 2007, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2008
 * 
 * cdef cudaError_t _cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2009
 * cdef cudaError_t _cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2009, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2010
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value_out)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2011
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamGetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2010
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value_out)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2012
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetAttribute(((CUstream)__pyx_v_hStream), ((CUstreamAttrID)__pyx_v_attr), ((CUstreamAttrValue *)__pyx_v_value_out)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2012, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2013
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2014
 *     err = <cudaError_t>cydriver._cuStreamGetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2014, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2013
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2015
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2007
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaStreamGetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2017
 *     return err
 * 
 * cdef cudaError_t _cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamSetAttribute(cudaStream_t __pyx_v_hStream, __pyx_t_4cuda_8bindings_9cyruntime_cudaStreamAttrID __pyx_v_attr, __pyx_t_4cuda_8bindings_9cyruntime_cudaStreamAttrValue const *__pyx_v_value) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamSetAttribute", __pyx_f[0], 2017, 1, __PYX_ERR(0, 2017, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2018
 * 
 * cdef cudaError_t _cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2019
 * cdef cudaError_t _cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2019, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2020
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamSetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2021
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamSetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2020
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamSetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2022
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamSetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamSetAttribute(((CUstream)__pyx_v_hStream), ((CUstreamAttrID)__pyx_v_attr), ((CUstreamAttrValue *)__pyx_v_value)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2022, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2023
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamSetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2024
 *     err = <cudaError_t>cydriver._cuStreamSetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2024, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2023
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamSetAttribute(<cydriver.CUstream>hStream, <cydriver.CUstreamAttrID>attr, <cydriver.CUstreamAttrValue*>value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2025
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2017
 *     return err
 * 
 * cdef cudaError_t _cudaStreamSetAttribute(cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2027
 *     return err
 * 
 * cdef cudaError_t _cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphKernelNodeGetAttribute(cudaGraphNode_t __pyx_v_hNode, __pyx_t_4cuda_8bindings_9cyruntime_cudaKernelNodeAttrID __pyx_v_attr, __pyx_t_4cuda_8bindings_9cyruntime_cudaKernelNodeAttrValue *__pyx_v_value_out) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphKernelNodeGetAttribute", __pyx_f[0], 2027, 1, __PYX_ERR(0, 2027, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2028
 * 
 * cdef cudaError_t _cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2029
 * cdef cudaError_t _cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2029, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2030
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value_out)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2031
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2030
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value_out)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2032
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeGetAttribute(((CUgraphNode)__pyx_v_hNode), ((CUkernelNodeAttrID)__pyx_v_attr), ((CUkernelNodeAttrValue *)__pyx_v_value_out)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2032, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2033
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2034
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2034, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2033
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeGetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2035
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2027
 *     return err
 * 
 * cdef cudaError_t _cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphKernelNodeGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2037
 *     return err
 * 
 * cdef cudaError_t _cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphKernelNodeSetAttribute(cudaGraphNode_t __pyx_v_hNode, __pyx_t_4cuda_8bindings_9cyruntime_cudaKernelNodeAttrID __pyx_v_attr, __pyx_t_4cuda_8bindings_9cyruntime_cudaKernelNodeAttrValue const *__pyx_v_value) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphKernelNodeSetAttribute", __pyx_f[0], 2037, 1, __PYX_ERR(0, 2037, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2038
 * 
 * cdef cudaError_t _cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2039
 * cdef cudaError_t _cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2039, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2040
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2041
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2040
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2042
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeSetAttribute(((CUgraphNode)__pyx_v_hNode), ((CUkernelNodeAttrID)__pyx_v_attr), ((CUkernelNodeAttrValue *)__pyx_v_value)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2042, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2043
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2044
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2044, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2043
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetAttribute(<cydriver.CUgraphNode>hNode, <cydriver.CUkernelNodeAttrID>attr, <cydriver.CUkernelNodeAttrValue*>value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2045
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2037
 *     return err
 * 
 * cdef cudaError_t _cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphKernelNodeSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2047
 *     return err
 * 
 * cdef cudaError_t _cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaVDPAUGetDevice(int *__pyx_v_device, __pyx_t_4cuda_8bindings_9cyruntime_VdpDevice __pyx_v_vdpDevice, __pyx_t_4cuda_8bindings_9cyruntime_VdpGetProcAddress *__pyx_v_vdpGetProcAddress) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaVDPAUGetDevice", __pyx_f[0], 2047, 1, __PYX_ERR(0, 2047, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2048
 * 
 * cdef cudaError_t _cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2049
 * cdef cudaError_t _cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2049, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2050
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuVDPAUGetDevice(<cydriver.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2051
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuVDPAUGetDevice(<cydriver.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2050
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuVDPAUGetDevice(<cydriver.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2052
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuVDPAUGetDevice(<cydriver.CUdevice*>device, vdpDevice, vdpGetProcAddress)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuVDPAUGetDevice(((CUdevice *)__pyx_v_device), __pyx_v_vdpDevice, __pyx_v_vdpGetProcAddress); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2052, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2053
 *         return err
 *     err = <cudaError_t>cydriver._cuVDPAUGetDevice(<cydriver.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2054
 *     err = <cudaError_t>cydriver._cuVDPAUGetDevice(<cydriver.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2054, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2053
 *         return err
 *     err = <cudaError_t>cydriver._cuVDPAUGetDevice(<cydriver.CUdevice*>device, vdpDevice, vdpGetProcAddress)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2055
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2047
 *     return err
 * 
 * cdef cudaError_t _cudaVDPAUGetDevice(int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaVDPAUGetDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2057
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsVDPAURegisterVideoSurface(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_8bindings_9cyruntime_VdpVideoSurface __pyx_v_vdpSurface, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsVDPAURegisterVideoSurface", __pyx_f[0], 2057, 1, __PYX_ERR(0, 2057, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2058
 * 
 * cdef cudaError_t _cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2059
 * cdef cudaError_t _cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2059, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2060
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterVideoSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2061
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterVideoSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2060
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterVideoSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2062
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterVideoSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsVDPAURegisterVideoSurface(((CUgraphicsResource *)__pyx_v_resource), __pyx_v_vdpSurface, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2062, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2063
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterVideoSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2064
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterVideoSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2064, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2063
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterVideoSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2065
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2057
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsVDPAURegisterVideoSurface(cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsVDPAURegisterVideoSurface", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2067
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsVDPAURegisterOutputSurface(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_8bindings_9cyruntime_VdpOutputSurface __pyx_v_vdpSurface, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsVDPAURegisterOutputSurface", __pyx_f[0], 2067, 1, __PYX_ERR(0, 2067, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2068
 * 
 * cdef cudaError_t _cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2069
 * cdef cudaError_t _cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2069, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2070
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterOutputSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2071
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterOutputSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2070
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterOutputSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2072
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterOutputSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsVDPAURegisterOutputSurface(((CUgraphicsResource *)__pyx_v_resource), __pyx_v_vdpSurface, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2072, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2073
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterOutputSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2074
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterOutputSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2074, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2073
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsVDPAURegisterOutputSurface(<cydriver.CUgraphicsResource*>resource, vdpSurface, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2075
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2067
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsVDPAURegisterOutputSurface(cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsVDPAURegisterOutputSurface", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2077
 *     return err
 * 
 * cdef cudaError_t _cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGLGetDevices(unsigned int *__pyx_v_pCudaDeviceCount, int *__pyx_v_pCudaDevices, unsigned int __pyx_v_cudaDeviceCount, enum __pyx_t_4cuda_8bindings_9cyruntime_cudaGLDeviceList __pyx_v_deviceList) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGLGetDevices", __pyx_f[0], 2077, 1, __PYX_ERR(0, 2077, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2078
 * 
 * cdef cudaError_t _cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2079
 * cdef cudaError_t _cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2079, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2080
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGLGetDevices_v2(pCudaDeviceCount, <cydriver.CUdevice*>pCudaDevices, cudaDeviceCount, <cydriver.CUGLDeviceList>deviceList)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2081
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGLGetDevices_v2(pCudaDeviceCount, <cydriver.CUdevice*>pCudaDevices, cudaDeviceCount, <cydriver.CUGLDeviceList>deviceList)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2080
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGLGetDevices_v2(pCudaDeviceCount, <cydriver.CUdevice*>pCudaDevices, cudaDeviceCount, <cydriver.CUGLDeviceList>deviceList)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2082
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGLGetDevices_v2(pCudaDeviceCount, <cydriver.CUdevice*>pCudaDevices, cudaDeviceCount, <cydriver.CUGLDeviceList>deviceList)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGLGetDevices_v2(__pyx_v_pCudaDeviceCount, ((CUdevice *)__pyx_v_pCudaDevices), __pyx_v_cudaDeviceCount, ((__pyx_t_4cuda_8bindings_8cydriver_CUGLDeviceList)__pyx_v_deviceList)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2082, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2083
 *         return err
 *     err = <cudaError_t>cydriver._cuGLGetDevices_v2(pCudaDeviceCount, <cydriver.CUdevice*>pCudaDevices, cudaDeviceCount, <cydriver.CUGLDeviceList>deviceList)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2084
 *     err = <cudaError_t>cydriver._cuGLGetDevices_v2(pCudaDeviceCount, <cydriver.CUdevice*>pCudaDevices, cudaDeviceCount, <cydriver.CUGLDeviceList>deviceList)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2084, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2083
 *         return err
 *     err = <cudaError_t>cydriver._cuGLGetDevices_v2(pCudaDeviceCount, <cydriver.CUdevice*>pCudaDevices, cudaDeviceCount, <cydriver.CUGLDeviceList>deviceList)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2085
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2077
 *     return err
 * 
 * cdef cudaError_t _cudaGLGetDevices(unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGLGetDevices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2087
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsGLRegisterImage(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_8bindings_9cyruntime_GLuint __pyx_v_image, __pyx_t_4cuda_8bindings_9cyruntime_GLenum __pyx_v_target, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsGLRegisterImage", __pyx_f[0], 2087, 1, __PYX_ERR(0, 2087, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2088
 * 
 * cdef cudaError_t _cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2089
 * cdef cudaError_t _cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2089, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2090
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterImage(<cydriver.CUgraphicsResource*>resource, image, target, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2091
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterImage(<cydriver.CUgraphicsResource*>resource, image, target, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2090
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterImage(<cydriver.CUgraphicsResource*>resource, image, target, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2092
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterImage(<cydriver.CUgraphicsResource*>resource, image, target, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsGLRegisterImage(((CUgraphicsResource *)__pyx_v_resource), __pyx_v_image, __pyx_v_target, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2092, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2093
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterImage(<cydriver.CUgraphicsResource*>resource, image, target, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2094
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterImage(<cydriver.CUgraphicsResource*>resource, image, target, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2094, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2093
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterImage(<cydriver.CUgraphicsResource*>resource, image, target, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2095
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2087
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsGLRegisterImage(cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsGLRegisterImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2097
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsGLRegisterBuffer(struct cudaGraphicsResource **__pyx_v_resource, __pyx_t_4cuda_8bindings_9cyruntime_GLuint __pyx_v_buffer, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsGLRegisterBuffer", __pyx_f[0], 2097, 1, __PYX_ERR(0, 2097, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2098
 * 
 * cdef cudaError_t _cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2099
 * cdef cudaError_t _cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2099, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2100
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterBuffer(<cydriver.CUgraphicsResource*>resource, buffer, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2101
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterBuffer(<cydriver.CUgraphicsResource*>resource, buffer, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2100
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterBuffer(<cydriver.CUgraphicsResource*>resource, buffer, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2102
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterBuffer(<cydriver.CUgraphicsResource*>resource, buffer, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsGLRegisterBuffer(((CUgraphicsResource *)__pyx_v_resource), __pyx_v_buffer, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2102, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2103
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterBuffer(<cydriver.CUgraphicsResource*>resource, buffer, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2104
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterBuffer(<cydriver.CUgraphicsResource*>resource, buffer, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2104, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2103
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsGLRegisterBuffer(<cydriver.CUgraphicsResource*>resource, buffer, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2105
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceSynchronize() except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2097
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsGLRegisterBuffer(cudaGraphicsResource** resource, GLuint buffer, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsGLRegisterBuffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2107
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceSynchronize() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSynchronize(void) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceSynchronize", __pyx_f[0], 2107, 1, __PYX_ERR(0, 2107, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2108
 * 
 * cdef cudaError_t _cudaDeviceSynchronize() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2109
 * cdef cudaError_t _cudaDeviceSynchronize() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2109, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2110
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSynchronize()
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2111
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxSynchronize()
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2110
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSynchronize()
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2112
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSynchronize()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSynchronize(); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2112, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2113
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSynchronize()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2114
 *     err = <cudaError_t>cydriver._cuCtxSynchronize()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2114, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2113
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSynchronize()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2115
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceSetLimit(cudaLimit limit, size_t value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2107
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceSynchronize() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceSynchronize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2117
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceSetLimit(cudaLimit limit, size_t value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSetLimit(enum cudaLimit __pyx_v_limit, size_t __pyx_v_value) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceSetLimit", __pyx_f[0], 2117, 1, __PYX_ERR(0, 2117, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2118
 * 
 * cdef cudaError_t _cudaDeviceSetLimit(cudaLimit limit, size_t value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2119
 * cdef cudaError_t _cudaDeviceSetLimit(cudaLimit limit, size_t value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2119, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2120
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetLimit(<cydriver.CUlimit>limit, value)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2121
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxSetLimit(<cydriver.CUlimit>limit, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2120
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetLimit(<cydriver.CUlimit>limit, value)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2122
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetLimit(<cydriver.CUlimit>limit, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetLimit(((CUlimit)__pyx_v_limit), __pyx_v_value); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2122, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2123
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetLimit(<cydriver.CUlimit>limit, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2124
 *     err = <cudaError_t>cydriver._cuCtxSetLimit(<cydriver.CUlimit>limit, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2124, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2123
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetLimit(<cydriver.CUlimit>limit, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2125
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2117
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceSetLimit(cudaLimit limit, size_t value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceSetLimit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2127
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetLimit(size_t *__pyx_v_pValue, enum cudaLimit __pyx_v_limit) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetLimit", __pyx_f[0], 2127, 1, __PYX_ERR(0, 2127, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2128
 * 
 * cdef cudaError_t _cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2129
 * cdef cudaError_t _cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2129, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2130
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetLimit(pValue, <cydriver.CUlimit>limit)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2131
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxGetLimit(pValue, <cydriver.CUlimit>limit)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2130
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetLimit(pValue, <cydriver.CUlimit>limit)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2132
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetLimit(pValue, <cydriver.CUlimit>limit)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetLimit(__pyx_v_pValue, ((CUlimit)__pyx_v_limit)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2132, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2133
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetLimit(pValue, <cydriver.CUlimit>limit)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2134
 *     err = <cudaError_t>cydriver._cuCtxGetLimit(pValue, <cydriver.CUlimit>limit)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2134, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2133
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetLimit(pValue, <cydriver.CUlimit>limit)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2135
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2127
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetLimit(size_t* pValue, cudaLimit limit) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetLimit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2137
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetCacheConfig(enum cudaFuncCache *__pyx_v_pCacheConfig) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetCacheConfig", __pyx_f[0], 2137, 1, __PYX_ERR(0, 2137, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2138
 * 
 * cdef cudaError_t _cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2139
 * cdef cudaError_t _cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2139, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2140
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCacheConfig(<cydriver.CUfunc_cache*>pCacheConfig)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2141
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxGetCacheConfig(<cydriver.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2140
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCacheConfig(<cydriver.CUfunc_cache*>pCacheConfig)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2142
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCacheConfig(<cydriver.CUfunc_cache*>pCacheConfig)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCacheConfig(((CUfunc_cache *)__pyx_v_pCacheConfig)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2142, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2143
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCacheConfig(<cydriver.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2144
 *     err = <cudaError_t>cydriver._cuCtxGetCacheConfig(<cydriver.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2144, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2143
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCacheConfig(<cydriver.CUfunc_cache*>pCacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2145
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2137
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetCacheConfig(cudaFuncCache* pCacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetCacheConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2147
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetStreamPriorityRange(int *__pyx_v_leastPriority, int *__pyx_v_greatestPriority) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetStreamPriorityRange", __pyx_f[0], 2147, 1, __PYX_ERR(0, 2147, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2148
 * 
 * cdef cudaError_t _cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2149
 * cdef cudaError_t _cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2149, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2150
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2151
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2150
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2152
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetStreamPriorityRange(__pyx_v_leastPriority, __pyx_v_greatestPriority); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2152, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2153
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2154
 *     err = <cudaError_t>cydriver._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2154, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2153
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetStreamPriorityRange(leastPriority, greatestPriority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2155
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2147
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetStreamPriorityRange(int* leastPriority, int* greatestPriority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetStreamPriorityRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2157
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSetCacheConfig(enum cudaFuncCache __pyx_v_cacheConfig) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceSetCacheConfig", __pyx_f[0], 2157, 1, __PYX_ERR(0, 2157, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2158
 * 
 * cdef cudaError_t _cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2159
 * cdef cudaError_t _cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2159, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2160
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetCacheConfig(<cydriver.CUfunc_cache>cacheConfig)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2161
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxSetCacheConfig(<cydriver.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2160
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetCacheConfig(<cydriver.CUfunc_cache>cacheConfig)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2162
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetCacheConfig(<cydriver.CUfunc_cache>cacheConfig)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetCacheConfig(((CUfunc_cache)__pyx_v_cacheConfig)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2162, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2163
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetCacheConfig(<cydriver.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2164
 *     err = <cudaError_t>cydriver._cuCtxSetCacheConfig(<cydriver.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2164, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2163
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxSetCacheConfig(<cydriver.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2165
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2157
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceSetCacheConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2167
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *__pyx_v_pConfig) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetSharedMemConfig", __pyx_f[0], 2167, 1, __PYX_ERR(0, 2167, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2168
 * 
 * cdef cudaError_t _cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2169
 * cdef cudaError_t _cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2169, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2170
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetSharedMemConfig(<cydriver.CUsharedconfig*>pConfig)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2171
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxGetSharedMemConfig(<cydriver.CUsharedconfig*>pConfig)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2170
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetSharedMemConfig(<cydriver.CUsharedconfig*>pConfig)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2172
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetSharedMemConfig(<cydriver.CUsharedconfig*>pConfig)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetSharedMemConfig(((CUsharedconfig *)__pyx_v_pConfig)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2172, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2173
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetSharedMemConfig(<cydriver.CUsharedconfig*>pConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2174
 *     err = <cudaError_t>cydriver._cuCtxGetSharedMemConfig(<cydriver.CUsharedconfig*>pConfig)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2174, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2173
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetSharedMemConfig(<cydriver.CUsharedconfig*>pConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2175
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2167
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetSharedMemConfig(cudaSharedMemConfig* pConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetSharedMemConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2177
 *     return err
 * 
 * cdef cudaError_t _cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaIpcGetEventHandle(cudaIpcEventHandle_t *__pyx_v_handle, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaIpcGetEventHandle", __pyx_f[0], 2177, 1, __PYX_ERR(0, 2177, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2178
 * 
 * cdef cudaError_t _cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2179
 * cdef cudaError_t _cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2179, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2180
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcGetEventHandle(<cydriver.CUipcEventHandle*>handle, <cydriver.CUevent>event)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2181
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuIpcGetEventHandle(<cydriver.CUipcEventHandle*>handle, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2180
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcGetEventHandle(<cydriver.CUipcEventHandle*>handle, <cydriver.CUevent>event)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2182
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcGetEventHandle(<cydriver.CUipcEventHandle*>handle, <cydriver.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcGetEventHandle(((CUipcEventHandle *)__pyx_v_handle), ((CUevent)__pyx_v_event)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2182, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2183
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcGetEventHandle(<cydriver.CUipcEventHandle*>handle, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2184
 *     err = <cudaError_t>cydriver._cuIpcGetEventHandle(<cydriver.CUipcEventHandle*>handle, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2184, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2183
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcGetEventHandle(<cydriver.CUipcEventHandle*>handle, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2185
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2177
 *     return err
 * 
 * cdef cudaError_t _cudaIpcGetEventHandle(cudaIpcEventHandle_t* handle, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaIpcGetEventHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2187
 *     return err
 * 
 * cdef cudaError_t _cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaIpcOpenEventHandle(cudaEvent_t *__pyx_v_event, cudaIpcEventHandle_t __pyx_v_handle) {
  cudaError_t __pyx_v_err;
  CUipcEventHandle __pyx_v__driver_handle;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaIpcOpenEventHandle", __pyx_f[0], 2187, 1, __PYX_ERR(0, 2187, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2188
 * 
 * cdef cudaError_t _cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUipcEventHandle _driver_handle
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2189
 * cdef cudaError_t _cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUipcEventHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2189, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2191
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUipcEventHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  (void)(memcpy((&__pyx_v__driver_handle), (&__pyx_v_handle), (sizeof(__pyx_v__driver_handle))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2192
 *     cdef cydriver.CUipcEventHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcOpenEventHandle(<cydriver.CUevent*>event, _driver_handle)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2193
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuIpcOpenEventHandle(<cydriver.CUevent*>event, _driver_handle)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2192
 *     cdef cydriver.CUipcEventHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcOpenEventHandle(<cydriver.CUevent*>event, _driver_handle)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2194
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcOpenEventHandle(<cydriver.CUevent*>event, _driver_handle)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcOpenEventHandle(((CUevent *)__pyx_v_event), __pyx_v__driver_handle); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2194, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2195
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcOpenEventHandle(<cydriver.CUevent*>event, _driver_handle)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2196
 *     err = <cudaError_t>cydriver._cuIpcOpenEventHandle(<cydriver.CUevent*>event, _driver_handle)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2196, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2195
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcOpenEventHandle(<cydriver.CUevent*>event, _driver_handle)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2197
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2187
 *     return err
 * 
 * cdef cudaError_t _cudaIpcOpenEventHandle(cudaEvent_t* event, cudaIpcEventHandle_t handle) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaIpcOpenEventHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2199
 *     return err
 * 
 * cdef cudaError_t _cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaIpcGetMemHandle(cudaIpcMemHandle_t *__pyx_v_handle, void *__pyx_v_devPtr) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaIpcGetMemHandle", __pyx_f[0], 2199, 1, __PYX_ERR(0, 2199, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2200
 * 
 * cdef cudaError_t _cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2201
 * cdef cudaError_t _cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2201, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2202
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcGetMemHandle(<cydriver.CUipcMemHandle*>handle, <cydriver.CUdeviceptr>devPtr)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2203
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuIpcGetMemHandle(<cydriver.CUipcMemHandle*>handle, <cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2202
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcGetMemHandle(<cydriver.CUipcMemHandle*>handle, <cydriver.CUdeviceptr>devPtr)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2204
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcGetMemHandle(<cydriver.CUipcMemHandle*>handle, <cydriver.CUdeviceptr>devPtr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcGetMemHandle(((CUipcMemHandle *)__pyx_v_handle), ((CUdeviceptr)__pyx_v_devPtr)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2204, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2205
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcGetMemHandle(<cydriver.CUipcMemHandle*>handle, <cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2206
 *     err = <cudaError_t>cydriver._cuIpcGetMemHandle(<cydriver.CUipcMemHandle*>handle, <cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2206, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2205
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcGetMemHandle(<cydriver.CUipcMemHandle*>handle, <cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2207
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2199
 *     return err
 * 
 * cdef cudaError_t _cudaIpcGetMemHandle(cudaIpcMemHandle_t* handle, void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaIpcGetMemHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2209
 *     return err
 * 
 * cdef cudaError_t _cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaIpcOpenMemHandle(void **__pyx_v_devPtr, cudaIpcMemHandle_t __pyx_v_handle, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  CUipcMemHandle __pyx_v__driver_handle;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaIpcOpenMemHandle", __pyx_f[0], 2209, 1, __PYX_ERR(0, 2209, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2210
 * 
 * cdef cudaError_t _cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUipcMemHandle _driver_handle
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2211
 * cdef cudaError_t _cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUipcMemHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2211, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2213
 *     err = m_global.lazyInitContextState()
 *     cdef cydriver.CUipcMemHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  (void)(memcpy((&__pyx_v__driver_handle), (&__pyx_v_handle), (sizeof(__pyx_v__driver_handle))));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2214
 *     cdef cydriver.CUipcMemHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcOpenMemHandle_v2(<cydriver.CUdeviceptr*>devPtr, _driver_handle, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2215
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuIpcOpenMemHandle_v2(<cydriver.CUdeviceptr*>devPtr, _driver_handle, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2214
 *     cdef cydriver.CUipcMemHandle _driver_handle
 *     memcpy(&_driver_handle, &handle, sizeof(_driver_handle))
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcOpenMemHandle_v2(<cydriver.CUdeviceptr*>devPtr, _driver_handle, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2216
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcOpenMemHandle_v2(<cydriver.CUdeviceptr*>devPtr, _driver_handle, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcOpenMemHandle_v2(((CUdeviceptr *)__pyx_v_devPtr), __pyx_v__driver_handle, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2216, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2217
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcOpenMemHandle_v2(<cydriver.CUdeviceptr*>devPtr, _driver_handle, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2218
 *     err = <cudaError_t>cydriver._cuIpcOpenMemHandle_v2(<cydriver.CUdeviceptr*>devPtr, _driver_handle, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2218, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2217
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcOpenMemHandle_v2(<cydriver.CUdeviceptr*>devPtr, _driver_handle, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2219
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaIpcCloseMemHandle(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2209
 *     return err
 * 
 * cdef cudaError_t _cudaIpcOpenMemHandle(void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaIpcOpenMemHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2221
 *     return err
 * 
 * cdef cudaError_t _cudaIpcCloseMemHandle(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaIpcCloseMemHandle(void *__pyx_v_devPtr) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaIpcCloseMemHandle", __pyx_f[0], 2221, 1, __PYX_ERR(0, 2221, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2222
 * 
 * cdef cudaError_t _cudaIpcCloseMemHandle(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2223
 * cdef cudaError_t _cudaIpcCloseMemHandle(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2223, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2224
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcCloseMemHandle(<cydriver.CUdeviceptr>devPtr)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2225
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuIpcCloseMemHandle(<cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2224
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcCloseMemHandle(<cydriver.CUdeviceptr>devPtr)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2226
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcCloseMemHandle(<cydriver.CUdeviceptr>devPtr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcCloseMemHandle(((CUdeviceptr)__pyx_v_devPtr)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2226, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2227
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcCloseMemHandle(<cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2228
 *     err = <cudaError_t>cydriver._cuIpcCloseMemHandle(<cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2228, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2227
 *         return err
 *     err = <cudaError_t>cydriver._cuIpcCloseMemHandle(<cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2229
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2221
 *     return err
 * 
 * cdef cudaError_t _cudaIpcCloseMemHandle(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaIpcCloseMemHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2231
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceFlushGPUDirectRDMAWrites(enum cudaFlushGPUDirectRDMAWritesTarget __pyx_v_target, enum cudaFlushGPUDirectRDMAWritesScope __pyx_v_scope) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceFlushGPUDirectRDMAWrites", __pyx_f[0], 2231, 1, __PYX_ERR(0, 2231, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2232
 * 
 * cdef cudaError_t _cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2233
 * cdef cudaError_t _cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2233, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2234
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFlushGPUDirectRDMAWrites(<cydriver.CUflushGPUDirectRDMAWritesTarget>target, <cydriver.CUflushGPUDirectRDMAWritesScope>scope)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2235
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFlushGPUDirectRDMAWrites(<cydriver.CUflushGPUDirectRDMAWritesTarget>target, <cydriver.CUflushGPUDirectRDMAWritesScope>scope)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2234
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFlushGPUDirectRDMAWrites(<cydriver.CUflushGPUDirectRDMAWritesTarget>target, <cydriver.CUflushGPUDirectRDMAWritesScope>scope)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2236
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuFlushGPUDirectRDMAWrites(<cydriver.CUflushGPUDirectRDMAWritesTarget>target, <cydriver.CUflushGPUDirectRDMAWritesScope>scope)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFlushGPUDirectRDMAWrites(((CUflushGPUDirectRDMAWritesTarget)__pyx_v_target), ((CUflushGPUDirectRDMAWritesScope)__pyx_v_scope)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2236, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2237
 *         return err
 *     err = <cudaError_t>cydriver._cuFlushGPUDirectRDMAWrites(<cydriver.CUflushGPUDirectRDMAWritesTarget>target, <cydriver.CUflushGPUDirectRDMAWritesScope>scope)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2238
 *     err = <cudaError_t>cydriver._cuFlushGPUDirectRDMAWrites(<cydriver.CUflushGPUDirectRDMAWritesTarget>target, <cydriver.CUflushGPUDirectRDMAWritesScope>scope)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2238, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2237
 *         return err
 *     err = <cudaError_t>cydriver._cuFlushGPUDirectRDMAWrites(<cydriver.CUflushGPUDirectRDMAWritesTarget>target, <cydriver.CUflushGPUDirectRDMAWritesScope>scope)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2239
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2231
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceFlushGPUDirectRDMAWrites", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2241
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetDefaultMemPool(cudaMemPool_t *__pyx_v_memPool, int __pyx_v_device) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetDefaultMemPool", __pyx_f[0], 2241, 1, __PYX_ERR(0, 2241, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2242
 * 
 * cdef cudaError_t _cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2243
 * cdef cudaError_t _cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2243, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2244
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetDefaultMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2245
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceGetDefaultMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2244
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetDefaultMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2246
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetDefaultMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetDefaultMemPool(((CUmemoryPool *)__pyx_v_memPool), ((CUdevice)__pyx_v_device)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2246, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2247
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetDefaultMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2248
 *     err = <cudaError_t>cydriver._cuDeviceGetDefaultMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2248, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2247
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetDefaultMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2249
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2241
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetDefaultMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetDefaultMemPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2251
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSetMemPool(int __pyx_v_device, cudaMemPool_t __pyx_v_memPool) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceSetMemPool", __pyx_f[0], 2251, 1, __PYX_ERR(0, 2251, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2252
 * 
 * cdef cudaError_t _cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2253
 * cdef cudaError_t _cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2253, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2254
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceSetMemPool(<cydriver.CUdevice>device, <cydriver.CUmemoryPool>memPool)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2255
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceSetMemPool(<cydriver.CUdevice>device, <cydriver.CUmemoryPool>memPool)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2254
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceSetMemPool(<cydriver.CUdevice>device, <cydriver.CUmemoryPool>memPool)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2256
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceSetMemPool(<cydriver.CUdevice>device, <cydriver.CUmemoryPool>memPool)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceSetMemPool(((CUdevice)__pyx_v_device), ((CUmemoryPool)__pyx_v_memPool)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2256, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2257
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceSetMemPool(<cydriver.CUdevice>device, <cydriver.CUmemoryPool>memPool)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2258
 *     err = <cudaError_t>cydriver._cuDeviceSetMemPool(<cydriver.CUdevice>device, <cydriver.CUmemoryPool>memPool)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2258, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2257
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceSetMemPool(<cydriver.CUdevice>device, <cydriver.CUmemoryPool>memPool)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2259
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2251
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceSetMemPool(int device, cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceSetMemPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2261
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetMemPool(cudaMemPool_t *__pyx_v_memPool, int __pyx_v_device) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetMemPool", __pyx_f[0], 2261, 1, __PYX_ERR(0, 2261, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2262
 * 
 * cdef cudaError_t _cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2263
 * cdef cudaError_t _cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2263, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2264
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2265
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceGetMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2264
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2266
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetMemPool(((CUmemoryPool *)__pyx_v_memPool), ((CUdevice)__pyx_v_device)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2266, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2267
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2268
 *     err = <cudaError_t>cydriver._cuDeviceGetMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2268, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2267
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetMemPool(<cydriver.CUmemoryPool*>memPool, <cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2269
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2261
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetMemPool(cudaMemPool_t* memPool, int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetMemPool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2271
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetNvSciSyncAttributes(void *__pyx_v_nvSciSyncAttrList, int __pyx_v_device, int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetNvSciSyncAttributes", __pyx_f[0], 2271, 1, __PYX_ERR(0, 2271, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2272
 * 
 * cdef cudaError_t _cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2273
 * cdef cudaError_t _cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2273, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2274
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <cydriver.CUdevice>device, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2275
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <cydriver.CUdevice>device, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2274
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <cydriver.CUdevice>device, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2276
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <cydriver.CUdevice>device, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetNvSciSyncAttributes(__pyx_v_nvSciSyncAttrList, ((CUdevice)__pyx_v_device), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2276, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2277
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <cydriver.CUdevice>device, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2278
 *     err = <cudaError_t>cydriver._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <cydriver.CUdevice>device, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2278, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2277
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetNvSciSyncAttributes(nvSciSyncAttrList, <cydriver.CUdevice>device, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2279
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2271
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetNvSciSyncAttributes(void* nvSciSyncAttrList, int device, int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetNvSciSyncAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2281
 *     return err
 * 
 * cdef cudaError_t _cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamCreateWithFlags(cudaStream_t *__pyx_v_pStream, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamCreateWithFlags", __pyx_f[0], 2281, 1, __PYX_ERR(0, 2281, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2282
 * 
 * cdef cudaError_t _cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2283
 * cdef cudaError_t _cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2283, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2284
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreate(<cydriver.CUstream*>pStream, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2285
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamCreate(<cydriver.CUstream*>pStream, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2284
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreate(<cydriver.CUstream*>pStream, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2286
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreate(<cydriver.CUstream*>pStream, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamCreate(((CUstream *)__pyx_v_pStream), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2286, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2287
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreate(<cydriver.CUstream*>pStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2288
 *     err = <cudaError_t>cydriver._cuStreamCreate(<cydriver.CUstream*>pStream, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2288, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2287
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreate(<cydriver.CUstream*>pStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2289
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2281
 *     return err
 * 
 * cdef cudaError_t _cudaStreamCreateWithFlags(cudaStream_t* pStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamCreateWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2291
 *     return err
 * 
 * cdef cudaError_t _cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamCreateWithPriority(cudaStream_t *__pyx_v_pStream, unsigned int __pyx_v_flags, int __pyx_v_priority) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamCreateWithPriority", __pyx_f[0], 2291, 1, __PYX_ERR(0, 2291, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2292
 * 
 * cdef cudaError_t _cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2293
 * cdef cudaError_t _cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2293, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2294
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreateWithPriority(<cydriver.CUstream*>pStream, flags, priority)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2295
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamCreateWithPriority(<cydriver.CUstream*>pStream, flags, priority)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2294
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreateWithPriority(<cydriver.CUstream*>pStream, flags, priority)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2296
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreateWithPriority(<cydriver.CUstream*>pStream, flags, priority)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamCreateWithPriority(((CUstream *)__pyx_v_pStream), __pyx_v_flags, __pyx_v_priority); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2296, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2297
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreateWithPriority(<cydriver.CUstream*>pStream, flags, priority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2298
 *     err = <cudaError_t>cydriver._cuStreamCreateWithPriority(<cydriver.CUstream*>pStream, flags, priority)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2298, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2297
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCreateWithPriority(<cydriver.CUstream*>pStream, flags, priority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2299
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamGetPriority(cudaStream_t hStream, int* priority) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2291
 *     return err
 * 
 * cdef cudaError_t _cudaStreamCreateWithPriority(cudaStream_t* pStream, unsigned int flags, int priority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamCreateWithPriority", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2301
 *     return err
 * 
 * cdef cudaError_t _cudaStreamGetPriority(cudaStream_t hStream, int* priority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetPriority(cudaStream_t __pyx_v_hStream, int *__pyx_v_priority) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamGetPriority", __pyx_f[0], 2301, 1, __PYX_ERR(0, 2301, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2302
 * 
 * cdef cudaError_t _cudaStreamGetPriority(cudaStream_t hStream, int* priority) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2303
 * cdef cudaError_t _cudaStreamGetPriority(cudaStream_t hStream, int* priority) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2303, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2304
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetPriority(<cydriver.CUstream>hStream, priority)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2305
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamGetPriority(<cydriver.CUstream>hStream, priority)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2304
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetPriority(<cydriver.CUstream>hStream, priority)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2306
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetPriority(<cydriver.CUstream>hStream, priority)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetPriority(((CUstream)__pyx_v_hStream), __pyx_v_priority); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2306, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2307
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetPriority(<cydriver.CUstream>hStream, priority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2308
 *     err = <cudaError_t>cydriver._cuStreamGetPriority(<cydriver.CUstream>hStream, priority)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2308, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2307
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetPriority(<cydriver.CUstream>hStream, priority)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2309
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2301
 *     return err
 * 
 * cdef cudaError_t _cudaStreamGetPriority(cudaStream_t hStream, int* priority) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamGetPriority", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2311
 *     return err
 * 
 * cdef cudaError_t _cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetFlags(cudaStream_t __pyx_v_hStream, unsigned int *__pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamGetFlags", __pyx_f[0], 2311, 1, __PYX_ERR(0, 2311, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2312
 * 
 * cdef cudaError_t _cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2313
 * cdef cudaError_t _cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2313, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2314
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetFlags(<cydriver.CUstream>hStream, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2315
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamGetFlags(<cydriver.CUstream>hStream, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2314
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetFlags(<cydriver.CUstream>hStream, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2316
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetFlags(<cydriver.CUstream>hStream, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetFlags(((CUstream)__pyx_v_hStream), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2316, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2317
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetFlags(<cydriver.CUstream>hStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2318
 *     err = <cudaError_t>cydriver._cuStreamGetFlags(<cydriver.CUstream>hStream, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2318, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2317
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetFlags(<cydriver.CUstream>hStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2319
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaCtxResetPersistingL2Cache() except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2311
 *     return err
 * 
 * cdef cudaError_t _cudaStreamGetFlags(cudaStream_t hStream, unsigned int* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamGetFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2321
 *     return err
 * 
 * cdef cudaError_t _cudaCtxResetPersistingL2Cache() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaCtxResetPersistingL2Cache(void) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaCtxResetPersistingL2Cache", __pyx_f[0], 2321, 1, __PYX_ERR(0, 2321, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2322
 * 
 * cdef cudaError_t _cudaCtxResetPersistingL2Cache() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2323
 * cdef cudaError_t _cudaCtxResetPersistingL2Cache() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2323, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2324
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxResetPersistingL2Cache()
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2325
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxResetPersistingL2Cache()
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2324
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxResetPersistingL2Cache()
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2326
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxResetPersistingL2Cache()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxResetPersistingL2Cache(); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2326, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2327
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxResetPersistingL2Cache()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2328
 *     err = <cudaError_t>cydriver._cuCtxResetPersistingL2Cache()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2328, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2327
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxResetPersistingL2Cache()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2329
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2321
 *     return err
 * 
 * cdef cudaError_t _cudaCtxResetPersistingL2Cache() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaCtxResetPersistingL2Cache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2331
 *     return err
 * 
 * cdef cudaError_t _cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamCopyAttributes(cudaStream_t __pyx_v_dst, cudaStream_t __pyx_v_src) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamCopyAttributes", __pyx_f[0], 2331, 1, __PYX_ERR(0, 2331, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2332
 * 
 * cdef cudaError_t _cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2333
 * cdef cudaError_t _cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2333, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2334
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCopyAttributes(<cydriver.CUstream>dst, <cydriver.CUstream>src)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2335
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamCopyAttributes(<cydriver.CUstream>dst, <cydriver.CUstream>src)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2334
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCopyAttributes(<cydriver.CUstream>dst, <cydriver.CUstream>src)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2336
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCopyAttributes(<cydriver.CUstream>dst, <cydriver.CUstream>src)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamCopyAttributes(((CUstream)__pyx_v_dst), ((CUstream)__pyx_v_src)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2336, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2337
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCopyAttributes(<cydriver.CUstream>dst, <cydriver.CUstream>src)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2338
 *     err = <cudaError_t>cydriver._cuStreamCopyAttributes(<cydriver.CUstream>dst, <cydriver.CUstream>src)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2338, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2337
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamCopyAttributes(<cydriver.CUstream>dst, <cydriver.CUstream>src)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2339
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamDestroy(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2331
 *     return err
 * 
 * cdef cudaError_t _cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamCopyAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2341
 *     return err
 * 
 * cdef cudaError_t _cudaStreamDestroy(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamDestroy(cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamDestroy", __pyx_f[0], 2341, 1, __PYX_ERR(0, 2341, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2342
 * 
 * cdef cudaError_t _cudaStreamDestroy(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2343
 * cdef cudaError_t _cudaStreamDestroy(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2343, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2344
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamDestroy_v2(<cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2345
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamDestroy_v2(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2344
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamDestroy_v2(<cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2346
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamDestroy_v2(<cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamDestroy_v2(((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2346, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2347
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamDestroy_v2(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2348
 *     err = <cudaError_t>cydriver._cuStreamDestroy_v2(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2348, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2347
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamDestroy_v2(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2349
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2341
 *     return err
 * 
 * cdef cudaError_t _cudaStreamDestroy(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2351
 *     return err
 * 
 * cdef cudaError_t _cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamWaitEvent(cudaStream_t __pyx_v_stream, cudaEvent_t __pyx_v_event, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamWaitEvent", __pyx_f[0], 2351, 1, __PYX_ERR(0, 2351, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2352
 * 
 * cdef cudaError_t _cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2353
 * cdef cudaError_t _cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2353, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2354
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamWaitEvent(<cydriver.CUstream>stream, <cydriver.CUevent>event, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2355
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamWaitEvent(<cydriver.CUstream>stream, <cydriver.CUevent>event, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2354
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamWaitEvent(<cydriver.CUstream>stream, <cydriver.CUevent>event, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2356
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamWaitEvent(<cydriver.CUstream>stream, <cydriver.CUevent>event, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamWaitEvent(((CUstream)__pyx_v_stream), ((CUevent)__pyx_v_event), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2356, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2357
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamWaitEvent(<cydriver.CUstream>stream, <cydriver.CUevent>event, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2358
 *     err = <cudaError_t>cydriver._cuStreamWaitEvent(<cydriver.CUstream>stream, <cydriver.CUevent>event, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2358, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2357
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamWaitEvent(<cydriver.CUstream>stream, <cydriver.CUevent>event, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2359
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamSynchronize(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2351
 *     return err
 * 
 * cdef cudaError_t _cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamWaitEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2361
 *     return err
 * 
 * cdef cudaError_t _cudaStreamSynchronize(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamSynchronize(cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamSynchronize", __pyx_f[0], 2361, 1, __PYX_ERR(0, 2361, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2362
 * 
 * cdef cudaError_t _cudaStreamSynchronize(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2363
 * cdef cudaError_t _cudaStreamSynchronize(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2363, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2364
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamSynchronize(<cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2365
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamSynchronize(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2364
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamSynchronize(<cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2366
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamSynchronize(<cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamSynchronize(((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2366, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2367
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamSynchronize(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2368
 *     err = <cudaError_t>cydriver._cuStreamSynchronize(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2368, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2367
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamSynchronize(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2369
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamQuery(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2361
 *     return err
 * 
 * cdef cudaError_t _cudaStreamSynchronize(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamSynchronize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2371
 *     return err
 * 
 * cdef cudaError_t _cudaStreamQuery(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamQuery(cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamQuery", __pyx_f[0], 2371, 1, __PYX_ERR(0, 2371, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2372
 * 
 * cdef cudaError_t _cudaStreamQuery(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2373
 * cdef cudaError_t _cudaStreamQuery(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2373, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2374
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamQuery(<cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2375
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamQuery(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2374
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamQuery(<cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2376
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamQuery(<cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamQuery(((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2376, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2377
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamQuery(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2378
 *     err = <cudaError_t>cydriver._cuStreamQuery(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2378, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2377
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamQuery(<cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2379
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2371
 *     return err
 * 
 * cdef cudaError_t _cudaStreamQuery(cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamQuery", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2381
 *     return err
 * 
 * cdef cudaError_t _cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamAttachMemAsync(cudaStream_t __pyx_v_stream, void *__pyx_v_devPtr, size_t __pyx_v_length, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamAttachMemAsync", __pyx_f[0], 2381, 1, __PYX_ERR(0, 2381, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2382
 * 
 * cdef cudaError_t _cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2383
 * cdef cudaError_t _cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2383, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2384
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamAttachMemAsync(<cydriver.CUstream>stream, <cydriver.CUdeviceptr>devPtr, length, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2385
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamAttachMemAsync(<cydriver.CUstream>stream, <cydriver.CUdeviceptr>devPtr, length, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2384
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamAttachMemAsync(<cydriver.CUstream>stream, <cydriver.CUdeviceptr>devPtr, length, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2386
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamAttachMemAsync(<cydriver.CUstream>stream, <cydriver.CUdeviceptr>devPtr, length, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamAttachMemAsync(((CUstream)__pyx_v_stream), ((CUdeviceptr)__pyx_v_devPtr), __pyx_v_length, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2386, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2387
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamAttachMemAsync(<cydriver.CUstream>stream, <cydriver.CUdeviceptr>devPtr, length, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2388
 *     err = <cudaError_t>cydriver._cuStreamAttachMemAsync(<cydriver.CUstream>stream, <cydriver.CUdeviceptr>devPtr, length, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2388, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2387
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamAttachMemAsync(<cydriver.CUstream>stream, <cydriver.CUdeviceptr>devPtr, length, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2389
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2381
 *     return err
 * 
 * cdef cudaError_t _cudaStreamAttachMemAsync(cudaStream_t stream, void* devPtr, size_t length, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamAttachMemAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2391
 *     return err
 * 
 * cdef cudaError_t _cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamBeginCapture(cudaStream_t __pyx_v_stream, enum cudaStreamCaptureMode __pyx_v_mode) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamBeginCapture", __pyx_f[0], 2391, 1, __PYX_ERR(0, 2391, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2392
 * 
 * cdef cudaError_t _cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2393
 * cdef cudaError_t _cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2393, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2394
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamBeginCapture_v2(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureMode>mode)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2395
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamBeginCapture_v2(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2394
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamBeginCapture_v2(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureMode>mode)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2396
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamBeginCapture_v2(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureMode>mode)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamBeginCapture_v2(((CUstream)__pyx_v_stream), ((CUstreamCaptureMode)__pyx_v_mode)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2396, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2397
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamBeginCapture_v2(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2398
 *     err = <cudaError_t>cydriver._cuStreamBeginCapture_v2(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2398, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2397
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamBeginCapture_v2(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2399
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2391
 *     return err
 * 
 * cdef cudaError_t _cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamBeginCapture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2401
 *     return err
 * 
 * cdef cudaError_t _cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamBeginCaptureToGraph(cudaStream_t __pyx_v_stream, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_dependencies, cudaGraphEdgeData const *__pyx_v_dependencyData, size_t __pyx_v_numDependencies, enum cudaStreamCaptureMode __pyx_v_mode) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamBeginCaptureToGraph", __pyx_f[0], 2401, 1, __PYX_ERR(0, 2401, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2402
 * 
 * cdef cudaError_t _cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2403
 * cdef cudaError_t _cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2403, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2404
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamBeginCaptureToGraph(<cydriver.CUstream>stream, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>dependencies, <cydriver.CUgraphEdgeData*> dependencyData, numDependencies, <cydriver.CUstreamCaptureMode>mode)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2405
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamBeginCaptureToGraph(<cydriver.CUstream>stream, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>dependencies, <cydriver.CUgraphEdgeData*> dependencyData, numDependencies, <cydriver.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2404
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamBeginCaptureToGraph(<cydriver.CUstream>stream, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>dependencies, <cydriver.CUgraphEdgeData*> dependencyData, numDependencies, <cydriver.CUstreamCaptureMode>mode)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2406
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamBeginCaptureToGraph(<cydriver.CUstream>stream, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>dependencies, <cydriver.CUgraphEdgeData*> dependencyData, numDependencies, <cydriver.CUstreamCaptureMode>mode)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamBeginCaptureToGraph(((CUstream)__pyx_v_stream), ((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_dependencies), ((CUgraphEdgeData *)__pyx_v_dependencyData), __pyx_v_numDependencies, ((CUstreamCaptureMode)__pyx_v_mode)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2406, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2407
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamBeginCaptureToGraph(<cydriver.CUstream>stream, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>dependencies, <cydriver.CUgraphEdgeData*> dependencyData, numDependencies, <cydriver.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2408
 *     err = <cudaError_t>cydriver._cuStreamBeginCaptureToGraph(<cydriver.CUstream>stream, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>dependencies, <cydriver.CUgraphEdgeData*> dependencyData, numDependencies, <cydriver.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2408, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2407
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamBeginCaptureToGraph(<cydriver.CUstream>stream, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>dependencies, <cydriver.CUgraphEdgeData*> dependencyData, numDependencies, <cydriver.CUstreamCaptureMode>mode)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2409
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2401
 *     return err
 * 
 * cdef cudaError_t _cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaStreamCaptureMode mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamBeginCaptureToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2411
 *     return err
 * 
 * cdef cudaError_t _cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaThreadExchangeStreamCaptureMode(enum cudaStreamCaptureMode *__pyx_v_mode) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaThreadExchangeStreamCaptureMode", __pyx_f[0], 2411, 1, __PYX_ERR(0, 2411, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2412
 * 
 * cdef cudaError_t _cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2413
 * cdef cudaError_t _cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2413, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2414
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuThreadExchangeStreamCaptureMode(<cydriver.CUstreamCaptureMode*>mode)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2415
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuThreadExchangeStreamCaptureMode(<cydriver.CUstreamCaptureMode*>mode)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2414
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuThreadExchangeStreamCaptureMode(<cydriver.CUstreamCaptureMode*>mode)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2416
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuThreadExchangeStreamCaptureMode(<cydriver.CUstreamCaptureMode*>mode)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuThreadExchangeStreamCaptureMode(((CUstreamCaptureMode *)__pyx_v_mode)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2416, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2417
 *         return err
 *     err = <cudaError_t>cydriver._cuThreadExchangeStreamCaptureMode(<cydriver.CUstreamCaptureMode*>mode)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2418
 *     err = <cudaError_t>cydriver._cuThreadExchangeStreamCaptureMode(<cydriver.CUstreamCaptureMode*>mode)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2418, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2417
 *         return err
 *     err = <cudaError_t>cydriver._cuThreadExchangeStreamCaptureMode(<cydriver.CUstreamCaptureMode*>mode)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2419
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2411
 *     return err
 * 
 * cdef cudaError_t _cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode* mode) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaThreadExchangeStreamCaptureMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2421
 *     return err
 * 
 * cdef cudaError_t _cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamEndCapture(cudaStream_t __pyx_v_stream, cudaGraph_t *__pyx_v_pGraph) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamEndCapture", __pyx_f[0], 2421, 1, __PYX_ERR(0, 2421, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2422
 * 
 * cdef cudaError_t _cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2423
 * cdef cudaError_t _cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2423, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2424
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamEndCapture(<cydriver.CUstream>stream, <cydriver.CUgraph*>pGraph)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2425
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamEndCapture(<cydriver.CUstream>stream, <cydriver.CUgraph*>pGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2424
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamEndCapture(<cydriver.CUstream>stream, <cydriver.CUgraph*>pGraph)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2426
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamEndCapture(<cydriver.CUstream>stream, <cydriver.CUgraph*>pGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamEndCapture(((CUstream)__pyx_v_stream), ((CUgraph *)__pyx_v_pGraph)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2426, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2427
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamEndCapture(<cydriver.CUstream>stream, <cydriver.CUgraph*>pGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2428
 *     err = <cudaError_t>cydriver._cuStreamEndCapture(<cydriver.CUstream>stream, <cydriver.CUgraph*>pGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2428, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2427
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamEndCapture(<cydriver.CUstream>stream, <cydriver.CUgraph*>pGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2429
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2421
 *     return err
 * 
 * cdef cudaError_t _cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamEndCapture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2431
 *     return err
 * 
 * cdef cudaError_t _cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamIsCapturing(cudaStream_t __pyx_v_stream, enum cudaStreamCaptureStatus *__pyx_v_pCaptureStatus) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamIsCapturing", __pyx_f[0], 2431, 1, __PYX_ERR(0, 2431, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2432
 * 
 * cdef cudaError_t _cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2433
 * cdef cudaError_t _cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2433, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2434
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamIsCapturing(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureStatus*>pCaptureStatus)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2435
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamIsCapturing(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureStatus*>pCaptureStatus)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2434
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamIsCapturing(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureStatus*>pCaptureStatus)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2436
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamIsCapturing(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureStatus*>pCaptureStatus)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamIsCapturing(((CUstream)__pyx_v_stream), ((CUstreamCaptureStatus *)__pyx_v_pCaptureStatus)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2436, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2437
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamIsCapturing(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureStatus*>pCaptureStatus)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2438
 *     err = <cudaError_t>cydriver._cuStreamIsCapturing(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureStatus*>pCaptureStatus)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2438, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2437
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamIsCapturing(<cydriver.CUstream>stream, <cydriver.CUstreamCaptureStatus*>pCaptureStatus)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2439
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2431
 *     return err
 * 
 * cdef cudaError_t _cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus* pCaptureStatus) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamIsCapturing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2441
 *     return err
 * 
 * cdef cudaError_t _cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamUpdateCaptureDependencies(cudaStream_t __pyx_v_stream, cudaGraphNode_t *__pyx_v_dependencies, size_t __pyx_v_numDependencies, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamUpdateCaptureDependencies", __pyx_f[0], 2441, 1, __PYX_ERR(0, 2441, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2442
 * 
 * cdef cudaError_t _cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2443
 * cdef cudaError_t _cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2443, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2444
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, numDependencies, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2445
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, numDependencies, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2444
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, numDependencies, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2446
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, numDependencies, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamUpdateCaptureDependencies(((CUstream)__pyx_v_stream), ((CUgraphNode *)__pyx_v_dependencies), __pyx_v_numDependencies, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2446, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2447
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, numDependencies, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2448
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, numDependencies, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2448, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2447
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, numDependencies, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2449
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2441
 *     return err
 * 
 * cdef cudaError_t _cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamUpdateCaptureDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2451
 *     return err
 * 
 * cdef cudaError_t _cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventCreateWithFlags(cudaEvent_t *__pyx_v_event, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEventCreateWithFlags", __pyx_f[0], 2451, 1, __PYX_ERR(0, 2451, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2452
 * 
 * cdef cudaError_t _cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2453
 * cdef cudaError_t _cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2453, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2454
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreate(<cydriver.CUevent*>event, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2455
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEventCreate(<cydriver.CUevent*>event, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2454
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreate(<cydriver.CUevent*>event, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2456
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreate(<cydriver.CUevent*>event, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventCreate(((CUevent *)__pyx_v_event), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2456, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2457
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreate(<cydriver.CUevent*>event, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2458
 *     err = <cudaError_t>cydriver._cuEventCreate(<cydriver.CUevent*>event, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2458, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2457
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreate(<cydriver.CUevent*>event, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2459
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEventRecord(cudaEvent_t event, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2451
 *     return err
 * 
 * cdef cudaError_t _cudaEventCreateWithFlags(cudaEvent_t* event, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEventCreateWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2461
 *     return err
 * 
 * cdef cudaError_t _cudaEventRecord(cudaEvent_t event, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventRecord(cudaEvent_t __pyx_v_event, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEventRecord", __pyx_f[0], 2461, 1, __PYX_ERR(0, 2461, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2462
 * 
 * cdef cudaError_t _cudaEventRecord(cudaEvent_t event, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2463
 * cdef cudaError_t _cudaEventRecord(cudaEvent_t event, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2463, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2464
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventRecord(<cydriver.CUevent>event, <cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2465
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEventRecord(<cydriver.CUevent>event, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2464
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventRecord(<cydriver.CUevent>event, <cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2466
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEventRecord(<cydriver.CUevent>event, <cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventRecord(((CUevent)__pyx_v_event), ((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2466, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2467
 *         return err
 *     err = <cudaError_t>cydriver._cuEventRecord(<cydriver.CUevent>event, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2468
 *     err = <cudaError_t>cydriver._cuEventRecord(<cydriver.CUevent>event, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2468, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2467
 *         return err
 *     err = <cudaError_t>cydriver._cuEventRecord(<cydriver.CUevent>event, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2469
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2461
 *     return err
 * 
 * cdef cudaError_t _cudaEventRecord(cudaEvent_t event, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEventRecord", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2471
 *     return err
 * 
 * cdef cudaError_t _cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventRecordWithFlags(cudaEvent_t __pyx_v_event, cudaStream_t __pyx_v_stream, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEventRecordWithFlags", __pyx_f[0], 2471, 1, __PYX_ERR(0, 2471, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2472
 * 
 * cdef cudaError_t _cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2473
 * cdef cudaError_t _cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2473, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2474
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventRecordWithFlags(<cydriver.CUevent>event, <cydriver.CUstream>stream, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2475
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEventRecordWithFlags(<cydriver.CUevent>event, <cydriver.CUstream>stream, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2474
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventRecordWithFlags(<cydriver.CUevent>event, <cydriver.CUstream>stream, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2476
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEventRecordWithFlags(<cydriver.CUevent>event, <cydriver.CUstream>stream, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventRecordWithFlags(((CUevent)__pyx_v_event), ((CUstream)__pyx_v_stream), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2476, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2477
 *         return err
 *     err = <cudaError_t>cydriver._cuEventRecordWithFlags(<cydriver.CUevent>event, <cydriver.CUstream>stream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2478
 *     err = <cudaError_t>cydriver._cuEventRecordWithFlags(<cydriver.CUevent>event, <cydriver.CUstream>stream, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2478, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2477
 *         return err
 *     err = <cudaError_t>cydriver._cuEventRecordWithFlags(<cydriver.CUevent>event, <cydriver.CUstream>stream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2479
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEventSynchronize(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2471
 *     return err
 * 
 * cdef cudaError_t _cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEventRecordWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2481
 *     return err
 * 
 * cdef cudaError_t _cudaEventSynchronize(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventSynchronize(cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEventSynchronize", __pyx_f[0], 2481, 1, __PYX_ERR(0, 2481, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2482
 * 
 * cdef cudaError_t _cudaEventSynchronize(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2483
 * cdef cudaError_t _cudaEventSynchronize(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2483, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2484
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventSynchronize(<cydriver.CUevent>event)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2485
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEventSynchronize(<cydriver.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2484
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventSynchronize(<cydriver.CUevent>event)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2486
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEventSynchronize(<cydriver.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventSynchronize(((CUevent)__pyx_v_event)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2486, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2487
 *         return err
 *     err = <cudaError_t>cydriver._cuEventSynchronize(<cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2488
 *     err = <cudaError_t>cydriver._cuEventSynchronize(<cydriver.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2488, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2487
 *         return err
 *     err = <cudaError_t>cydriver._cuEventSynchronize(<cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2489
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEventDestroy(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2481
 *     return err
 * 
 * cdef cudaError_t _cudaEventSynchronize(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEventSynchronize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2491
 *     return err
 * 
 * cdef cudaError_t _cudaEventDestroy(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventDestroy(cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEventDestroy", __pyx_f[0], 2491, 1, __PYX_ERR(0, 2491, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2492
 * 
 * cdef cudaError_t _cudaEventDestroy(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2493
 * cdef cudaError_t _cudaEventDestroy(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2493, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2494
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventDestroy_v2(<cydriver.CUevent>event)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2495
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEventDestroy_v2(<cydriver.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2494
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventDestroy_v2(<cydriver.CUevent>event)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2496
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEventDestroy_v2(<cydriver.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventDestroy_v2(((CUevent)__pyx_v_event)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2496, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2497
 *         return err
 *     err = <cudaError_t>cydriver._cuEventDestroy_v2(<cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2498
 *     err = <cudaError_t>cydriver._cuEventDestroy_v2(<cydriver.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2498, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2497
 *         return err
 *     err = <cudaError_t>cydriver._cuEventDestroy_v2(<cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2499
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2491
 *     return err
 * 
 * cdef cudaError_t _cudaEventDestroy(cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEventDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2501
 *     return err
 * 
 * cdef cudaError_t _cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventElapsedTime(float *__pyx_v_ms, cudaEvent_t __pyx_v_start, cudaEvent_t __pyx_v_end) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEventElapsedTime", __pyx_f[0], 2501, 1, __PYX_ERR(0, 2501, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2502
 * 
 * cdef cudaError_t _cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2503
 * cdef cudaError_t _cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2503, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2504
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventElapsedTime(ms, <cydriver.CUevent>start, <cydriver.CUevent>end)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2505
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEventElapsedTime(ms, <cydriver.CUevent>start, <cydriver.CUevent>end)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2504
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventElapsedTime(ms, <cydriver.CUevent>start, <cydriver.CUevent>end)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2506
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEventElapsedTime(ms, <cydriver.CUevent>start, <cydriver.CUevent>end)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventElapsedTime(__pyx_v_ms, ((CUevent)__pyx_v_start), ((CUevent)__pyx_v_end)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2506, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2507
 *         return err
 *     err = <cudaError_t>cydriver._cuEventElapsedTime(ms, <cydriver.CUevent>start, <cydriver.CUevent>end)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2508
 *     err = <cudaError_t>cydriver._cuEventElapsedTime(ms, <cydriver.CUevent>start, <cydriver.CUevent>end)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2508, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2507
 *         return err
 *     err = <cudaError_t>cydriver._cuEventElapsedTime(ms, <cydriver.CUevent>start, <cydriver.CUevent>end)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2509
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDestroyExternalMemory(cudaExternalMemory_t extMem) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2501
 *     return err
 * 
 * cdef cudaError_t _cudaEventElapsedTime(float* ms, cudaEvent_t start, cudaEvent_t end) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEventElapsedTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2511
 *     return err
 * 
 * cdef cudaError_t _cudaDestroyExternalMemory(cudaExternalMemory_t extMem) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDestroyExternalMemory(cudaExternalMemory_t __pyx_v_extMem) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDestroyExternalMemory", __pyx_f[0], 2511, 1, __PYX_ERR(0, 2511, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2512
 * 
 * cdef cudaError_t _cudaDestroyExternalMemory(cudaExternalMemory_t extMem) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2513
 * cdef cudaError_t _cudaDestroyExternalMemory(cudaExternalMemory_t extMem) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2513, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2514
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDestroyExternalMemory(<cydriver.CUexternalMemory>extMem)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2515
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDestroyExternalMemory(<cydriver.CUexternalMemory>extMem)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2514
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDestroyExternalMemory(<cydriver.CUexternalMemory>extMem)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2516
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuDestroyExternalMemory(<cydriver.CUexternalMemory>extMem)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDestroyExternalMemory(((CUexternalMemory)__pyx_v_extMem)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2516, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2517
 *         return err
 *     err = <cudaError_t>cydriver._cuDestroyExternalMemory(<cydriver.CUexternalMemory>extMem)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2518
 *     err = <cudaError_t>cydriver._cuDestroyExternalMemory(<cydriver.CUexternalMemory>extMem)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2518, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2517
 *         return err
 *     err = <cudaError_t>cydriver._cuDestroyExternalMemory(<cydriver.CUexternalMemory>extMem)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2519
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2511
 *     return err
 * 
 * cdef cudaError_t _cudaDestroyExternalMemory(cudaExternalMemory_t extMem) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDestroyExternalMemory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2521
 *     return err
 * 
 * cdef cudaError_t _cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDestroyExternalSemaphore(cudaExternalSemaphore_t __pyx_v_extSem) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDestroyExternalSemaphore", __pyx_f[0], 2521, 1, __PYX_ERR(0, 2521, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2522
 * 
 * cdef cudaError_t _cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2523
 * cdef cudaError_t _cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2523, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2524
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDestroyExternalSemaphore(<cydriver.CUexternalSemaphore>extSem)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2525
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDestroyExternalSemaphore(<cydriver.CUexternalSemaphore>extSem)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2524
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDestroyExternalSemaphore(<cydriver.CUexternalSemaphore>extSem)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2526
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuDestroyExternalSemaphore(<cydriver.CUexternalSemaphore>extSem)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDestroyExternalSemaphore(((CUexternalSemaphore)__pyx_v_extSem)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2526, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2527
 *         return err
 *     err = <cudaError_t>cydriver._cuDestroyExternalSemaphore(<cydriver.CUexternalSemaphore>extSem)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2528
 *     err = <cudaError_t>cydriver._cuDestroyExternalSemaphore(<cydriver.CUexternalSemaphore>extSem)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2528, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2527
 *         return err
 *     err = <cudaError_t>cydriver._cuDestroyExternalSemaphore(<cydriver.CUexternalSemaphore>extSem)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2529
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2521
 *     return err
 * 
 * cdef cudaError_t _cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDestroyExternalSemaphore", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2531
 *     return err
 * 
 * cdef cudaError_t _cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFuncSetCacheConfig(void const *__pyx_v_func, enum cudaFuncCache __pyx_v_cacheConfig) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaFuncSetCacheConfig", __pyx_f[0], 2531, 1, __PYX_ERR(0, 2531, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2532
 * 
 * cdef cudaError_t _cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2533
 * cdef cudaError_t _cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2533, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2534
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetCacheConfig(<cydriver.CUfunction>func, <cydriver.CUfunc_cache>cacheConfig)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2535
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncSetCacheConfig(<cydriver.CUfunction>func, <cydriver.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2534
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetCacheConfig(<cydriver.CUfunction>func, <cydriver.CUfunc_cache>cacheConfig)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2536
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetCacheConfig(<cydriver.CUfunction>func, <cydriver.CUfunc_cache>cacheConfig)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncSetCacheConfig(((CUfunction)__pyx_v_func), ((CUfunc_cache)__pyx_v_cacheConfig)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2536, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2537
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetCacheConfig(<cydriver.CUfunction>func, <cydriver.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2538
 *     err = <cudaError_t>cydriver._cuFuncSetCacheConfig(<cydriver.CUfunction>func, <cydriver.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2538, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2537
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetCacheConfig(<cydriver.CUfunction>func, <cydriver.CUfunc_cache>cacheConfig)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2539
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2531
 *     return err
 * 
 * cdef cudaError_t _cudaFuncSetCacheConfig(const void* func, cudaFuncCache cacheConfig) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaFuncSetCacheConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2541
 *     return err
 * 
 * cdef cudaError_t _cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFuncSetSharedMemConfig(void const *__pyx_v_func, enum cudaSharedMemConfig __pyx_v_config) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaFuncSetSharedMemConfig", __pyx_f[0], 2541, 1, __PYX_ERR(0, 2541, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2542
 * 
 * cdef cudaError_t _cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2543
 * cdef cudaError_t _cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2543, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2544
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetSharedMemConfig(<cydriver.CUfunction>func, <cydriver.CUsharedconfig>config)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2545
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncSetSharedMemConfig(<cydriver.CUfunction>func, <cydriver.CUsharedconfig>config)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2544
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetSharedMemConfig(<cydriver.CUfunction>func, <cydriver.CUsharedconfig>config)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2546
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetSharedMemConfig(<cydriver.CUfunction>func, <cydriver.CUsharedconfig>config)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncSetSharedMemConfig(((CUfunction)__pyx_v_func), ((CUsharedconfig)__pyx_v_config)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2546, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2547
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetSharedMemConfig(<cydriver.CUfunction>func, <cydriver.CUsharedconfig>config)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2548
 *     err = <cudaError_t>cydriver._cuFuncSetSharedMemConfig(<cydriver.CUfunction>func, <cydriver.CUsharedconfig>config)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2548, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2547
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetSharedMemConfig(<cydriver.CUfunction>func, <cydriver.CUsharedconfig>config)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2549
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2541
 *     return err
 * 
 * cdef cudaError_t _cudaFuncSetSharedMemConfig(const void* func, cudaSharedMemConfig config) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaFuncSetSharedMemConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2551
 *     return err
 * 
 * cdef cudaError_t _cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFuncSetAttribute(void const *__pyx_v_func, enum cudaFuncAttribute __pyx_v_attr, int __pyx_v_value) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaFuncSetAttribute", __pyx_f[0], 2551, 1, __PYX_ERR(0, 2551, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2552
 * 
 * cdef cudaError_t _cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2553
 * cdef cudaError_t _cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2553, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2554
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetAttribute(<cydriver.CUfunction>func, <cydriver.CUfunction_attribute>attr, value)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2555
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuFuncSetAttribute(<cydriver.CUfunction>func, <cydriver.CUfunction_attribute>attr, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2554
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetAttribute(<cydriver.CUfunction>func, <cydriver.CUfunction_attribute>attr, value)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2556
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetAttribute(<cydriver.CUfunction>func, <cydriver.CUfunction_attribute>attr, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncSetAttribute(((CUfunction)__pyx_v_func), ((CUfunction_attribute)__pyx_v_attr), __pyx_v_value); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2556, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2557
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetAttribute(<cydriver.CUfunction>func, <cydriver.CUfunction_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2558
 *     err = <cudaError_t>cydriver._cuFuncSetAttribute(<cydriver.CUfunction>func, <cydriver.CUfunction_attribute>attr, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2558, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2557
 *         return err
 *     err = <cudaError_t>cydriver._cuFuncSetAttribute(<cydriver.CUfunction>func, <cydriver.CUfunction_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2559
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2551
 *     return err
 * 
 * cdef cudaError_t _cudaFuncSetAttribute(const void* func, cudaFuncAttribute attr, int value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaFuncSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2561
 *     return err
 * 
 * cdef cudaError_t _cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaLaunchHostFunc(cudaStream_t __pyx_v_stream, cudaHostFn_t __pyx_v_fn, void *__pyx_v_userData) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaLaunchHostFunc", __pyx_f[0], 2561, 1, __PYX_ERR(0, 2561, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2562
 * 
 * cdef cudaError_t _cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2563
 * cdef cudaError_t _cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2563, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2564
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = streamAddHostCallbackCommon(stream, fn, userData)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2565
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = streamAddHostCallbackCommon(stream, fn, userData)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2564
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = streamAddHostCallbackCommon(stream, fn, userData)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2566
 *     if err != cudaSuccess:
 *         return err
 *     err = streamAddHostCallbackCommon(stream, fn, userData)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamAddHostCallbackCommon(__pyx_v_stream, __pyx_v_fn, __pyx_v_userData); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2566, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2567
 *         return err
 *     err = streamAddHostCallbackCommon(stream, fn, userData)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2568
 *     err = streamAddHostCallbackCommon(stream, fn, userData)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2568, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2567
 *         return err
 *     err = streamAddHostCallbackCommon(stream, fn, userData)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2569
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2561
 *     return err
 * 
 * cdef cudaError_t _cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void* userData) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaLaunchHostFunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2571
 *     return err
 * 
 * cdef cudaError_t _cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *__pyx_v_numBlocks, void const *__pyx_v_func, int __pyx_v_blockSize, size_t __pyx_v_dynamicSMemSize) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaOccupancyMaxActiveBlocksPerMultiprocessor", __pyx_f[0], 2571, 1, __PYX_ERR(0, 2571, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2572
 * 
 * cdef cudaError_t _cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2573
 * cdef cudaError_t _cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2573, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2574
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2575
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2574
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2576
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuOccupancyMaxActiveBlocksPerMultiprocessor(__pyx_v_numBlocks, ((CUfunction)__pyx_v_func), __pyx_v_blockSize, __pyx_v_dynamicSMemSize); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2576, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2577
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2578
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2578, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2577
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessor(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2579
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2571
 *     return err
 * 
 * cdef cudaError_t _cudaOccupancyMaxActiveBlocksPerMultiprocessor(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaOccupancyMaxActiveBlocksPerMultiprocessor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2581
 *     return err
 * 
 * cdef cudaError_t _cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaOccupancyAvailableDynamicSMemPerBlock(size_t *__pyx_v_dynamicSmemSize, void const *__pyx_v_func, int __pyx_v_numBlocks, int __pyx_v_blockSize) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaOccupancyAvailableDynamicSMemPerBlock", __pyx_f[0], 2581, 1, __PYX_ERR(0, 2581, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2582
 * 
 * cdef cudaError_t _cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2583
 * cdef cudaError_t _cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2583, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2584
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <cydriver.CUfunction>func, numBlocks, blockSize)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2585
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <cydriver.CUfunction>func, numBlocks, blockSize)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2584
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <cydriver.CUfunction>func, numBlocks, blockSize)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2586
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <cydriver.CUfunction>func, numBlocks, blockSize)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuOccupancyAvailableDynamicSMemPerBlock(__pyx_v_dynamicSmemSize, ((CUfunction)__pyx_v_func), __pyx_v_numBlocks, __pyx_v_blockSize); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2586, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2587
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <cydriver.CUfunction>func, numBlocks, blockSize)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2588
 *     err = <cudaError_t>cydriver._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <cydriver.CUfunction>func, numBlocks, blockSize)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2588, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2587
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, <cydriver.CUfunction>func, numBlocks, blockSize)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2589
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2581
 *     return err
 * 
 * cdef cudaError_t _cudaOccupancyAvailableDynamicSMemPerBlock(size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaOccupancyAvailableDynamicSMemPerBlock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2591
 *     return err
 * 
 * cdef cudaError_t _cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *__pyx_v_numBlocks, void const *__pyx_v_func, int __pyx_v_blockSize, size_t __pyx_v_dynamicSMemSize, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", __pyx_f[0], 2591, 1, __PYX_ERR(0, 2591, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2592
 * 
 * cdef cudaError_t _cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2593
 * cdef cudaError_t _cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2593, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2594
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2595
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2594
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2596
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(__pyx_v_numBlocks, ((CUfunction)__pyx_v_func), __pyx_v_blockSize, __pyx_v_dynamicSMemSize, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2596, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2597
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2598
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2598, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2597
 *         return err
 *     err = <cudaError_t>cydriver._cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, <cydriver.CUfunction>func, blockSize, dynamicSMemSize, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2599
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2591
 *     return err
 * 
 * cdef cudaError_t _cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2601
 *     return err
 * 
 * cdef cudaError_t _cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocManaged(void **__pyx_v_devPtr, size_t __pyx_v_size, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMallocManaged", __pyx_f[0], 2601, 1, __PYX_ERR(0, 2601, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2602
 * 
 * cdef cudaError_t _cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2603
 * cdef cudaError_t _cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2603, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2604
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocManaged(<cydriver.CUdeviceptr*>devPtr, size, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2605
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemAllocManaged(<cydriver.CUdeviceptr*>devPtr, size, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2604
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocManaged(<cydriver.CUdeviceptr*>devPtr, size, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2606
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocManaged(<cydriver.CUdeviceptr*>devPtr, size, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAllocManaged(((CUdeviceptr *)__pyx_v_devPtr), __pyx_v_size, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2606, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2607
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocManaged(<cydriver.CUdeviceptr*>devPtr, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2608
 *     err = <cudaError_t>cydriver._cuMemAllocManaged(<cydriver.CUdeviceptr*>devPtr, size, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2608, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2607
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocManaged(<cydriver.CUdeviceptr*>devPtr, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2609
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMalloc(void** devPtr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2601
 *     return err
 * 
 * cdef cudaError_t _cudaMallocManaged(void** devPtr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMallocManaged", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2611
 *     return err
 * 
 * cdef cudaError_t _cudaMalloc(void** devPtr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMalloc(void **__pyx_v_devPtr, size_t __pyx_v_size) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMalloc", __pyx_f[0], 2611, 1, __PYX_ERR(0, 2611, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2612
 * 
 * cdef cudaError_t _cudaMalloc(void** devPtr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2613
 * cdef cudaError_t _cudaMalloc(void** devPtr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2613, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2614
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAlloc_v2(<cydriver.CUdeviceptr*>devPtr, size)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2615
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemAlloc_v2(<cydriver.CUdeviceptr*>devPtr, size)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2614
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAlloc_v2(<cydriver.CUdeviceptr*>devPtr, size)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2616
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAlloc_v2(<cydriver.CUdeviceptr*>devPtr, size)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAlloc_v2(((CUdeviceptr *)__pyx_v_devPtr), __pyx_v_size); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2616, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2617
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAlloc_v2(<cydriver.CUdeviceptr*>devPtr, size)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2618
 *     err = <cudaError_t>cydriver._cuMemAlloc_v2(<cydriver.CUdeviceptr*>devPtr, size)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2618, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2617
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAlloc_v2(<cydriver.CUdeviceptr*>devPtr, size)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2619
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaFree(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2611
 *     return err
 * 
 * cdef cudaError_t _cudaMalloc(void** devPtr, size_t size) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMalloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2621
 *     return err
 * 
 * cdef cudaError_t _cudaFree(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFree(void *__pyx_v_devPtr) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaFree", __pyx_f[0], 2621, 1, __PYX_ERR(0, 2621, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2622
 * 
 * cdef cudaError_t _cudaFree(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2623
 * cdef cudaError_t _cudaFree(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2623, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2624
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFree_v2(<cydriver.CUdeviceptr>devPtr)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2625
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemFree_v2(<cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2624
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFree_v2(<cydriver.CUdeviceptr>devPtr)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2626
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFree_v2(<cydriver.CUdeviceptr>devPtr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemFree_v2(((CUdeviceptr)__pyx_v_devPtr)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2626, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2627
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFree_v2(<cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2628
 *     err = <cudaError_t>cydriver._cuMemFree_v2(<cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2628, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2627
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFree_v2(<cydriver.CUdeviceptr>devPtr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2629
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaFreeHost(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2621
 *     return err
 * 
 * cdef cudaError_t _cudaFree(void* devPtr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaFree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2631
 *     return err
 * 
 * cdef cudaError_t _cudaFreeHost(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFreeHost(void *__pyx_v_ptr) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaFreeHost", __pyx_f[0], 2631, 1, __PYX_ERR(0, 2631, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2632
 * 
 * cdef cudaError_t _cudaFreeHost(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2633
 * cdef cudaError_t _cudaFreeHost(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2633, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2634
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFreeHost(ptr)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2635
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemFreeHost(ptr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2634
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFreeHost(ptr)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2636
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFreeHost(ptr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemFreeHost(__pyx_v_ptr); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2636, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2637
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFreeHost(ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2638
 *     err = <cudaError_t>cydriver._cuMemFreeHost(ptr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2638, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2637
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFreeHost(ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2639
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaFreeArray(cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2631
 *     return err
 * 
 * cdef cudaError_t _cudaFreeHost(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaFreeHost", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2641
 *     return err
 * 
 * cdef cudaError_t _cudaFreeArray(cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFreeArray(cudaArray_t __pyx_v_array) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaFreeArray", __pyx_f[0], 2641, 1, __PYX_ERR(0, 2641, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2642
 * 
 * cdef cudaError_t _cudaFreeArray(cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2643
 * cdef cudaError_t _cudaFreeArray(cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2643, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2644
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuArrayDestroy(<cydriver.CUarray>array)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2645
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuArrayDestroy(<cydriver.CUarray>array)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2644
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuArrayDestroy(<cydriver.CUarray>array)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2646
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuArrayDestroy(<cydriver.CUarray>array)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayDestroy(((CUarray)__pyx_v_array)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2646, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2647
 *         return err
 *     err = <cudaError_t>cydriver._cuArrayDestroy(<cydriver.CUarray>array)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2648
 *     err = <cudaError_t>cydriver._cuArrayDestroy(<cydriver.CUarray>array)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2648, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2647
 *         return err
 *     err = <cudaError_t>cydriver._cuArrayDestroy(<cydriver.CUarray>array)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2649
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2641
 *     return err
 * 
 * cdef cudaError_t _cudaFreeArray(cudaArray_t array) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaFreeArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2651
 *     return err
 * 
 * cdef cudaError_t _cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFreeMipmappedArray(cudaMipmappedArray_t __pyx_v_mipmappedArray) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaFreeMipmappedArray", __pyx_f[0], 2651, 1, __PYX_ERR(0, 2651, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2652
 * 
 * cdef cudaError_t _cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2653
 * cdef cudaError_t _cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2653, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2654
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMipmappedArrayDestroy(<cydriver.CUmipmappedArray>mipmappedArray)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2655
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMipmappedArrayDestroy(<cydriver.CUmipmappedArray>mipmappedArray)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2654
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMipmappedArrayDestroy(<cydriver.CUmipmappedArray>mipmappedArray)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2656
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMipmappedArrayDestroy(<cydriver.CUmipmappedArray>mipmappedArray)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayDestroy(((CUmipmappedArray)__pyx_v_mipmappedArray)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2656, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2657
 *         return err
 *     err = <cudaError_t>cydriver._cuMipmappedArrayDestroy(<cydriver.CUmipmappedArray>mipmappedArray)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2658
 *     err = <cudaError_t>cydriver._cuMipmappedArrayDestroy(<cydriver.CUmipmappedArray>mipmappedArray)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2658, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2657
 *         return err
 *     err = <cudaError_t>cydriver._cuMipmappedArrayDestroy(<cydriver.CUmipmappedArray>mipmappedArray)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2659
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaHostAlloc(void** pHost, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2651
 *     return err
 * 
 * cdef cudaError_t _cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaFreeMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2661
 *     return err
 * 
 * cdef cudaError_t _cudaHostAlloc(void** pHost, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaHostAlloc(void **__pyx_v_pHost, size_t __pyx_v_size, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaHostAlloc", __pyx_f[0], 2661, 1, __PYX_ERR(0, 2661, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2662
 * 
 * cdef cudaError_t _cudaHostAlloc(void** pHost, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2663
 * cdef cudaError_t _cudaHostAlloc(void** pHost, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2663, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2664
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostAlloc(pHost, size, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2665
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemHostAlloc(pHost, size, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2664
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostAlloc(pHost, size, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2666
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostAlloc(pHost, size, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostAlloc(__pyx_v_pHost, __pyx_v_size, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2666, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2667
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostAlloc(pHost, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2668
 *     err = <cudaError_t>cydriver._cuMemHostAlloc(pHost, size, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2668, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2667
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostAlloc(pHost, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2669
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaHostRegister(void* ptr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2661
 *     return err
 * 
 * cdef cudaError_t _cudaHostAlloc(void** pHost, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaHostAlloc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2671
 *     return err
 * 
 * cdef cudaError_t _cudaHostRegister(void* ptr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaHostRegister(void *__pyx_v_ptr, size_t __pyx_v_size, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaHostRegister", __pyx_f[0], 2671, 1, __PYX_ERR(0, 2671, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2672
 * 
 * cdef cudaError_t _cudaHostRegister(void* ptr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2673
 * cdef cudaError_t _cudaHostRegister(void* ptr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2673, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2674
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostRegister_v2(ptr, size, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2675
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemHostRegister_v2(ptr, size, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2674
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostRegister_v2(ptr, size, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2676
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostRegister_v2(ptr, size, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostRegister_v2(__pyx_v_ptr, __pyx_v_size, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2676, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2677
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostRegister_v2(ptr, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2678
 *     err = <cudaError_t>cydriver._cuMemHostRegister_v2(ptr, size, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2678, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2677
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostRegister_v2(ptr, size, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2679
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaHostUnregister(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2671
 *     return err
 * 
 * cdef cudaError_t _cudaHostRegister(void* ptr, size_t size, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaHostRegister", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2681
 *     return err
 * 
 * cdef cudaError_t _cudaHostUnregister(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaHostUnregister(void *__pyx_v_ptr) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaHostUnregister", __pyx_f[0], 2681, 1, __PYX_ERR(0, 2681, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2682
 * 
 * cdef cudaError_t _cudaHostUnregister(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2683
 * cdef cudaError_t _cudaHostUnregister(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2683, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2684
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostUnregister(ptr)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2685
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemHostUnregister(ptr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2684
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostUnregister(ptr)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2686
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostUnregister(ptr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostUnregister(__pyx_v_ptr); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2686, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2687
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostUnregister(ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2688
 *     err = <cudaError_t>cydriver._cuMemHostUnregister(ptr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2688, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2687
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostUnregister(ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2689
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2681
 *     return err
 * 
 * cdef cudaError_t _cudaHostUnregister(void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaHostUnregister", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2691
 *     return err
 * 
 * cdef cudaError_t _cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaHostGetDevicePointer(void **__pyx_v_pDevice, void *__pyx_v_pHost, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaHostGetDevicePointer", __pyx_f[0], 2691, 1, __PYX_ERR(0, 2691, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2692
 * 
 * cdef cudaError_t _cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2693
 * cdef cudaError_t _cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2693, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2694
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostGetDevicePointer_v2(<cydriver.CUdeviceptr*>pDevice, pHost, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2695
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemHostGetDevicePointer_v2(<cydriver.CUdeviceptr*>pDevice, pHost, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2694
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostGetDevicePointer_v2(<cydriver.CUdeviceptr*>pDevice, pHost, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2696
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostGetDevicePointer_v2(<cydriver.CUdeviceptr*>pDevice, pHost, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostGetDevicePointer_v2(((CUdeviceptr *)__pyx_v_pDevice), __pyx_v_pHost, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2696, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2697
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostGetDevicePointer_v2(<cydriver.CUdeviceptr*>pDevice, pHost, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2698
 *     err = <cudaError_t>cydriver._cuMemHostGetDevicePointer_v2(<cydriver.CUdeviceptr*>pDevice, pHost, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2698, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2697
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostGetDevicePointer_v2(<cydriver.CUdeviceptr*>pDevice, pHost, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2699
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaHostGetFlags(unsigned int* pFlags, void* pHost) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2691
 *     return err
 * 
 * cdef cudaError_t _cudaHostGetDevicePointer(void** pDevice, void* pHost, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaHostGetDevicePointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2701
 *     return err
 * 
 * cdef cudaError_t _cudaHostGetFlags(unsigned int* pFlags, void* pHost) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaHostGetFlags(unsigned int *__pyx_v_pFlags, void *__pyx_v_pHost) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaHostGetFlags", __pyx_f[0], 2701, 1, __PYX_ERR(0, 2701, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2702
 * 
 * cdef cudaError_t _cudaHostGetFlags(unsigned int* pFlags, void* pHost) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2703
 * cdef cudaError_t _cudaHostGetFlags(unsigned int* pFlags, void* pHost) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2703, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2704
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostGetFlags(pFlags, pHost)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2705
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemHostGetFlags(pFlags, pHost)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2704
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostGetFlags(pFlags, pHost)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2706
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostGetFlags(pFlags, pHost)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostGetFlags(__pyx_v_pFlags, __pyx_v_pHost); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2706, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2707
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostGetFlags(pFlags, pHost)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2708
 *     err = <cudaError_t>cydriver._cuMemHostGetFlags(pFlags, pHost)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2708, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2707
 *         return err
 *     err = <cudaError_t>cydriver._cuMemHostGetFlags(pFlags, pHost)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2709
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2701
 *     return err
 * 
 * cdef cudaError_t _cudaHostGetFlags(unsigned int* pFlags, void* pHost) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaHostGetFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2711
 *     return err
 * 
 * cdef cudaError_t _cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetMipmappedArrayLevel(cudaArray_t *__pyx_v_levelArray, cudaMipmappedArray_const_t __pyx_v_mipmappedArray, unsigned int __pyx_v_level) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetMipmappedArrayLevel", __pyx_f[0], 2711, 1, __PYX_ERR(0, 2711, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2712
 * 
 * cdef cudaError_t _cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2713
 * cdef cudaError_t _cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2713, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2714
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetLevel(<cydriver.CUarray*>levelArray, <cydriver.CUmipmappedArray>mipmappedArray, level)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2715
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetLevel(<cydriver.CUarray*>levelArray, <cydriver.CUmipmappedArray>mipmappedArray, level)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2714
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetLevel(<cydriver.CUarray*>levelArray, <cydriver.CUmipmappedArray>mipmappedArray, level)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2716
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetLevel(<cydriver.CUarray*>levelArray, <cydriver.CUmipmappedArray>mipmappedArray, level)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayGetLevel(((CUarray *)__pyx_v_levelArray), ((CUmipmappedArray)__pyx_v_mipmappedArray), __pyx_v_level); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2716, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2717
 *         return err
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetLevel(<cydriver.CUarray*>levelArray, <cydriver.CUmipmappedArray>mipmappedArray, level)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2718
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetLevel(<cydriver.CUarray*>levelArray, <cydriver.CUmipmappedArray>mipmappedArray, level)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2718, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2717
 *         return err
 *     err = <cudaError_t>cydriver._cuMipmappedArrayGetLevel(<cydriver.CUarray*>levelArray, <cydriver.CUmipmappedArray>mipmappedArray, level)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2719
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemGetInfo(size_t* free, size_t* total) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2711
 *     return err
 * 
 * cdef cudaError_t _cudaGetMipmappedArrayLevel(cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetMipmappedArrayLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2721
 *     return err
 * 
 * cdef cudaError_t _cudaMemGetInfo(size_t* free, size_t* total) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemGetInfo(size_t *__pyx_v_free, size_t *__pyx_v_total) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemGetInfo", __pyx_f[0], 2721, 1, __PYX_ERR(0, 2721, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2722
 * 
 * cdef cudaError_t _cudaMemGetInfo(size_t* free, size_t* total) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2723
 * cdef cudaError_t _cudaMemGetInfo(size_t* free, size_t* total) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2723, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2724
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemGetInfo_v2(free, total)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2725
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemGetInfo_v2(free, total)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2724
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemGetInfo_v2(free, total)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2726
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemGetInfo_v2(free, total)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemGetInfo_v2(__pyx_v_free, __pyx_v_total); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2726, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2727
 *         return err
 *     err = <cudaError_t>cydriver._cuMemGetInfo_v2(free, total)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2728
 *     err = <cudaError_t>cydriver._cuMemGetInfo_v2(free, total)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2728, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2727
 *         return err
 *     err = <cudaError_t>cydriver._cuMemGetInfo_v2(free, total)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2729
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2721
 *     return err
 * 
 * cdef cudaError_t _cudaMemGetInfo(size_t* free, size_t* total) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemGetInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2731
 *     return err
 * 
 * cdef cudaError_t _cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaArrayGetPlane(cudaArray_t *__pyx_v_pPlaneArray, cudaArray_t __pyx_v_hArray, unsigned int __pyx_v_planeIdx) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaArrayGetPlane", __pyx_f[0], 2731, 1, __PYX_ERR(0, 2731, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2732
 * 
 * cdef cudaError_t _cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2733
 * cdef cudaError_t _cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2733, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2734
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuArrayGetPlane(<cydriver.CUarray*>pPlaneArray, <cydriver.CUarray>hArray, planeIdx)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2735
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuArrayGetPlane(<cydriver.CUarray*>pPlaneArray, <cydriver.CUarray>hArray, planeIdx)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2734
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuArrayGetPlane(<cydriver.CUarray*>pPlaneArray, <cydriver.CUarray>hArray, planeIdx)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2736
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuArrayGetPlane(<cydriver.CUarray*>pPlaneArray, <cydriver.CUarray>hArray, planeIdx)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayGetPlane(((CUarray *)__pyx_v_pPlaneArray), ((CUarray)__pyx_v_hArray), __pyx_v_planeIdx); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2736, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2737
 *         return err
 *     err = <cudaError_t>cydriver._cuArrayGetPlane(<cydriver.CUarray*>pPlaneArray, <cydriver.CUarray>hArray, planeIdx)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2738
 *     err = <cudaError_t>cydriver._cuArrayGetPlane(<cydriver.CUarray*>pPlaneArray, <cydriver.CUarray>hArray, planeIdx)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2738, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2737
 *         return err
 *     err = <cudaError_t>cydriver._cuArrayGetPlane(<cydriver.CUarray*>pPlaneArray, <cydriver.CUarray>hArray, planeIdx)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2739
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemset(void* devPtr, int value, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2731
 *     return err
 * 
 * cdef cudaError_t _cudaArrayGetPlane(cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaArrayGetPlane", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2741
 *     return err
 * 
 * cdef cudaError_t _cudaMemset(void* devPtr, int value, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemset(void *__pyx_v_devPtr, int __pyx_v_value, size_t __pyx_v_count) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemset", __pyx_f[0], 2741, 1, __PYX_ERR(0, 2741, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2742
 * 
 * cdef cudaError_t _cudaMemset(void* devPtr, int value, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2743
 * cdef cudaError_t _cudaMemset(void* devPtr, int value, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2743, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2744
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD8_v2(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2745
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemsetD8_v2(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2744
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD8_v2(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2746
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD8_v2(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD8_v2(((CUdeviceptr)__pyx_v_devPtr), ((unsigned char)__pyx_v_value), __pyx_v_count); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2746, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2747
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD8_v2(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2748
 *     err = <cudaError_t>cydriver._cuMemsetD8_v2(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2748, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2747
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD8_v2(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2749
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2741
 *     return err
 * 
 * cdef cudaError_t _cudaMemset(void* devPtr, int value, size_t count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2751
 *     return err
 * 
 * cdef cudaError_t _cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemset2D(void *__pyx_v_devPtr, size_t __pyx_v_pitch, int __pyx_v_value, size_t __pyx_v_width, size_t __pyx_v_height) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemset2D", __pyx_f[0], 2751, 1, __PYX_ERR(0, 2751, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2752
 * 
 * cdef cudaError_t _cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2753
 * cdef cudaError_t _cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2753, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2754
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD2D8_v2(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2755
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemsetD2D8_v2(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2754
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD2D8_v2(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2756
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD2D8_v2(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD2D8_v2(((CUdeviceptr)__pyx_v_devPtr), __pyx_v_pitch, ((unsigned char)__pyx_v_value), __pyx_v_width, __pyx_v_height); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2756, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2757
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD2D8_v2(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2758
 *     err = <cudaError_t>cydriver._cuMemsetD2D8_v2(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2758, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2757
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD2D8_v2(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2759
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2751
 *     return err
 * 
 * cdef cudaError_t _cudaMemset2D(void* devPtr, size_t pitch, int value, size_t width, size_t height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemset2D", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2761
 *     return err
 * 
 * cdef cudaError_t _cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemsetAsync(void *__pyx_v_devPtr, int __pyx_v_value, size_t __pyx_v_count, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemsetAsync", __pyx_f[0], 2761, 1, __PYX_ERR(0, 2761, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2762
 * 
 * cdef cudaError_t _cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2763
 * cdef cudaError_t _cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2763, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2764
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD8Async(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count, <cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2765
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemsetD8Async(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2764
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD8Async(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count, <cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2766
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD8Async(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count, <cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD8Async(((CUdeviceptr)__pyx_v_devPtr), ((unsigned char)__pyx_v_value), __pyx_v_count, ((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2766, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2767
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD8Async(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2768
 *     err = <cudaError_t>cydriver._cuMemsetD8Async(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2768, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2767
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD8Async(<cydriver.CUdeviceptr>devPtr, <unsigned char>value, count, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2769
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2761
 *     return err
 * 
 * cdef cudaError_t _cudaMemsetAsync(void* devPtr, int value, size_t count, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemsetAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2771
 *     return err
 * 
 * cdef cudaError_t _cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemset2DAsync(void *__pyx_v_devPtr, size_t __pyx_v_pitch, int __pyx_v_value, size_t __pyx_v_width, size_t __pyx_v_height, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemset2DAsync", __pyx_f[0], 2771, 1, __PYX_ERR(0, 2771, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2772
 * 
 * cdef cudaError_t _cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2773
 * cdef cudaError_t _cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2773, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2774
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD2D8Async(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2775
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemsetD2D8Async(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2774
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD2D8Async(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2776
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD2D8Async(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD2D8Async(((CUdeviceptr)__pyx_v_devPtr), __pyx_v_pitch, ((unsigned char)__pyx_v_value), __pyx_v_width, __pyx_v_height, ((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2776, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2777
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD2D8Async(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2778
 *     err = <cudaError_t>cydriver._cuMemsetD2D8Async(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2778, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2777
 *         return err
 *     err = <cudaError_t>cydriver._cuMemsetD2D8Async(<cydriver.CUdeviceptr>devPtr, pitch, <unsigned char>value, width, height, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2779
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2771
 *     return err
 * 
 * cdef cudaError_t _cudaMemset2DAsync(void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemset2DAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2781
 *     return err
 * 
 * cdef cudaError_t _cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPrefetchAsync(void const *__pyx_v_devPtr, size_t __pyx_v_count, int __pyx_v_dstDevice, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPrefetchAsync", __pyx_f[0], 2781, 1, __PYX_ERR(0, 2781, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2782
 * 
 * cdef cudaError_t _cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2783
 * cdef cudaError_t _cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2783, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2784
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUdevice>dstDevice, <cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2785
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUdevice>dstDevice, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2784
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUdevice>dstDevice, <cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2786
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUdevice>dstDevice, <cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPrefetchAsync(((CUdeviceptr)__pyx_v_devPtr), __pyx_v_count, ((CUdevice)__pyx_v_dstDevice), ((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2786, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2787
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUdevice>dstDevice, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2788
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUdevice>dstDevice, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2788, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2787
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync(<cydriver.CUdeviceptr>devPtr, count, <cydriver.CUdevice>dstDevice, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2789
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPrefetchAsync_v2(const void* devPtr, size_t count, cudaMemLocation location, unsigned int flags, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2781
 *     return err
 * 
 * cdef cudaError_t _cudaMemPrefetchAsync(const void* devPtr, size_t count, int dstDevice, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPrefetchAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2791
 *     return err
 * 
 * cdef cudaError_t _cudaMemPrefetchAsync_v2(const void* devPtr, size_t count, cudaMemLocation location, unsigned int flags, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUmemLocation _driver_location
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPrefetchAsync_v2(void const *__pyx_v_devPtr, size_t __pyx_v_count, struct cudaMemLocation __pyx_v_location, unsigned int __pyx_v_flags, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  CUmemLocation __pyx_v__driver_location;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  CUresult __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPrefetchAsync_v2", __pyx_f[0], 2791, 1, __PYX_ERR(0, 2791, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2792
 * 
 * cdef cudaError_t _cudaMemPrefetchAsync_v2(const void* devPtr, size_t count, cudaMemLocation location, unsigned int flags, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUmemLocation _driver_location
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2794
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUmemLocation _driver_location
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2794, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2795
 *     cdef cydriver.CUmemLocation _driver_location
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     _driver_location.type = <cydriver.CUmemLocationType>location.type
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2796
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     _driver_location.type = <cydriver.CUmemLocationType>location.type
 *     _driver_location.id = location.id
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2795
 *     cdef cydriver.CUmemLocation _driver_location
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     _driver_location.type = <cydriver.CUmemLocationType>location.type
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2797
 *     if err != cudaSuccess:
 *         return err
 *     _driver_location.type = <cydriver.CUmemLocationType>location.type             # <<<<<<<<<<<<<<
 *     _driver_location.id = location.id
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync_v2(<cydriver.CUdeviceptr>devPtr, count, _driver_location, flags, <cydriver.CUstream>stream)
 */
  __pyx_v__driver_location.type = ((CUmemLocationType)__pyx_v_location.type);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2798
 *         return err
 *     _driver_location.type = <cydriver.CUmemLocationType>location.type
 *     _driver_location.id = location.id             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync_v2(<cydriver.CUdeviceptr>devPtr, count, _driver_location, flags, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
  __pyx_t_3 = __pyx_v_location.id;
  __pyx_v__driver_location.id = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2799
 *     _driver_location.type = <cydriver.CUmemLocationType>location.type
 *     _driver_location.id = location.id
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync_v2(<cydriver.CUdeviceptr>devPtr, count, _driver_location, flags, <cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_4 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPrefetchAsync_v2(((CUdeviceptr)__pyx_v_devPtr), __pyx_v_count, __pyx_v__driver_location, __pyx_v_flags, ((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_4 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2799, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_4);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2800
 *     _driver_location.id = location.id
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync_v2(<cydriver.CUdeviceptr>devPtr, count, _driver_location, flags, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2801
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync_v2(<cydriver.CUdeviceptr>devPtr, count, _driver_location, flags, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2801, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2800
 *     _driver_location.id = location.id
 *     err = <cudaError_t>cydriver._cuMemPrefetchAsync_v2(<cydriver.CUdeviceptr>devPtr, count, _driver_location, flags, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2802
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2791
 *     return err
 * 
 * cdef cudaError_t _cudaMemPrefetchAsync_v2(const void* devPtr, size_t count, cudaMemLocation location, unsigned int flags, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUmemLocation _driver_location
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPrefetchAsync_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2804
 *     return err
 * 
 * cdef cudaError_t _cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocAsync(void **__pyx_v_devPtr, size_t __pyx_v_size, cudaStream_t __pyx_v_hStream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMallocAsync", __pyx_f[0], 2804, 1, __PYX_ERR(0, 2804, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2805
 * 
 * cdef cudaError_t _cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2806
 * cdef cudaError_t _cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2806, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2807
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocAsync(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUstream>hStream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2808
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemAllocAsync(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUstream>hStream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2807
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocAsync(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUstream>hStream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2809
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocAsync(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUstream>hStream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAllocAsync(((CUdeviceptr *)__pyx_v_devPtr), __pyx_v_size, ((CUstream)__pyx_v_hStream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2809, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2810
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocAsync(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUstream>hStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2811
 *     err = <cudaError_t>cydriver._cuMemAllocAsync(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUstream>hStream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2811, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2810
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocAsync(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUstream>hStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2812
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaFreeAsync(void* devPtr, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2804
 *     return err
 * 
 * cdef cudaError_t _cudaMallocAsync(void** devPtr, size_t size, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMallocAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2814
 *     return err
 * 
 * cdef cudaError_t _cudaFreeAsync(void* devPtr, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFreeAsync(void *__pyx_v_devPtr, cudaStream_t __pyx_v_hStream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaFreeAsync", __pyx_f[0], 2814, 1, __PYX_ERR(0, 2814, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2815
 * 
 * cdef cudaError_t _cudaFreeAsync(void* devPtr, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2816
 * cdef cudaError_t _cudaFreeAsync(void* devPtr, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2816, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2817
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFreeAsync(<cydriver.CUdeviceptr>devPtr, <cydriver.CUstream>hStream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2818
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemFreeAsync(<cydriver.CUdeviceptr>devPtr, <cydriver.CUstream>hStream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2817
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFreeAsync(<cydriver.CUdeviceptr>devPtr, <cydriver.CUstream>hStream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2819
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFreeAsync(<cydriver.CUdeviceptr>devPtr, <cydriver.CUstream>hStream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemFreeAsync(((CUdeviceptr)__pyx_v_devPtr), ((CUstream)__pyx_v_hStream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2819, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2820
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFreeAsync(<cydriver.CUdeviceptr>devPtr, <cydriver.CUstream>hStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2821
 *     err = <cudaError_t>cydriver._cuMemFreeAsync(<cydriver.CUdeviceptr>devPtr, <cydriver.CUstream>hStream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2821, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2820
 *         return err
 *     err = <cudaError_t>cydriver._cuMemFreeAsync(<cydriver.CUdeviceptr>devPtr, <cydriver.CUstream>hStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2822
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2814
 *     return err
 * 
 * cdef cudaError_t _cudaFreeAsync(void* devPtr, cudaStream_t hStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaFreeAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2824
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolTrimTo(cudaMemPool_t __pyx_v_memPool, size_t __pyx_v_minBytesToKeep) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPoolTrimTo", __pyx_f[0], 2824, 1, __PYX_ERR(0, 2824, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2825
 * 
 * cdef cudaError_t _cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2826
 * cdef cudaError_t _cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2826, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2827
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolTrimTo(<cydriver.CUmemoryPool>memPool, minBytesToKeep)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2828
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPoolTrimTo(<cydriver.CUmemoryPool>memPool, minBytesToKeep)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2827
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolTrimTo(<cydriver.CUmemoryPool>memPool, minBytesToKeep)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2829
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolTrimTo(<cydriver.CUmemoryPool>memPool, minBytesToKeep)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolTrimTo(((CUmemoryPool)__pyx_v_memPool), __pyx_v_minBytesToKeep); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2829, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2830
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolTrimTo(<cydriver.CUmemoryPool>memPool, minBytesToKeep)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2831
 *     err = <cudaError_t>cydriver._cuMemPoolTrimTo(<cydriver.CUmemoryPool>memPool, minBytesToKeep)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2831, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2830
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolTrimTo(<cydriver.CUmemoryPool>memPool, minBytesToKeep)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2832
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2824
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPoolTrimTo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2834
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolSetAttribute(cudaMemPool_t __pyx_v_memPool, enum cudaMemPoolAttr __pyx_v_attr, void *__pyx_v_value) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPoolSetAttribute", __pyx_f[0], 2834, 1, __PYX_ERR(0, 2834, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2835
 * 
 * cdef cudaError_t _cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2836
 * cdef cudaError_t _cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2836, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2837
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolSetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2838
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPoolSetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2837
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolSetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2839
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolSetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolSetAttribute(((CUmemoryPool)__pyx_v_memPool), ((CUmemPool_attribute)__pyx_v_attr), __pyx_v_value); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2839, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2840
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolSetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2841
 *     err = <cudaError_t>cydriver._cuMemPoolSetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2841, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2840
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolSetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2842
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2834
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPoolSetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2844
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolGetAttribute(cudaMemPool_t __pyx_v_memPool, enum cudaMemPoolAttr __pyx_v_attr, void *__pyx_v_value) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPoolGetAttribute", __pyx_f[0], 2844, 1, __PYX_ERR(0, 2844, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2845
 * 
 * cdef cudaError_t _cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2846
 * cdef cudaError_t _cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2846, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2847
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolGetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2848
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPoolGetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2847
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolGetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2849
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolGetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolGetAttribute(((CUmemoryPool)__pyx_v_memPool), ((CUmemPool_attribute)__pyx_v_attr), __pyx_v_value); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2849, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2850
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolGetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2851
 *     err = <cudaError_t>cydriver._cuMemPoolGetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2851, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2850
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolGetAttribute(<cydriver.CUmemoryPool>memPool, <cydriver.CUmemPool_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2852
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2844
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPoolGetAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2854
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolGetAccess(enum cudaMemAccessFlags *__pyx_v_flags, cudaMemPool_t __pyx_v_memPool, struct cudaMemLocation *__pyx_v_location) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPoolGetAccess", __pyx_f[0], 2854, 1, __PYX_ERR(0, 2854, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2855
 * 
 * cdef cudaError_t _cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2856
 * cdef cudaError_t _cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2856, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2857
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolGetAccess(<cydriver.CUmemAccess_flags*>flags, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemLocation*>location)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2858
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPoolGetAccess(<cydriver.CUmemAccess_flags*>flags, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemLocation*>location)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2857
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolGetAccess(<cydriver.CUmemAccess_flags*>flags, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemLocation*>location)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2859
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolGetAccess(<cydriver.CUmemAccess_flags*>flags, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemLocation*>location)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolGetAccess(((CUmemAccess_flags *)__pyx_v_flags), ((CUmemoryPool)__pyx_v_memPool), ((CUmemLocation *)__pyx_v_location)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2859, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2860
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolGetAccess(<cydriver.CUmemAccess_flags*>flags, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemLocation*>location)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2861
 *     err = <cudaError_t>cydriver._cuMemPoolGetAccess(<cydriver.CUmemAccess_flags*>flags, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemLocation*>location)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2861, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2860
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolGetAccess(<cydriver.CUmemAccess_flags*>flags, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemLocation*>location)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2862
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2854
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolGetAccess(cudaMemAccessFlags* flags, cudaMemPool_t memPool, cudaMemLocation* location) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPoolGetAccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2864
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolCreate(cudaMemPool_t *__pyx_v_memPool, struct cudaMemPoolProps const *__pyx_v_poolProps) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPoolCreate", __pyx_f[0], 2864, 1, __PYX_ERR(0, 2864, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2865
 * 
 * cdef cudaError_t _cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2866
 * cdef cudaError_t _cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2866, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2867
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolCreate(<cydriver.CUmemoryPool*>memPool, <cydriver.CUmemPoolProps*>poolProps)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2868
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPoolCreate(<cydriver.CUmemoryPool*>memPool, <cydriver.CUmemPoolProps*>poolProps)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2867
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolCreate(<cydriver.CUmemoryPool*>memPool, <cydriver.CUmemPoolProps*>poolProps)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2869
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolCreate(<cydriver.CUmemoryPool*>memPool, <cydriver.CUmemPoolProps*>poolProps)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolCreate(((CUmemoryPool *)__pyx_v_memPool), ((CUmemPoolProps *)__pyx_v_poolProps)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2869, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2870
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolCreate(<cydriver.CUmemoryPool*>memPool, <cydriver.CUmemPoolProps*>poolProps)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2871
 *     err = <cudaError_t>cydriver._cuMemPoolCreate(<cydriver.CUmemoryPool*>memPool, <cydriver.CUmemPoolProps*>poolProps)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2871, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2870
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolCreate(<cydriver.CUmemoryPool*>memPool, <cydriver.CUmemPoolProps*>poolProps)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2872
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPoolDestroy(cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2864
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolCreate(cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPoolCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2874
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolDestroy(cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolDestroy(cudaMemPool_t __pyx_v_memPool) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPoolDestroy", __pyx_f[0], 2874, 1, __PYX_ERR(0, 2874, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2875
 * 
 * cdef cudaError_t _cudaMemPoolDestroy(cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2876
 * cdef cudaError_t _cudaMemPoolDestroy(cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2876, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2877
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolDestroy(<cydriver.CUmemoryPool>memPool)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2878
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPoolDestroy(<cydriver.CUmemoryPool>memPool)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2877
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolDestroy(<cydriver.CUmemoryPool>memPool)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2879
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolDestroy(<cydriver.CUmemoryPool>memPool)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolDestroy(((CUmemoryPool)__pyx_v_memPool)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2879, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2880
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolDestroy(<cydriver.CUmemoryPool>memPool)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2881
 *     err = <cudaError_t>cydriver._cuMemPoolDestroy(<cydriver.CUmemoryPool>memPool)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2881, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2880
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolDestroy(<cydriver.CUmemoryPool>memPool)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2882
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2874
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolDestroy(cudaMemPool_t memPool) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPoolDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2884
 *     return err
 * 
 * cdef cudaError_t _cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocFromPoolAsync(void **__pyx_v_ptr, size_t __pyx_v_size, cudaMemPool_t __pyx_v_memPool, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMallocFromPoolAsync", __pyx_f[0], 2884, 1, __PYX_ERR(0, 2884, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2885
 * 
 * cdef cudaError_t _cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2886
 * cdef cudaError_t _cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2886, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2887
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocFromPoolAsync(<cydriver.CUdeviceptr*>ptr, size, <cydriver.CUmemoryPool>memPool, <cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2888
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemAllocFromPoolAsync(<cydriver.CUdeviceptr*>ptr, size, <cydriver.CUmemoryPool>memPool, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2887
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocFromPoolAsync(<cydriver.CUdeviceptr*>ptr, size, <cydriver.CUmemoryPool>memPool, <cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2889
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocFromPoolAsync(<cydriver.CUdeviceptr*>ptr, size, <cydriver.CUmemoryPool>memPool, <cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAllocFromPoolAsync(((CUdeviceptr *)__pyx_v_ptr), __pyx_v_size, ((CUmemoryPool)__pyx_v_memPool), ((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2889, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2890
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocFromPoolAsync(<cydriver.CUdeviceptr*>ptr, size, <cydriver.CUmemoryPool>memPool, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2891
 *     err = <cudaError_t>cydriver._cuMemAllocFromPoolAsync(<cydriver.CUdeviceptr*>ptr, size, <cydriver.CUmemoryPool>memPool, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2891, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2890
 *         return err
 *     err = <cudaError_t>cydriver._cuMemAllocFromPoolAsync(<cydriver.CUdeviceptr*>ptr, size, <cydriver.CUmemoryPool>memPool, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2892
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2884
 *     return err
 * 
 * cdef cudaError_t _cudaMallocFromPoolAsync(void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMallocFromPoolAsync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2894
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolExportToShareableHandle(void *__pyx_v_shareableHandle, cudaMemPool_t __pyx_v_memPool, enum cudaMemAllocationHandleType __pyx_v_handleType, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPoolExportToShareableHandle", __pyx_f[0], 2894, 1, __PYX_ERR(0, 2894, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2895
 * 
 * cdef cudaError_t _cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2896
 * cdef cudaError_t _cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2896, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2897
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolExportToShareableHandle(shareableHandle, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2898
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPoolExportToShareableHandle(shareableHandle, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2897
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolExportToShareableHandle(shareableHandle, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2899
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolExportToShareableHandle(shareableHandle, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolExportToShareableHandle(__pyx_v_shareableHandle, ((CUmemoryPool)__pyx_v_memPool), ((CUmemAllocationHandleType)__pyx_v_handleType), ((unsigned PY_LONG_LONG)__pyx_v_flags)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2899, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2900
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolExportToShareableHandle(shareableHandle, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2901
 *     err = <cudaError_t>cydriver._cuMemPoolExportToShareableHandle(shareableHandle, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2901, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2900
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolExportToShareableHandle(shareableHandle, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2902
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2894
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolExportToShareableHandle(void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPoolExportToShareableHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2904
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolImportFromShareableHandle(cudaMemPool_t *__pyx_v_memPool, void *__pyx_v_shareableHandle, enum cudaMemAllocationHandleType __pyx_v_handleType, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPoolImportFromShareableHandle", __pyx_f[0], 2904, 1, __PYX_ERR(0, 2904, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2905
 * 
 * cdef cudaError_t _cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2906
 * cdef cudaError_t _cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2906, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2907
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolImportFromShareableHandle(<cydriver.CUmemoryPool*>memPool, shareableHandle, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2908
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPoolImportFromShareableHandle(<cydriver.CUmemoryPool*>memPool, shareableHandle, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2907
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolImportFromShareableHandle(<cydriver.CUmemoryPool*>memPool, shareableHandle, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2909
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolImportFromShareableHandle(<cydriver.CUmemoryPool*>memPool, shareableHandle, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolImportFromShareableHandle(((CUmemoryPool *)__pyx_v_memPool), __pyx_v_shareableHandle, ((CUmemAllocationHandleType)__pyx_v_handleType), ((unsigned PY_LONG_LONG)__pyx_v_flags)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2909, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2910
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolImportFromShareableHandle(<cydriver.CUmemoryPool*>memPool, shareableHandle, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2911
 *     err = <cudaError_t>cydriver._cuMemPoolImportFromShareableHandle(<cydriver.CUmemoryPool*>memPool, shareableHandle, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2911, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2910
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolImportFromShareableHandle(<cydriver.CUmemoryPool*>memPool, shareableHandle, <cydriver.CUmemAllocationHandleType>handleType, <unsigned long long>flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2912
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2904
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolImportFromShareableHandle(cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPoolImportFromShareableHandle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2914
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolExportPointer(struct cudaMemPoolPtrExportData *__pyx_v_exportData, void *__pyx_v_ptr) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPoolExportPointer", __pyx_f[0], 2914, 1, __PYX_ERR(0, 2914, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2915
 * 
 * cdef cudaError_t _cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2916
 * cdef cudaError_t _cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2916, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2917
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolExportPointer(<cydriver.CUmemPoolPtrExportData*>exportData, <cydriver.CUdeviceptr>ptr)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2918
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPoolExportPointer(<cydriver.CUmemPoolPtrExportData*>exportData, <cydriver.CUdeviceptr>ptr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2917
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolExportPointer(<cydriver.CUmemPoolPtrExportData*>exportData, <cydriver.CUdeviceptr>ptr)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2919
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolExportPointer(<cydriver.CUmemPoolPtrExportData*>exportData, <cydriver.CUdeviceptr>ptr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolExportPointer(((CUmemPoolPtrExportData *)__pyx_v_exportData), ((CUdeviceptr)__pyx_v_ptr)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2919, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2920
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolExportPointer(<cydriver.CUmemPoolPtrExportData*>exportData, <cydriver.CUdeviceptr>ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2921
 *     err = <cudaError_t>cydriver._cuMemPoolExportPointer(<cydriver.CUmemPoolPtrExportData*>exportData, <cydriver.CUdeviceptr>ptr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2921, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2920
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolExportPointer(<cydriver.CUmemPoolPtrExportData*>exportData, <cydriver.CUdeviceptr>ptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2922
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2914
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolExportPointer(cudaMemPoolPtrExportData* exportData, void* ptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPoolExportPointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2924
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolImportPointer(void **__pyx_v_ptr, cudaMemPool_t __pyx_v_memPool, struct cudaMemPoolPtrExportData *__pyx_v_exportData) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaMemPoolImportPointer", __pyx_f[0], 2924, 1, __PYX_ERR(0, 2924, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2925
 * 
 * cdef cudaError_t _cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2926
 * cdef cudaError_t _cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2926, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2927
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolImportPointer(<cydriver.CUdeviceptr*>ptr, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemPoolPtrExportData*>exportData)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2928
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuMemPoolImportPointer(<cydriver.CUdeviceptr*>ptr, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemPoolPtrExportData*>exportData)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2927
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolImportPointer(<cydriver.CUdeviceptr*>ptr, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemPoolPtrExportData*>exportData)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2929
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolImportPointer(<cydriver.CUdeviceptr*>ptr, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemPoolPtrExportData*>exportData)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolImportPointer(((CUdeviceptr *)__pyx_v_ptr), ((CUmemoryPool)__pyx_v_memPool), ((CUmemPoolPtrExportData *)__pyx_v_exportData)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2929, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2930
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolImportPointer(<cydriver.CUdeviceptr*>ptr, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemPoolPtrExportData*>exportData)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2931
 *     err = <cudaError_t>cydriver._cuMemPoolImportPointer(<cydriver.CUdeviceptr*>ptr, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemPoolPtrExportData*>exportData)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2931, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2930
 *         return err
 *     err = <cudaError_t>cydriver._cuMemPoolImportPointer(<cydriver.CUdeviceptr*>ptr, <cydriver.CUmemoryPool>memPool, <cydriver.CUmemPoolPtrExportData*>exportData)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2932
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2924
 *     return err
 * 
 * cdef cudaError_t _cudaMemPoolImportPointer(void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaMemPoolImportPointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2934
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsUnregisterResource(cudaGraphicsResource_t __pyx_v_resource) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsUnregisterResource", __pyx_f[0], 2934, 1, __PYX_ERR(0, 2934, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2935
 * 
 * cdef cudaError_t _cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2936
 * cdef cudaError_t _cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2936, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2937
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsUnregisterResource(<cydriver.CUgraphicsResource>resource)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2938
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsUnregisterResource(<cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2937
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsUnregisterResource(<cydriver.CUgraphicsResource>resource)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2939
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsUnregisterResource(<cydriver.CUgraphicsResource>resource)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsUnregisterResource(((CUgraphicsResource)__pyx_v_resource)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2939, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2940
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsUnregisterResource(<cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2941
 *     err = <cudaError_t>cydriver._cuGraphicsUnregisterResource(<cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2941, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2940
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsUnregisterResource(<cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2942
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2934
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsUnregisterResource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2944
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t __pyx_v_resource, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsResourceSetMapFlags", __pyx_f[0], 2944, 1, __PYX_ERR(0, 2944, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2945
 * 
 * cdef cudaError_t _cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2946
 * cdef cudaError_t _cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2946, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2947
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceSetMapFlags_v2(<cydriver.CUgraphicsResource>resource, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2948
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsResourceSetMapFlags_v2(<cydriver.CUgraphicsResource>resource, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2947
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceSetMapFlags_v2(<cydriver.CUgraphicsResource>resource, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2949
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceSetMapFlags_v2(<cydriver.CUgraphicsResource>resource, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceSetMapFlags_v2(((CUgraphicsResource)__pyx_v_resource), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2949, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2950
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceSetMapFlags_v2(<cydriver.CUgraphicsResource>resource, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2951
 *     err = <cudaError_t>cydriver._cuGraphicsResourceSetMapFlags_v2(<cydriver.CUgraphicsResource>resource, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2951, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2950
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceSetMapFlags_v2(<cydriver.CUgraphicsResource>resource, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2952
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2944
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsResourceSetMapFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2954
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsMapResources(int __pyx_v_count, cudaGraphicsResource_t *__pyx_v_resources, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsMapResources", __pyx_f[0], 2954, 1, __PYX_ERR(0, 2954, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2955
 * 
 * cdef cudaError_t _cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2956
 * cdef cudaError_t _cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2956, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2957
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsMapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2958
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsMapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2957
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsMapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2959
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsMapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsMapResources(((unsigned int)__pyx_v_count), ((CUgraphicsResource *)__pyx_v_resources), ((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2959, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2960
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsMapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2961
 *     err = <cudaError_t>cydriver._cuGraphicsMapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2961, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2960
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsMapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2962
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2954
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsMapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsMapResources", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2964
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsUnmapResources(int __pyx_v_count, cudaGraphicsResource_t *__pyx_v_resources, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsUnmapResources", __pyx_f[0], 2964, 1, __PYX_ERR(0, 2964, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2965
 * 
 * cdef cudaError_t _cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2966
 * cdef cudaError_t _cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2966, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2967
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsUnmapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2968
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsUnmapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2967
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsUnmapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2969
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsUnmapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsUnmapResources(((unsigned int)__pyx_v_count), ((CUgraphicsResource *)__pyx_v_resources), ((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2969, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2970
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsUnmapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2971
 *     err = <cudaError_t>cydriver._cuGraphicsUnmapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2971, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2970
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsUnmapResources(<unsigned int>count, <cydriver.CUgraphicsResource*>resources, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2972
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2964
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t* resources, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsUnmapResources", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2974
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsResourceGetMappedPointer(void **__pyx_v_devPtr, size_t *__pyx_v_size, cudaGraphicsResource_t __pyx_v_resource) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsResourceGetMappedPointer", __pyx_f[0], 2974, 1, __PYX_ERR(0, 2974, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2975
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2976
 * cdef cudaError_t _cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2976, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2977
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedPointer_v2(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUgraphicsResource>resource)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2978
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedPointer_v2(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2977
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedPointer_v2(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUgraphicsResource>resource)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2979
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedPointer_v2(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUgraphicsResource>resource)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceGetMappedPointer_v2(((CUdeviceptr *)__pyx_v_devPtr), __pyx_v_size, ((CUgraphicsResource)__pyx_v_resource)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2979, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2980
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedPointer_v2(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2981
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedPointer_v2(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2981, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2980
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedPointer_v2(<cydriver.CUdeviceptr*>devPtr, size, <cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2982
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2974
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedPointer(void** devPtr, size_t* size, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsResourceGetMappedPointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2984
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsSubResourceGetMappedArray(cudaArray_t *__pyx_v_array, cudaGraphicsResource_t __pyx_v_resource, unsigned int __pyx_v_arrayIndex, unsigned int __pyx_v_mipLevel) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsSubResourceGetMappedArray", __pyx_f[0], 2984, 1, __PYX_ERR(0, 2984, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2985
 * 
 * cdef cudaError_t _cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2986
 * cdef cudaError_t _cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2986, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2987
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsSubResourceGetMappedArray(<cydriver.CUarray*>array, <cydriver.CUgraphicsResource>resource, arrayIndex, mipLevel)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2988
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsSubResourceGetMappedArray(<cydriver.CUarray*>array, <cydriver.CUgraphicsResource>resource, arrayIndex, mipLevel)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2987
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsSubResourceGetMappedArray(<cydriver.CUarray*>array, <cydriver.CUgraphicsResource>resource, arrayIndex, mipLevel)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2989
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsSubResourceGetMappedArray(<cydriver.CUarray*>array, <cydriver.CUgraphicsResource>resource, arrayIndex, mipLevel)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsSubResourceGetMappedArray(((CUarray *)__pyx_v_array), ((CUgraphicsResource)__pyx_v_resource), __pyx_v_arrayIndex, __pyx_v_mipLevel); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2989, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2990
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsSubResourceGetMappedArray(<cydriver.CUarray*>array, <cydriver.CUgraphicsResource>resource, arrayIndex, mipLevel)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2991
 *     err = <cudaError_t>cydriver._cuGraphicsSubResourceGetMappedArray(<cydriver.CUarray*>array, <cydriver.CUgraphicsResource>resource, arrayIndex, mipLevel)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2991, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2990
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsSubResourceGetMappedArray(<cydriver.CUarray*>array, <cydriver.CUgraphicsResource>resource, arrayIndex, mipLevel)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2992
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2984
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsSubResourceGetMappedArray(cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsSubResourceGetMappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2994
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *__pyx_v_mipmappedArray, cudaGraphicsResource_t __pyx_v_resource) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsResourceGetMappedMipmappedArray", __pyx_f[0], 2994, 1, __PYX_ERR(0, 2994, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2995
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2996
 * cdef cudaError_t _cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2996, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2997
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmappedArray, <cydriver.CUgraphicsResource>resource)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2998
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmappedArray, <cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2997
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmappedArray, <cydriver.CUgraphicsResource>resource)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2999
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmappedArray, <cydriver.CUgraphicsResource>resource)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceGetMappedMipmappedArray(((CUmipmappedArray *)__pyx_v_mipmappedArray), ((CUgraphicsResource)__pyx_v_resource)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 2999, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3000
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmappedArray, <cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3001
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmappedArray, <cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3001, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3000
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsResourceGetMappedMipmappedArray(<cydriver.CUmipmappedArray*>mipmappedArray, <cydriver.CUgraphicsResource>resource)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3002
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDestroyTextureObject(cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":2994
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsResourceGetMappedMipmappedArray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3004
 *     return err
 * 
 * cdef cudaError_t _cudaDestroyTextureObject(cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDestroyTextureObject(cudaTextureObject_t __pyx_v_texObject) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDestroyTextureObject", __pyx_f[0], 3004, 1, __PYX_ERR(0, 3004, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3005
 * 
 * cdef cudaError_t _cudaDestroyTextureObject(cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3006
 * cdef cudaError_t _cudaDestroyTextureObject(cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3006, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3007
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectDestroy(<cydriver.CUtexObject>texObject)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3008
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuTexObjectDestroy(<cydriver.CUtexObject>texObject)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3007
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectDestroy(<cydriver.CUtexObject>texObject)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3009
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectDestroy(<cydriver.CUtexObject>texObject)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectDestroy(((CUtexObject)__pyx_v_texObject)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3009, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3010
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectDestroy(<cydriver.CUtexObject>texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3011
 *     err = <cudaError_t>cydriver._cuTexObjectDestroy(<cydriver.CUtexObject>texObject)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3011, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3010
 *         return err
 *     err = <cudaError_t>cydriver._cuTexObjectDestroy(<cydriver.CUtexObject>texObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3012
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3004
 *     return err
 * 
 * cdef cudaError_t _cudaDestroyTextureObject(cudaTextureObject_t texObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDestroyTextureObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3014
 *     return err
 * 
 * cdef cudaError_t _cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDestroySurfaceObject(cudaSurfaceObject_t __pyx_v_surfObject) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDestroySurfaceObject", __pyx_f[0], 3014, 1, __PYX_ERR(0, 3014, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3015
 * 
 * cdef cudaError_t _cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3016
 * cdef cudaError_t _cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3016, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3017
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuSurfObjectDestroy(<cydriver.CUsurfObject>surfObject)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3018
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuSurfObjectDestroy(<cydriver.CUsurfObject>surfObject)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3017
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuSurfObjectDestroy(<cydriver.CUsurfObject>surfObject)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3019
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuSurfObjectDestroy(<cydriver.CUsurfObject>surfObject)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSurfObjectDestroy(((CUsurfObject)__pyx_v_surfObject)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3019, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3020
 *         return err
 *     err = <cudaError_t>cydriver._cuSurfObjectDestroy(<cydriver.CUsurfObject>surfObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3021
 *     err = <cudaError_t>cydriver._cuSurfObjectDestroy(<cydriver.CUsurfObject>surfObject)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3021, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3020
 *         return err
 *     err = <cudaError_t>cydriver._cuSurfObjectDestroy(<cydriver.CUsurfObject>surfObject)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3022
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3014
 *     return err
 * 
 * cdef cudaError_t _cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDestroySurfaceObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3024
 *     return err
 * 
 * cdef cudaError_t _cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphCreate(cudaGraph_t *__pyx_v_pGraph, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphCreate", __pyx_f[0], 3024, 1, __PYX_ERR(0, 3024, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3025
 * 
 * cdef cudaError_t _cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3026
 * cdef cudaError_t _cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3026, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3027
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphCreate(<cydriver.CUgraph*>pGraph, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3028
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphCreate(<cydriver.CUgraph*>pGraph, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3027
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphCreate(<cydriver.CUgraph*>pGraph, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3029
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphCreate(<cydriver.CUgraph*>pGraph, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphCreate(((CUgraph *)__pyx_v_pGraph), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3029, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3030
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphCreate(<cydriver.CUgraph*>pGraph, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3031
 *     err = <cudaError_t>cydriver._cuGraphCreate(<cydriver.CUgraph*>pGraph, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3031, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3030
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphCreate(<cydriver.CUgraph*>pGraph, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3032
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3024
 *     return err
 * 
 * cdef cudaError_t _cudaGraphCreate(cudaGraph_t* pGraph, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3034
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddKernelNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaKernelNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_v_err;
  CUDA_KERNEL_NODE_PARAMS __pyx_v_driverNodeParams;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddKernelNode", __pyx_f[0], 3034, 1, __PYX_ERR(0, 3034, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3035
 * 
 * cdef cudaError_t _cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3036
 * cdef cudaError_t _cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3036, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3037
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3038
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3037
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3040
 *         return err
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverKernelNodeParams(__pyx_v_pNodeParams, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3040, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3041
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddKernelNode_v2(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3042
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddKernelNode_v2(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3041
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddKernelNode_v2(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3043
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddKernelNode_v2(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddKernelNode_v2(((CUgraphNode *)__pyx_v_pGraphNode), ((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3043, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3044
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddKernelNode_v2(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3045
 *     err = <cudaError_t>cydriver._cuGraphAddKernelNode_v2(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3045, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3044
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddKernelNode_v2(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3046
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3034
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddKernelNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddKernelNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3048
 *     return err
 * 
 * cdef cudaError_t _cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphKernelNodeSetParams(cudaGraphNode_t __pyx_v_node, struct cudaKernelNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_v_err;
  CUDA_KERNEL_NODE_PARAMS __pyx_v_driverNodeParams;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphKernelNodeSetParams", __pyx_f[0], 3048, 1, __PYX_ERR(0, 3048, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3049
 * 
 * cdef cudaError_t _cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3050
 * cdef cudaError_t _cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3050, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3051
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3052
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3051
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3054
 *         return err
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverKernelNodeParams(__pyx_v_pNodeParams, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3054, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3055
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3056
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3055
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3057
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeSetParams_v2(((CUgraphNode)__pyx_v_node), (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3057, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3058
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3059
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3059, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3058
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeSetParams_v2(<cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3060
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3048
 *     return err
 * 
 * cdef cudaError_t _cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphKernelNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3062
 *     return err
 * 
 * cdef cudaError_t _cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t __pyx_v_hSrc, cudaGraphNode_t __pyx_v_hDst) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphKernelNodeCopyAttributes", __pyx_f[0], 3062, 1, __PYX_ERR(0, 3062, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3063
 * 
 * cdef cudaError_t _cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3064
 * cdef cudaError_t _cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3064, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3065
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeCopyAttributes(<cydriver.CUgraphNode>hSrc, <cydriver.CUgraphNode>hDst)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3066
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeCopyAttributes(<cydriver.CUgraphNode>hSrc, <cydriver.CUgraphNode>hDst)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3065
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeCopyAttributes(<cydriver.CUgraphNode>hSrc, <cydriver.CUgraphNode>hDst)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3067
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeCopyAttributes(<cydriver.CUgraphNode>hSrc, <cydriver.CUgraphNode>hDst)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeCopyAttributes(((CUgraphNode)__pyx_v_hSrc), ((CUgraphNode)__pyx_v_hDst)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3067, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3068
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeCopyAttributes(<cydriver.CUgraphNode>hSrc, <cydriver.CUgraphNode>hDst)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3069
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeCopyAttributes(<cydriver.CUgraphNode>hSrc, <cydriver.CUgraphNode>hDst)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3069, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3068
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphKernelNodeCopyAttributes(<cydriver.CUgraphNode>hSrc, <cydriver.CUgraphNode>hDst)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3070
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3062
 *     return err
 * 
 * cdef cudaError_t _cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphKernelNodeCopyAttributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3072
 *     return err
 * 
 * cdef cudaError_t _cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemsetNodeGetParams(cudaGraphNode_t __pyx_v_node, struct cudaMemsetParams *__pyx_v_pNodeParams) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphMemsetNodeGetParams", __pyx_f[0], 3072, 1, __PYX_ERR(0, 3072, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3073
 * 
 * cdef cudaError_t _cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3074
 * cdef cudaError_t _cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3074, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3075
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3076
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3075
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3077
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemsetNodeGetParams(((CUgraphNode)__pyx_v_node), ((CUDA_MEMSET_NODE_PARAMS *)__pyx_v_pNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3077, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3078
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3079
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3079, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3078
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3080
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3072
 *     return err
 * 
 * cdef cudaError_t _cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphMemsetNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3082
 *     return err
 * 
 * cdef cudaError_t _cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemsetNodeSetParams(cudaGraphNode_t __pyx_v_node, struct cudaMemsetParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphMemsetNodeSetParams", __pyx_f[0], 3082, 1, __PYX_ERR(0, 3082, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3083
 * 
 * cdef cudaError_t _cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3084
 * cdef cudaError_t _cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3084, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3085
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeSetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3086
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeSetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3085
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeSetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3087
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeSetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemsetNodeSetParams(((CUgraphNode)__pyx_v_node), ((CUDA_MEMSET_NODE_PARAMS *)__pyx_v_pNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3087, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3088
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeSetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3089
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeSetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3089, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3088
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphMemsetNodeSetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_MEMSET_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3090
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3082
 *     return err
 * 
 * cdef cudaError_t _cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphMemsetNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3092
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddHostNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaHostNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_v_err;
  CUDA_HOST_NODE_PARAMS __pyx_v_driverNodeParams;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddHostNode", __pyx_f[0], 3092, 1, __PYX_ERR(0, 3092, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3093
 * 
 * cdef cudaError_t _cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3094
 * cdef cudaError_t _cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3094, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3095
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3096
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3095
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3098
 *         return err
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddHostNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:
 */
  __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverHostNodeParams(__pyx_v_pNodeParams, (&__pyx_v_driverNodeParams));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3099
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 *     err = <cudaError_t>cydriver._cuGraphAddHostNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddHostNode(((CUgraphNode *)__pyx_v_pGraphNode), ((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3099, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3100
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 *     err = <cudaError_t>cydriver._cuGraphAddHostNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3101
 *     err = <cudaError_t>cydriver._cuGraphAddHostNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3101, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3100
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 *     err = <cudaError_t>cydriver._cuGraphAddHostNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3102
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3092
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddHostNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddHostNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3104
 *     return err
 * 
 * cdef cudaError_t _cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphHostNodeGetParams(cudaGraphNode_t __pyx_v_node, struct cudaHostNodeParams *__pyx_v_pNodeParams) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphHostNodeGetParams", __pyx_f[0], 3104, 1, __PYX_ERR(0, 3104, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3105
 * 
 * cdef cudaError_t _cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3106
 * cdef cudaError_t _cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3106, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3107
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphHostNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3108
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphHostNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3107
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphHostNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3109
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphHostNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_HOST_NODE_PARAMS*>pNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphHostNodeGetParams(((CUgraphNode)__pyx_v_node), ((CUDA_HOST_NODE_PARAMS *)__pyx_v_pNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3109, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3110
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphHostNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3111
 *     err = <cudaError_t>cydriver._cuGraphHostNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3111, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3110
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphHostNodeGetParams(<cydriver.CUgraphNode>node, <cydriver.CUDA_HOST_NODE_PARAMS*>pNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3112
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3104
 *     return err
 * 
 * cdef cudaError_t _cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphHostNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3114
 *     return err
 * 
 * cdef cudaError_t _cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphHostNodeSetParams(cudaGraphNode_t __pyx_v_node, struct cudaHostNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_v_err;
  CUDA_HOST_NODE_PARAMS __pyx_v_driverNodeParams;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphHostNodeSetParams", __pyx_f[0], 3114, 1, __PYX_ERR(0, 3114, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3115
 * 
 * cdef cudaError_t _cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3116
 * cdef cudaError_t _cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3116, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3117
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3118
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3117
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3120
 *         return err
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphHostNodeSetParams(<cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:
 */
  __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverHostNodeParams(__pyx_v_pNodeParams, (&__pyx_v_driverNodeParams));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3121
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 *     err = <cudaError_t>cydriver._cuGraphHostNodeSetParams(<cydriver.CUgraphNode>node, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphHostNodeSetParams(((CUgraphNode)__pyx_v_node), (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3121, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3122
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 *     err = <cudaError_t>cydriver._cuGraphHostNodeSetParams(<cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3123
 *     err = <cudaError_t>cydriver._cuGraphHostNodeSetParams(<cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3123, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3122
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 *     err = <cudaError_t>cydriver._cuGraphHostNodeSetParams(<cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3124
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3114
 *     return err
 * 
 * cdef cudaError_t _cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphHostNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3126
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddChildGraphNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, cudaGraph_t __pyx_v_childGraph) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddChildGraphNode", __pyx_f[0], 3126, 1, __PYX_ERR(0, 3126, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3127
 * 
 * cdef cudaError_t _cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3128
 * cdef cudaError_t _cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3128, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3129
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddChildGraphNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUgraph>childGraph)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3130
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddChildGraphNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUgraph>childGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3129
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddChildGraphNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUgraph>childGraph)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3131
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddChildGraphNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUgraph>childGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddChildGraphNode(((CUgraphNode *)__pyx_v_pGraphNode), ((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((CUgraph)__pyx_v_childGraph)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3131, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3132
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddChildGraphNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUgraph>childGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3133
 *     err = <cudaError_t>cydriver._cuGraphAddChildGraphNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUgraph>childGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3133, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3132
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddChildGraphNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUgraph>childGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3134
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3126
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddChildGraphNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddChildGraphNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3136
 *     return err
 * 
 * cdef cudaError_t _cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t __pyx_v_node, cudaGraph_t *__pyx_v_pGraph) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphChildGraphNodeGetGraph", __pyx_f[0], 3136, 1, __PYX_ERR(0, 3136, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3137
 * 
 * cdef cudaError_t _cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3138
 * cdef cudaError_t _cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3138, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3139
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphChildGraphNodeGetGraph(<cydriver.CUgraphNode>node, <cydriver.CUgraph*>pGraph)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3140
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphChildGraphNodeGetGraph(<cydriver.CUgraphNode>node, <cydriver.CUgraph*>pGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3139
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphChildGraphNodeGetGraph(<cydriver.CUgraphNode>node, <cydriver.CUgraph*>pGraph)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3141
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphChildGraphNodeGetGraph(<cydriver.CUgraphNode>node, <cydriver.CUgraph*>pGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphChildGraphNodeGetGraph(((CUgraphNode)__pyx_v_node), ((CUgraph *)__pyx_v_pGraph)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3141, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3142
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphChildGraphNodeGetGraph(<cydriver.CUgraphNode>node, <cydriver.CUgraph*>pGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3143
 *     err = <cudaError_t>cydriver._cuGraphChildGraphNodeGetGraph(<cydriver.CUgraphNode>node, <cydriver.CUgraph*>pGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3143, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3142
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphChildGraphNodeGetGraph(<cydriver.CUgraphNode>node, <cydriver.CUgraph*>pGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3144
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3136
 *     return err
 * 
 * cdef cudaError_t _cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t* pGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphChildGraphNodeGetGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3146
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddEmptyNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddEmptyNode", __pyx_f[0], 3146, 1, __PYX_ERR(0, 3146, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3147
 * 
 * cdef cudaError_t _cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3148
 * cdef cudaError_t _cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3148, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3149
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEmptyNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3150
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddEmptyNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3149
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEmptyNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3151
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEmptyNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddEmptyNode(((CUgraphNode *)__pyx_v_pGraphNode), ((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3151, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3152
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEmptyNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3153
 *     err = <cudaError_t>cydriver._cuGraphAddEmptyNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3153, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3152
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEmptyNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3154
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3146
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddEmptyNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddEmptyNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3156
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddEventRecordNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddEventRecordNode", __pyx_f[0], 3156, 1, __PYX_ERR(0, 3156, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3157
 * 
 * cdef cudaError_t _cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3158
 * cdef cudaError_t _cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3158, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3159
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEventRecordNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3160
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddEventRecordNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3159
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEventRecordNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3161
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEventRecordNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddEventRecordNode(((CUgraphNode *)__pyx_v_pGraphNode), ((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((CUevent)__pyx_v_event)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3161, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3162
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEventRecordNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3163
 *     err = <cudaError_t>cydriver._cuGraphAddEventRecordNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3163, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3162
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEventRecordNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3164
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3156
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddEventRecordNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddEventRecordNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3166
 *     return err
 * 
 * cdef cudaError_t _cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t __pyx_v_node, cudaEvent_t *__pyx_v_event_out) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphEventRecordNodeGetEvent", __pyx_f[0], 3166, 1, __PYX_ERR(0, 3166, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3167
 * 
 * cdef cudaError_t _cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3168
 * cdef cudaError_t _cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3168, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3169
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3170
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3169
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3171
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventRecordNodeGetEvent(((CUgraphNode)__pyx_v_node), ((CUevent *)__pyx_v_event_out)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3171, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3172
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3173
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3173, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3172
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3174
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3166
 *     return err
 * 
 * cdef cudaError_t _cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphEventRecordNodeGetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3176
 *     return err
 * 
 * cdef cudaError_t _cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t __pyx_v_node, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphEventRecordNodeSetEvent", __pyx_f[0], 3176, 1, __PYX_ERR(0, 3176, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3177
 * 
 * cdef cudaError_t _cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3178
 * cdef cudaError_t _cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3178, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3179
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3180
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3179
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3181
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventRecordNodeSetEvent(((CUgraphNode)__pyx_v_node), ((CUevent)__pyx_v_event)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3181, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3182
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3183
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3183, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3182
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventRecordNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3184
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3176
 *     return err
 * 
 * cdef cudaError_t _cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphEventRecordNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3186
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddEventWaitNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddEventWaitNode", __pyx_f[0], 3186, 1, __PYX_ERR(0, 3186, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3187
 * 
 * cdef cudaError_t _cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3188
 * cdef cudaError_t _cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3188, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3189
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEventWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3190
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddEventWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3189
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEventWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3191
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEventWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddEventWaitNode(((CUgraphNode *)__pyx_v_pGraphNode), ((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((CUevent)__pyx_v_event)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3191, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3192
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEventWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3193
 *     err = <cudaError_t>cydriver._cuGraphAddEventWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3193, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3192
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddEventWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3194
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3186
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddEventWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddEventWaitNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3196
 *     return err
 * 
 * cdef cudaError_t _cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t __pyx_v_node, cudaEvent_t *__pyx_v_event_out) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphEventWaitNodeGetEvent", __pyx_f[0], 3196, 1, __PYX_ERR(0, 3196, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3197
 * 
 * cdef cudaError_t _cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3198
 * cdef cudaError_t _cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3198, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3199
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3200
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3199
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3201
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventWaitNodeGetEvent(((CUgraphNode)__pyx_v_node), ((CUevent *)__pyx_v_event_out)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3201, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3202
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3203
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3203, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3202
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeGetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent*>event_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3204
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3196
 *     return err
 * 
 * cdef cudaError_t _cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t* event_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphEventWaitNodeGetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3206
 *     return err
 * 
 * cdef cudaError_t _cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t __pyx_v_node, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphEventWaitNodeSetEvent", __pyx_f[0], 3206, 1, __PYX_ERR(0, 3206, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3207
 * 
 * cdef cudaError_t _cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3208
 * cdef cudaError_t _cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3208, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3209
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3210
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3209
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3211
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventWaitNodeSetEvent(((CUgraphNode)__pyx_v_node), ((CUevent)__pyx_v_event)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3211, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3212
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3213
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3213, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3212
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphEventWaitNodeSetEvent(<cydriver.CUgraphNode>node, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3214
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3206
 *     return err
 * 
 * cdef cudaError_t _cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphEventWaitNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3216
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaExternalSemaphoreSignalNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddExternalSemaphoresSignalNode", __pyx_f[0], 3216, 1, __PYX_ERR(0, 3216, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3217
 * 
 * cdef cudaError_t _cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3218
 * cdef cudaError_t _cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3218, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3219
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresSignalNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3220
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresSignalNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3219
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresSignalNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3221
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresSignalNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddExternalSemaphoresSignalNode(((CUgraphNode *)__pyx_v_pGraphNode), ((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3221, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3222
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresSignalNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3223
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresSignalNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3223, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3222
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresSignalNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3224
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3216
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddExternalSemaphoresSignalNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3226
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreSignalNodeParams *__pyx_v_params_out) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExternalSemaphoresSignalNodeGetParams", __pyx_f[0], 3226, 1, __PYX_ERR(0, 3226, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3227
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3228
 * cdef cudaError_t _cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3228, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3229
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3230
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3229
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3231
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresSignalNodeGetParams(((CUgraphNode)__pyx_v_hNode), ((CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)__pyx_v_params_out)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3231, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3232
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3233
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3233, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3232
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3234
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3226
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExternalSemaphoresSignalNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3236
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreSignalNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExternalSemaphoresSignalNodeSetParams", __pyx_f[0], 3236, 1, __PYX_ERR(0, 3236, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3237
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3238
 * cdef cudaError_t _cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3238, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3239
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3240
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3239
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3241
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresSignalNodeSetParams(((CUgraphNode)__pyx_v_hNode), ((CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3241, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3242
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3243
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3243, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3242
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3244
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3236
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExternalSemaphoresSignalNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3246
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaExternalSemaphoreWaitNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddExternalSemaphoresWaitNode", __pyx_f[0], 3246, 1, __PYX_ERR(0, 3246, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3247
 * 
 * cdef cudaError_t _cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3248
 * cdef cudaError_t _cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3248, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3249
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3250
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3249
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3251
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddExternalSemaphoresWaitNode(((CUgraphNode *)__pyx_v_pGraphNode), ((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((CUDA_EXT_SEM_WAIT_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3251, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3252
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3253
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3253, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3252
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddExternalSemaphoresWaitNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3254
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3246
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddExternalSemaphoresWaitNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3256
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreWaitNodeParams *__pyx_v_params_out) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExternalSemaphoresWaitNodeGetParams", __pyx_f[0], 3256, 1, __PYX_ERR(0, 3256, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3257
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3258
 * cdef cudaError_t _cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3258, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3259
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3260
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3259
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3261
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresWaitNodeGetParams(((CUgraphNode)__pyx_v_hNode), ((CUDA_EXT_SEM_WAIT_NODE_PARAMS *)__pyx_v_params_out)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3261, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3262
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3263
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3263, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3262
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeGetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>params_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3264
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3256
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExternalSemaphoresWaitNodeGetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3266
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreWaitNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExternalSemaphoresWaitNodeSetParams", __pyx_f[0], 3266, 1, __PYX_ERR(0, 3266, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3267
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3268
 * cdef cudaError_t _cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3268, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3269
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3270
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3269
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3271
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresWaitNodeSetParams(((CUgraphNode)__pyx_v_hNode), ((CUDA_EXT_SEM_WAIT_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3271, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3272
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3273
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3273, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3272
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3274
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3266
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExternalSemaphoresWaitNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3276
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddMemFreeNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, void *__pyx_v_dptr) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddMemFreeNode", __pyx_f[0], 3276, 1, __PYX_ERR(0, 3276, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3277
 * 
 * cdef cudaError_t _cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3278
 * cdef cudaError_t _cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3278, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3279
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddMemFreeNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUdeviceptr>dptr)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3280
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddMemFreeNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUdeviceptr>dptr)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3279
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddMemFreeNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUdeviceptr>dptr)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3281
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddMemFreeNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUdeviceptr>dptr)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemFreeNode(((CUgraphNode *)__pyx_v_pGraphNode), ((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_pDependencies), __pyx_v_numDependencies, ((CUdeviceptr)__pyx_v_dptr)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3281, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3282
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddMemFreeNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUdeviceptr>dptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3283
 *     err = <cudaError_t>cydriver._cuGraphAddMemFreeNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUdeviceptr>dptr)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3283, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3282
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddMemFreeNode(<cydriver.CUgraphNode*>pGraphNode, <cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pDependencies, numDependencies, <cydriver.CUdeviceptr>dptr)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3284
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceGraphMemTrim(int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3276
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddMemFreeNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddMemFreeNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3286
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGraphMemTrim(int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGraphMemTrim(int __pyx_v_device) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGraphMemTrim", __pyx_f[0], 3286, 1, __PYX_ERR(0, 3286, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3287
 * 
 * cdef cudaError_t _cudaDeviceGraphMemTrim(int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3288
 * cdef cudaError_t _cudaDeviceGraphMemTrim(int device) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3288, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3289
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGraphMemTrim(<cydriver.CUdevice>device)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3290
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceGraphMemTrim(<cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3289
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGraphMemTrim(<cydriver.CUdevice>device)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3291
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGraphMemTrim(<cydriver.CUdevice>device)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGraphMemTrim(((CUdevice)__pyx_v_device)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3291, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3292
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGraphMemTrim(<cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3293
 *     err = <cudaError_t>cydriver._cuDeviceGraphMemTrim(<cydriver.CUdevice>device)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3293, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3292
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGraphMemTrim(<cydriver.CUdevice>device)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3294
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3286
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGraphMemTrim(int device) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGraphMemTrim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3296
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetGraphMemAttribute(int __pyx_v_device, enum cudaGraphMemAttributeType __pyx_v_attr, void *__pyx_v_value) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceGetGraphMemAttribute", __pyx_f[0], 3296, 1, __PYX_ERR(0, 3296, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3297
 * 
 * cdef cudaError_t _cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3298
 * cdef cudaError_t _cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3298, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3299
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3300
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceGetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3299
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3301
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetGraphMemAttribute(((CUdevice)__pyx_v_device), ((CUgraphMem_attribute)__pyx_v_attr), __pyx_v_value); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3301, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3302
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3303
 *     err = <cudaError_t>cydriver._cuDeviceGetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3303, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3302
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceGetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3304
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3296
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceGetGraphMemAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3306
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSetGraphMemAttribute(int __pyx_v_device, enum cudaGraphMemAttributeType __pyx_v_attr, void *__pyx_v_value) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceSetGraphMemAttribute", __pyx_f[0], 3306, 1, __PYX_ERR(0, 3306, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3307
 * 
 * cdef cudaError_t _cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3308
 * cdef cudaError_t _cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3308, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3309
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceSetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3310
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuDeviceSetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3309
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceSetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3311
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceSetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceSetGraphMemAttribute(((CUdevice)__pyx_v_device), ((CUgraphMem_attribute)__pyx_v_attr), __pyx_v_value); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3311, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3312
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceSetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3313
 *     err = <cudaError_t>cydriver._cuDeviceSetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3313, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3312
 *         return err
 *     err = <cudaError_t>cydriver._cuDeviceSetGraphMemAttribute(<cydriver.CUdevice>device, <cydriver.CUgraphMem_attribute>attr, value)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3314
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3306
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void* value) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceSetGraphMemAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3316
 *     return err
 * 
 * cdef cudaError_t _cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphClone(cudaGraph_t *__pyx_v_pGraphClone, cudaGraph_t __pyx_v_originalGraph) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphClone", __pyx_f[0], 3316, 1, __PYX_ERR(0, 3316, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3317
 * 
 * cdef cudaError_t _cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3318
 * cdef cudaError_t _cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3318, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3319
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphClone(<cydriver.CUgraph*>pGraphClone, <cydriver.CUgraph>originalGraph)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3320
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphClone(<cydriver.CUgraph*>pGraphClone, <cydriver.CUgraph>originalGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3319
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphClone(<cydriver.CUgraph*>pGraphClone, <cydriver.CUgraph>originalGraph)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3321
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphClone(<cydriver.CUgraph*>pGraphClone, <cydriver.CUgraph>originalGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphClone(((CUgraph *)__pyx_v_pGraphClone), ((CUgraph)__pyx_v_originalGraph)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3321, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3322
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphClone(<cydriver.CUgraph*>pGraphClone, <cydriver.CUgraph>originalGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3323
 *     err = <cudaError_t>cydriver._cuGraphClone(<cydriver.CUgraph*>pGraphClone, <cydriver.CUgraph>originalGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3323, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3322
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphClone(<cydriver.CUgraph*>pGraphClone, <cydriver.CUgraph>originalGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3324
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3316
 *     return err
 * 
 * cdef cudaError_t _cudaGraphClone(cudaGraph_t* pGraphClone, cudaGraph_t originalGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphClone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3326
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeFindInClone(cudaGraphNode_t *__pyx_v_pNode, cudaGraphNode_t __pyx_v_originalNode, cudaGraph_t __pyx_v_clonedGraph) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphNodeFindInClone", __pyx_f[0], 3326, 1, __PYX_ERR(0, 3326, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3327
 * 
 * cdef cudaError_t _cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3328
 * cdef cudaError_t _cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3328, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3329
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeFindInClone(<cydriver.CUgraphNode*>pNode, <cydriver.CUgraphNode>originalNode, <cydriver.CUgraph>clonedGraph)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3330
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphNodeFindInClone(<cydriver.CUgraphNode*>pNode, <cydriver.CUgraphNode>originalNode, <cydriver.CUgraph>clonedGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3329
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeFindInClone(<cydriver.CUgraphNode*>pNode, <cydriver.CUgraphNode>originalNode, <cydriver.CUgraph>clonedGraph)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3331
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeFindInClone(<cydriver.CUgraphNode*>pNode, <cydriver.CUgraphNode>originalNode, <cydriver.CUgraph>clonedGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeFindInClone(((CUgraphNode *)__pyx_v_pNode), ((CUgraphNode)__pyx_v_originalNode), ((CUgraph)__pyx_v_clonedGraph)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3331, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3332
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeFindInClone(<cydriver.CUgraphNode*>pNode, <cydriver.CUgraphNode>originalNode, <cydriver.CUgraph>clonedGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3333
 *     err = <cudaError_t>cydriver._cuGraphNodeFindInClone(<cydriver.CUgraphNode*>pNode, <cydriver.CUgraphNode>originalNode, <cydriver.CUgraph>clonedGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3333, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3332
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeFindInClone(<cydriver.CUgraphNode*>pNode, <cydriver.CUgraphNode>originalNode, <cydriver.CUgraph>clonedGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3334
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3326
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeFindInClone(cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphNodeFindInClone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3336
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetType(cudaGraphNode_t __pyx_v_node, enum cudaGraphNodeType *__pyx_v_pType) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphNodeGetType", __pyx_f[0], 3336, 1, __PYX_ERR(0, 3336, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3337
 * 
 * cdef cudaError_t _cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3338
 * cdef cudaError_t _cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3338, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3339
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetType(<cydriver.CUgraphNode>node, <cydriver.CUgraphNodeType*>pType)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3340
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphNodeGetType(<cydriver.CUgraphNode>node, <cydriver.CUgraphNodeType*>pType)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3339
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetType(<cydriver.CUgraphNode>node, <cydriver.CUgraphNodeType*>pType)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3341
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetType(<cydriver.CUgraphNode>node, <cydriver.CUgraphNodeType*>pType)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetType(((CUgraphNode)__pyx_v_node), ((CUgraphNodeType *)__pyx_v_pType)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3341, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3342
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetType(<cydriver.CUgraphNode>node, <cydriver.CUgraphNodeType*>pType)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3343
 *     err = <cudaError_t>cydriver._cuGraphNodeGetType(<cydriver.CUgraphNode>node, <cydriver.CUgraphNodeType*>pType)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3343, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3342
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetType(<cydriver.CUgraphNode>node, <cydriver.CUgraphNodeType*>pType)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3344
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3336
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType* pType) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphNodeGetType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3346
 *     return err
 * 
 * cdef cudaError_t _cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphGetNodes(cudaGraph_t __pyx_v_graph, cudaGraphNode_t *__pyx_v_nodes, size_t *__pyx_v_numNodes) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphGetNodes", __pyx_f[0], 3346, 1, __PYX_ERR(0, 3346, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3347
 * 
 * cdef cudaError_t _cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3348
 * cdef cudaError_t _cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3348, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3349
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>nodes, numNodes)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3350
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphGetNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>nodes, numNodes)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3349
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>nodes, numNodes)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3351
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>nodes, numNodes)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetNodes(((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_nodes), __pyx_v_numNodes); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3351, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3352
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>nodes, numNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3353
 *     err = <cudaError_t>cydriver._cuGraphGetNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>nodes, numNodes)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3353, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3352
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>nodes, numNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3354
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3346
 *     return err
 * 
 * cdef cudaError_t _cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphGetNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3356
 *     return err
 * 
 * cdef cudaError_t _cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphGetRootNodes(cudaGraph_t __pyx_v_graph, cudaGraphNode_t *__pyx_v_pRootNodes, size_t *__pyx_v_pNumRootNodes) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphGetRootNodes", __pyx_f[0], 3356, 1, __PYX_ERR(0, 3356, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3357
 * 
 * cdef cudaError_t _cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3358
 * cdef cudaError_t _cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3358, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3359
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetRootNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pRootNodes, pNumRootNodes)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3360
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphGetRootNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pRootNodes, pNumRootNodes)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3359
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetRootNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pRootNodes, pNumRootNodes)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3361
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetRootNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pRootNodes, pNumRootNodes)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetRootNodes(((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_pRootNodes), __pyx_v_pNumRootNodes); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3361, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3362
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetRootNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pRootNodes, pNumRootNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3363
 *     err = <cudaError_t>cydriver._cuGraphGetRootNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pRootNodes, pNumRootNodes)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3363, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3362
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetRootNodes(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>pRootNodes, pNumRootNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3364
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3356
 *     return err
 * 
 * cdef cudaError_t _cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphGetRootNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3366
 *     return err
 * 
 * cdef cudaError_t _cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphGetEdges(cudaGraph_t __pyx_v_graph, cudaGraphNode_t *__pyx_v_from_, cudaGraphNode_t *__pyx_v_to, size_t *__pyx_v_numEdges) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphGetEdges", __pyx_f[0], 3366, 1, __PYX_ERR(0, 3366, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3367
 * 
 * cdef cudaError_t _cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3368
 * cdef cudaError_t _cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3368, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3369
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetEdges(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numEdges)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3370
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphGetEdges(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numEdges)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3369
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetEdges(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numEdges)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3371
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetEdges(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numEdges)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetEdges(((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_from_), ((CUgraphNode *)__pyx_v_to), __pyx_v_numEdges); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3371, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3372
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetEdges(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numEdges)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3373
 *     err = <cudaError_t>cydriver._cuGraphGetEdges(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numEdges)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3373, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3372
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetEdges(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numEdges)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3374
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3366
 *     return err
 * 
 * cdef cudaError_t _cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphGetEdges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3376
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetDependencies(cudaGraphNode_t __pyx_v_node, cudaGraphNode_t *__pyx_v_pDependencies, size_t *__pyx_v_pNumDependencies) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphNodeGetDependencies", __pyx_f[0], 3376, 1, __PYX_ERR(0, 3376, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3377
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3378
 * cdef cudaError_t _cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3378, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3379
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, pNumDependencies)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3380
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, pNumDependencies)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3379
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, pNumDependencies)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3381
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, pNumDependencies)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependencies(((CUgraphNode)__pyx_v_node), ((CUgraphNode *)__pyx_v_pDependencies), __pyx_v_pNumDependencies); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3381, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3382
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, pNumDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3383
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, pNumDependencies)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3383, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3382
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, pNumDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3384
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3376
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphNodeGetDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3386
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetDependentNodes(cudaGraphNode_t __pyx_v_node, cudaGraphNode_t *__pyx_v_pDependentNodes, size_t *__pyx_v_pNumDependentNodes) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphNodeGetDependentNodes", __pyx_f[0], 3386, 1, __PYX_ERR(0, 3386, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3387
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3388
 * cdef cudaError_t _cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3388, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3389
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3390
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3389
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3391
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, pNumDependentNodes)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependentNodes(((CUgraphNode)__pyx_v_node), ((CUgraphNode *)__pyx_v_pDependentNodes), __pyx_v_pNumDependentNodes); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3391, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3392
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3393
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3393, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3392
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, pNumDependentNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3394
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3386
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphNodeGetDependentNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3396
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddDependencies(cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_from_, cudaGraphNode_t const *__pyx_v_to, size_t __pyx_v_numDependencies) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddDependencies", __pyx_f[0], 3396, 1, __PYX_ERR(0, 3396, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3397
 * 
 * cdef cudaError_t _cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3398
 * cdef cudaError_t _cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3398, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3399
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3400
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3399
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3401
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddDependencies(((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_from_), ((CUgraphNode *)__pyx_v_to), __pyx_v_numDependencies); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3401, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3402
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3403
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3403, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3402
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3404
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3396
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3406
 *     return err
 * 
 * cdef cudaError_t _cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphRemoveDependencies(cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_from_, cudaGraphNode_t const *__pyx_v_to, size_t __pyx_v_numDependencies) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphRemoveDependencies", __pyx_f[0], 3406, 1, __PYX_ERR(0, 3406, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3407
 * 
 * cdef cudaError_t _cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3408
 * cdef cudaError_t _cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3408, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3409
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3410
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3409
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3411
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphRemoveDependencies(((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_from_), ((CUgraphNode *)__pyx_v_to), __pyx_v_numDependencies); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3411, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3412
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3413
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3413, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3412
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3414
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphDestroyNode(cudaGraphNode_t node) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3406
 *     return err
 * 
 * cdef cudaError_t _cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphRemoveDependencies", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3416
 *     return err
 * 
 * cdef cudaError_t _cudaGraphDestroyNode(cudaGraphNode_t node) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphDestroyNode(cudaGraphNode_t __pyx_v_node) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphDestroyNode", __pyx_f[0], 3416, 1, __PYX_ERR(0, 3416, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3417
 * 
 * cdef cudaError_t _cudaGraphDestroyNode(cudaGraphNode_t node) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3418
 * cdef cudaError_t _cudaGraphDestroyNode(cudaGraphNode_t node) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3418, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3419
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDestroyNode(<cydriver.CUgraphNode>node)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3420
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphDestroyNode(<cydriver.CUgraphNode>node)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3419
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDestroyNode(<cydriver.CUgraphNode>node)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3421
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDestroyNode(<cydriver.CUgraphNode>node)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphDestroyNode(((CUgraphNode)__pyx_v_node)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3421, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3422
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDestroyNode(<cydriver.CUgraphNode>node)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3423
 *     err = <cudaError_t>cydriver._cuGraphDestroyNode(<cydriver.CUgraphNode>node)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3423, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3422
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDestroyNode(<cydriver.CUgraphNode>node)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3424
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3416
 *     return err
 * 
 * cdef cudaError_t _cudaGraphDestroyNode(cudaGraphNode_t node) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphDestroyNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3426
 *     return err
 * 
 * cdef cudaError_t _cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphInstantiateWithFlags(pGraphExec, graph, flags)
 * 
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphInstantiate(cudaGraphExec_t *__pyx_v_pGraphExec, cudaGraph_t __pyx_v_graph, unsigned PY_LONG_LONG __pyx_v_flags) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphInstantiate", __pyx_f[0], 3426, 1, __PYX_ERR(0, 3426, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3427
 * 
 * cdef cudaError_t _cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     return _cudaGraphInstantiateWithFlags(pGraphExec, graph, flags)             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphInstantiateWithFlags(__pyx_v_pGraphExec, __pyx_v_graph, __pyx_v_flags); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3427, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3426
 *     return err
 * 
 * cdef cudaError_t _cudaGraphInstantiate(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     return _cudaGraphInstantiateWithFlags(pGraphExec, graph, flags)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphInstantiate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3429
 *     return _cudaGraphInstantiateWithFlags(pGraphExec, graph, flags)
 * 
 * cdef cudaError_t _cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphInstantiateWithFlags(cudaGraphExec_t *__pyx_v_pGraphExec, cudaGraph_t __pyx_v_graph, unsigned PY_LONG_LONG __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphInstantiateWithFlags", __pyx_f[0], 3429, 1, __PYX_ERR(0, 3429, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3430
 * 
 * cdef cudaError_t _cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3431
 * cdef cudaError_t _cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3431, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3432
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithFlags(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3433
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithFlags(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3432
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithFlags(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3434
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithFlags(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphInstantiateWithFlags(((CUgraphExec *)__pyx_v_pGraphExec), ((CUgraph)__pyx_v_graph), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3434, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3435
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithFlags(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3436
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithFlags(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3436, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3435
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithFlags(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3437
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3429
 *     return _cudaGraphInstantiateWithFlags(pGraphExec, graph, flags)
 * 
 * cdef cudaError_t _cudaGraphInstantiateWithFlags(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphInstantiateWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3439
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecKernelNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, struct cudaKernelNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_v_err;
  CUDA_KERNEL_NODE_PARAMS __pyx_v_driverNodeParams;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecKernelNodeSetParams", __pyx_f[0], 3439, 1, __PYX_ERR(0, 3439, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3440
 * 
 * cdef cudaError_t _cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3441
 * cdef cudaError_t _cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3441, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3442
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3443
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3442
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3445
 *         return err
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverKernelNodeParams(__pyx_v_pNodeParams, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3445, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3446
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecKernelNodeSetParams_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3447
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExecKernelNodeSetParams_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3446
 *     cdef cydriver.CUDA_KERNEL_NODE_PARAMS driverNodeParams
 *     err = toDriverKernelNodeParams(pNodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecKernelNodeSetParams_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3448
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecKernelNodeSetParams_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecKernelNodeSetParams_v2(((CUgraphExec)__pyx_v_hGraphExec), ((CUgraphNode)__pyx_v_node), (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3448, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3449
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecKernelNodeSetParams_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3450
 *     err = <cudaError_t>cydriver._cuGraphExecKernelNodeSetParams_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3450, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3449
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecKernelNodeSetParams_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3451
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3439
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecKernelNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3453
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecHostNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, struct cudaHostNodeParams const *__pyx_v_pNodeParams) {
  cudaError_t __pyx_v_err;
  CUDA_HOST_NODE_PARAMS __pyx_v_driverNodeParams;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecHostNodeSetParams", __pyx_f[0], 3453, 1, __PYX_ERR(0, 3453, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3454
 * 
 * cdef cudaError_t _cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3455
 * cdef cudaError_t _cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3455, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3456
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3457
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3456
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3459
 *         return err
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExecHostNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:
 */
  __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverHostNodeParams(__pyx_v_pNodeParams, (&__pyx_v_driverNodeParams));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3460
 *     cdef cydriver.CUDA_HOST_NODE_PARAMS driverNodeParams
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 *     err = <cudaError_t>cydriver._cuGraphExecHostNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecHostNodeSetParams(((CUgraphExec)__pyx_v_hGraphExec), ((CUgraphNode)__pyx_v_node), (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3460, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3461
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 *     err = <cudaError_t>cydriver._cuGraphExecHostNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3462
 *     err = <cudaError_t>cydriver._cuGraphExecHostNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3462, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3461
 *     toDriverHostNodeParams(pNodeParams, &driverNodeParams)
 *     err = <cudaError_t>cydriver._cuGraphExecHostNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3463
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3453
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecHostNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3465
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_node, cudaGraph_t __pyx_v_childGraph) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecChildGraphNodeSetParams", __pyx_f[0], 3465, 1, __PYX_ERR(0, 3465, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3466
 * 
 * cdef cudaError_t _cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3467
 * cdef cudaError_t _cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3467, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3468
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecChildGraphNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, <cydriver.CUgraph>childGraph)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3469
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExecChildGraphNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, <cydriver.CUgraph>childGraph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3468
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecChildGraphNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, <cydriver.CUgraph>childGraph)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3470
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecChildGraphNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, <cydriver.CUgraph>childGraph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecChildGraphNodeSetParams(((CUgraphExec)__pyx_v_hGraphExec), ((CUgraphNode)__pyx_v_node), ((CUgraph)__pyx_v_childGraph)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3470, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3471
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecChildGraphNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, <cydriver.CUgraph>childGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3472
 *     err = <cudaError_t>cydriver._cuGraphExecChildGraphNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, <cydriver.CUgraph>childGraph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3472, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3471
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecChildGraphNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>node, <cydriver.CUgraph>childGraph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3473
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3465
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecChildGraphNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3475
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecEventRecordNodeSetEvent", __pyx_f[0], 3475, 1, __PYX_ERR(0, 3475, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3476
 * 
 * cdef cudaError_t _cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3477
 * cdef cudaError_t _cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3477, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3478
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecEventRecordNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3479
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExecEventRecordNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3478
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecEventRecordNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3480
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecEventRecordNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecEventRecordNodeSetEvent(((CUgraphExec)__pyx_v_hGraphExec), ((CUgraphNode)__pyx_v_hNode), ((CUevent)__pyx_v_event)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3480, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3481
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecEventRecordNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3482
 *     err = <cudaError_t>cydriver._cuGraphExecEventRecordNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3482, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3481
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecEventRecordNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3483
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3475
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecEventRecordNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3485
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, cudaEvent_t __pyx_v_event) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecEventWaitNodeSetEvent", __pyx_f[0], 3485, 1, __PYX_ERR(0, 3485, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3486
 * 
 * cdef cudaError_t _cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3487
 * cdef cudaError_t _cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3487, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3488
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecEventWaitNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3489
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExecEventWaitNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3488
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecEventWaitNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3490
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecEventWaitNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecEventWaitNodeSetEvent(((CUgraphExec)__pyx_v_hGraphExec), ((CUgraphNode)__pyx_v_hNode), ((CUevent)__pyx_v_event)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3490, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3491
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecEventWaitNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3492
 *     err = <cudaError_t>cydriver._cuGraphExecEventWaitNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3492, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3491
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecEventWaitNodeSetEvent(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUevent>event)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3493
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3485
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecEventWaitNodeSetEvent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3495
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreSignalNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecExternalSemaphoresSignalNodeSetParams", __pyx_f[0], 3495, 1, __PYX_ERR(0, 3495, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3496
 * 
 * cdef cudaError_t _cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3497
 * cdef cudaError_t _cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3497, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3498
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3499
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3498
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3500
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecExternalSemaphoresSignalNodeSetParams(((CUgraphExec)__pyx_v_hGraphExec), ((CUgraphNode)__pyx_v_hNode), ((CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3500, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3501
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3502
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3502, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3501
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresSignalNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_SIGNAL_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3503
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3495
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecExternalSemaphoresSignalNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3505
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, struct cudaExternalSemaphoreWaitNodeParams const *__pyx_v_nodeParams) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecExternalSemaphoresWaitNodeSetParams", __pyx_f[0], 3505, 1, __PYX_ERR(0, 3505, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3506
 * 
 * cdef cudaError_t _cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3507
 * cdef cudaError_t _cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3507, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3508
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3509
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3508
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3510
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecExternalSemaphoresWaitNodeSetParams(((CUgraphExec)__pyx_v_hGraphExec), ((CUgraphNode)__pyx_v_hNode), ((CUDA_EXT_SEM_WAIT_NODE_PARAMS *)__pyx_v_nodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3510, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3511
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3512
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3512, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3511
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecExternalSemaphoresWaitNodeSetParams(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, <cydriver.CUDA_EXT_SEM_WAIT_NODE_PARAMS*>nodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3513
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3505
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecExternalSemaphoresWaitNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3515
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeSetEnabled(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, unsigned int __pyx_v_isEnabled) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphNodeSetEnabled", __pyx_f[0], 3515, 1, __PYX_ERR(0, 3515, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3516
 * 
 * cdef cudaError_t _cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3517
 * cdef cudaError_t _cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3517, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3518
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeSetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3519
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphNodeSetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3518
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeSetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3520
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeSetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeSetEnabled(((CUgraphExec)__pyx_v_hGraphExec), ((CUgraphNode)__pyx_v_hNode), __pyx_v_isEnabled); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3520, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3521
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeSetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3522
 *     err = <cudaError_t>cydriver._cuGraphNodeSetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3522, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3521
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeSetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3523
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3515
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphNodeSetEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3525
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetEnabled(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraphNode_t __pyx_v_hNode, unsigned int *__pyx_v_isEnabled) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphNodeGetEnabled", __pyx_f[0], 3525, 1, __PYX_ERR(0, 3525, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3526
 * 
 * cdef cudaError_t _cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3527
 * cdef cudaError_t _cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3527, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3528
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3529
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphNodeGetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3528
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3530
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetEnabled(((CUgraphExec)__pyx_v_hGraphExec), ((CUgraphNode)__pyx_v_hNode), __pyx_v_isEnabled); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3530, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3531
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3532
 *     err = <cudaError_t>cydriver._cuGraphNodeGetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3532, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3531
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetEnabled(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraphNode>hNode, isEnabled)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3533
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3525
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphNodeGetEnabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3535
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecUpdate(cudaGraphExec_t __pyx_v_hGraphExec, cudaGraph_t __pyx_v_hGraph, cudaGraphExecUpdateResultInfo *__pyx_v_resultInfo) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecUpdate", __pyx_f[0], 3535, 1, __PYX_ERR(0, 3535, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3536
 * 
 * cdef cudaError_t _cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3537
 * cdef cudaError_t _cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3537, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3538
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecUpdate_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraph>hGraph, <cydriver.CUgraphExecUpdateResultInfo*>resultInfo)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3539
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExecUpdate_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraph>hGraph, <cydriver.CUgraphExecUpdateResultInfo*>resultInfo)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3538
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecUpdate_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraph>hGraph, <cydriver.CUgraphExecUpdateResultInfo*>resultInfo)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3540
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecUpdate_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraph>hGraph, <cydriver.CUgraphExecUpdateResultInfo*>resultInfo)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecUpdate_v2(((CUgraphExec)__pyx_v_hGraphExec), ((CUgraph)__pyx_v_hGraph), ((CUgraphExecUpdateResultInfo *)__pyx_v_resultInfo)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3540, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3541
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecUpdate_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraph>hGraph, <cydriver.CUgraphExecUpdateResultInfo*>resultInfo)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3542
 *     err = <cudaError_t>cydriver._cuGraphExecUpdate_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraph>hGraph, <cydriver.CUgraphExecUpdateResultInfo*>resultInfo)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3542, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3541
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecUpdate_v2(<cydriver.CUgraphExec>hGraphExec, <cydriver.CUgraph>hGraph, <cydriver.CUgraphExecUpdateResultInfo*>resultInfo)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3543
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3535
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecUpdate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3545
 *     return err
 * 
 * cdef cudaError_t _cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphUpload(cudaGraphExec_t __pyx_v_graphExec, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphUpload", __pyx_f[0], 3545, 1, __PYX_ERR(0, 3545, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3546
 * 
 * cdef cudaError_t _cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3547
 * cdef cudaError_t _cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3547, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3548
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphUpload(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3549
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphUpload(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3548
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphUpload(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3550
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphUpload(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphUpload(((CUgraphExec)__pyx_v_graphExec), ((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3550, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3551
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphUpload(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3552
 *     err = <cudaError_t>cydriver._cuGraphUpload(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3552, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3551
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphUpload(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3553
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3545
 *     return err
 * 
 * cdef cudaError_t _cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphUpload", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3555
 *     return err
 * 
 * cdef cudaError_t _cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphLaunch(cudaGraphExec_t __pyx_v_graphExec, cudaStream_t __pyx_v_stream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphLaunch", __pyx_f[0], 3555, 1, __PYX_ERR(0, 3555, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3556
 * 
 * cdef cudaError_t _cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3557
 * cdef cudaError_t _cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3557, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3558
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphLaunch(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3559
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphLaunch(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3558
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphLaunch(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3560
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphLaunch(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphLaunch(((CUgraphExec)__pyx_v_graphExec), ((CUstream)__pyx_v_stream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3560, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3561
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphLaunch(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3562
 *     err = <cudaError_t>cydriver._cuGraphLaunch(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3562, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3561
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphLaunch(<cydriver.CUgraphExec>graphExec, <cydriver.CUstream>stream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3563
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExecDestroy(cudaGraphExec_t graphExec) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3555
 *     return err
 * 
 * cdef cudaError_t _cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphLaunch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3565
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecDestroy(cudaGraphExec_t graphExec) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecDestroy(cudaGraphExec_t __pyx_v_graphExec) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecDestroy", __pyx_f[0], 3565, 1, __PYX_ERR(0, 3565, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3566
 * 
 * cdef cudaError_t _cudaGraphExecDestroy(cudaGraphExec_t graphExec) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3567
 * cdef cudaError_t _cudaGraphExecDestroy(cudaGraphExec_t graphExec) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3567, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3568
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecDestroy(<cydriver.CUgraphExec>graphExec)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3569
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExecDestroy(<cydriver.CUgraphExec>graphExec)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3568
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecDestroy(<cydriver.CUgraphExec>graphExec)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3570
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecDestroy(<cydriver.CUgraphExec>graphExec)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecDestroy(((CUgraphExec)__pyx_v_graphExec)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3570, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3571
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecDestroy(<cydriver.CUgraphExec>graphExec)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3572
 *     err = <cudaError_t>cydriver._cuGraphExecDestroy(<cydriver.CUgraphExec>graphExec)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3572, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3571
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecDestroy(<cydriver.CUgraphExec>graphExec)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3573
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphDestroy(cudaGraph_t graph) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3565
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecDestroy(cudaGraphExec_t graphExec) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3575
 *     return err
 * 
 * cdef cudaError_t _cudaGraphDestroy(cudaGraph_t graph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphDestroy(cudaGraph_t __pyx_v_graph) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphDestroy", __pyx_f[0], 3575, 1, __PYX_ERR(0, 3575, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3576
 * 
 * cdef cudaError_t _cudaGraphDestroy(cudaGraph_t graph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3577
 * cdef cudaError_t _cudaGraphDestroy(cudaGraph_t graph) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3577, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3578
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDestroy(<cydriver.CUgraph>graph)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3579
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphDestroy(<cydriver.CUgraph>graph)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3578
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDestroy(<cydriver.CUgraph>graph)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3580
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDestroy(<cydriver.CUgraph>graph)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphDestroy(((CUgraph)__pyx_v_graph)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3580, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3581
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDestroy(<cydriver.CUgraph>graph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3582
 *     err = <cudaError_t>cydriver._cuGraphDestroy(<cydriver.CUgraph>graph)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3582, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3581
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDestroy(<cydriver.CUgraph>graph)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3583
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3575
 *     return err
 * 
 * cdef cudaError_t _cudaGraphDestroy(cudaGraph_t graph) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphDestroy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3585
 *     return err
 * 
 * cdef cudaError_t _cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphDebugDotPrint(cudaGraph_t __pyx_v_graph, char const *__pyx_v_path, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphDebugDotPrint", __pyx_f[0], 3585, 1, __PYX_ERR(0, 3585, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3586
 * 
 * cdef cudaError_t _cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3587
 * cdef cudaError_t _cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3587, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3588
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDebugDotPrint(<cydriver.CUgraph>graph, path, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3589
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphDebugDotPrint(<cydriver.CUgraph>graph, path, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3588
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDebugDotPrint(<cydriver.CUgraph>graph, path, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3590
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDebugDotPrint(<cydriver.CUgraph>graph, path, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphDebugDotPrint(((CUgraph)__pyx_v_graph), __pyx_v_path, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3590, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3591
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDebugDotPrint(<cydriver.CUgraph>graph, path, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3592
 *     err = <cudaError_t>cydriver._cuGraphDebugDotPrint(<cydriver.CUgraph>graph, path, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3592, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3591
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphDebugDotPrint(<cydriver.CUgraph>graph, path, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3593
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3585
 *     return err
 * 
 * cdef cudaError_t _cudaGraphDebugDotPrint(cudaGraph_t graph, const char* path, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphDebugDotPrint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3595
 *     return err
 * 
 * cdef cudaError_t _cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaUserObjectCreate(cudaUserObject_t *__pyx_v_object_out, void *__pyx_v_ptr, cudaHostFn_t __pyx_v_destroy, unsigned int __pyx_v_initialRefcount, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaUserObjectCreate", __pyx_f[0], 3595, 1, __PYX_ERR(0, 3595, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3596
 * 
 * cdef cudaError_t _cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3597
 * cdef cudaError_t _cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3597, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3598
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectCreate(<cydriver.CUuserObject*>object_out, ptr, <cydriver.CUhostFn>destroy, initialRefcount, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3599
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuUserObjectCreate(<cydriver.CUuserObject*>object_out, ptr, <cydriver.CUhostFn>destroy, initialRefcount, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3598
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectCreate(<cydriver.CUuserObject*>object_out, ptr, <cydriver.CUhostFn>destroy, initialRefcount, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3600
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectCreate(<cydriver.CUuserObject*>object_out, ptr, <cydriver.CUhostFn>destroy, initialRefcount, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuUserObjectCreate(((CUuserObject *)__pyx_v_object_out), __pyx_v_ptr, ((CUhostFn)__pyx_v_destroy), __pyx_v_initialRefcount, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3600, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3601
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectCreate(<cydriver.CUuserObject*>object_out, ptr, <cydriver.CUhostFn>destroy, initialRefcount, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3602
 *     err = <cudaError_t>cydriver._cuUserObjectCreate(<cydriver.CUuserObject*>object_out, ptr, <cydriver.CUhostFn>destroy, initialRefcount, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3602, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3601
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectCreate(<cydriver.CUuserObject*>object_out, ptr, <cydriver.CUhostFn>destroy, initialRefcount, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3603
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3595
 *     return err
 * 
 * cdef cudaError_t _cudaUserObjectCreate(cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaUserObjectCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3605
 *     return err
 * 
 * cdef cudaError_t _cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaUserObjectRetain(cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaUserObjectRetain", __pyx_f[0], 3605, 1, __PYX_ERR(0, 3605, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3606
 * 
 * cdef cudaError_t _cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3607
 * cdef cudaError_t _cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3607, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3608
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectRetain(<cydriver.CUuserObject>object, count)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3609
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuUserObjectRetain(<cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3608
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectRetain(<cydriver.CUuserObject>object, count)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3610
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectRetain(<cydriver.CUuserObject>object, count)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuUserObjectRetain(((CUuserObject)__pyx_v_object), __pyx_v_count); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3610, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3611
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectRetain(<cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3612
 *     err = <cudaError_t>cydriver._cuUserObjectRetain(<cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3612, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3611
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectRetain(<cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3613
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3605
 *     return err
 * 
 * cdef cudaError_t _cudaUserObjectRetain(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaUserObjectRetain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3615
 *     return err
 * 
 * cdef cudaError_t _cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaUserObjectRelease(cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaUserObjectRelease", __pyx_f[0], 3615, 1, __PYX_ERR(0, 3615, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3616
 * 
 * cdef cudaError_t _cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3617
 * cdef cudaError_t _cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3617, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3618
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectRelease(<cydriver.CUuserObject>object, count)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3619
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuUserObjectRelease(<cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3618
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectRelease(<cydriver.CUuserObject>object, count)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3620
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectRelease(<cydriver.CUuserObject>object, count)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuUserObjectRelease(((CUuserObject)__pyx_v_object), __pyx_v_count); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3620, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3621
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectRelease(<cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3622
 *     err = <cudaError_t>cydriver._cuUserObjectRelease(<cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3622, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3621
 *         return err
 *     err = <cudaError_t>cydriver._cuUserObjectRelease(<cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3623
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3615
 *     return err
 * 
 * cdef cudaError_t _cudaUserObjectRelease(cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaUserObjectRelease", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3625
 *     return err
 * 
 * cdef cudaError_t _cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphRetainUserObject(cudaGraph_t __pyx_v_graph, cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphRetainUserObject", __pyx_f[0], 3625, 1, __PYX_ERR(0, 3625, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3626
 * 
 * cdef cudaError_t _cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3627
 * cdef cudaError_t _cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3627, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3628
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRetainUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3629
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphRetainUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3628
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRetainUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3630
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRetainUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphRetainUserObject(((CUgraph)__pyx_v_graph), ((CUuserObject)__pyx_v_object), __pyx_v_count, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3630, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3631
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRetainUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3632
 *     err = <cudaError_t>cydriver._cuGraphRetainUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3632, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3631
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRetainUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3633
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3625
 *     return err
 * 
 * cdef cudaError_t _cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphRetainUserObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3635
 *     return err
 * 
 * cdef cudaError_t _cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphReleaseUserObject(cudaGraph_t __pyx_v_graph, cudaUserObject_t __pyx_v_object, unsigned int __pyx_v_count) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphReleaseUserObject", __pyx_f[0], 3635, 1, __PYX_ERR(0, 3635, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3636
 * 
 * cdef cudaError_t _cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3637
 * cdef cudaError_t _cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3637, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3638
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphReleaseUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3639
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphReleaseUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3638
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphReleaseUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3640
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphReleaseUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphReleaseUserObject(((CUgraph)__pyx_v_graph), ((CUuserObject)__pyx_v_object), __pyx_v_count); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3640, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3641
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphReleaseUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3642
 *     err = <cudaError_t>cydriver._cuGraphReleaseUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3642, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3641
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphReleaseUserObject(<cydriver.CUgraph>graph, <cydriver.CUuserObject>object, count)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3643
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaProfilerStart() except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3635
 *     return err
 * 
 * cdef cudaError_t _cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned int count) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphReleaseUserObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3645
 *     return err
 * 
 * cdef cudaError_t _cudaProfilerStart() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaProfilerStart(void) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaProfilerStart", __pyx_f[0], 3645, 1, __PYX_ERR(0, 3645, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3646
 * 
 * cdef cudaError_t _cudaProfilerStart() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3647
 * cdef cudaError_t _cudaProfilerStart() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3647, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3648
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuProfilerStart()
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3649
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuProfilerStart()
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3648
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuProfilerStart()
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3650
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuProfilerStart()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuProfilerStart(); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3650, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3651
 *         return err
 *     err = <cudaError_t>cydriver._cuProfilerStart()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3652
 *     err = <cudaError_t>cydriver._cuProfilerStart()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3652, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3651
 *         return err
 *     err = <cudaError_t>cydriver._cuProfilerStart()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3653
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaProfilerStop() except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3645
 *     return err
 * 
 * cdef cudaError_t _cudaProfilerStart() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaProfilerStart", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3655
 *     return err
 * 
 * cdef cudaError_t _cudaProfilerStop() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaProfilerStop(void) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaProfilerStop", __pyx_f[0], 3655, 1, __PYX_ERR(0, 3655, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3656
 * 
 * cdef cudaError_t _cudaProfilerStop() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3657
 * cdef cudaError_t _cudaProfilerStop() except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3657, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3658
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuProfilerStop()
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3659
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuProfilerStop()
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3658
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuProfilerStop()
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3660
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuProfilerStop()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuProfilerStop(); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3660, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3661
 *         return err
 *     err = <cudaError_t>cydriver._cuProfilerStop()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3662
 *     err = <cudaError_t>cydriver._cuProfilerStop()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3662, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3661
 *         return err
 *     err = <cudaError_t>cydriver._cuProfilerStop()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3663
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphicsEGLRegisterImage(cudaGraphicsResource_t* pCudaResource, EGLImageKHR image, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3655
 *     return err
 * 
 * cdef cudaError_t _cudaProfilerStop() except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaProfilerStop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3665
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsEGLRegisterImage(cudaGraphicsResource_t* pCudaResource, EGLImageKHR image, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsEGLRegisterImage(cudaGraphicsResource_t *__pyx_v_pCudaResource, __pyx_t_4cuda_8bindings_9cyruntime_EGLImageKHR __pyx_v_image, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphicsEGLRegisterImage", __pyx_f[0], 3665, 1, __PYX_ERR(0, 3665, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3666
 * 
 * cdef cudaError_t _cudaGraphicsEGLRegisterImage(cudaGraphicsResource_t* pCudaResource, EGLImageKHR image, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3667
 * cdef cudaError_t _cudaGraphicsEGLRegisterImage(cudaGraphicsResource_t* pCudaResource, EGLImageKHR image, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3667, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3668
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsEGLRegisterImage(<cydriver.CUgraphicsResource*>pCudaResource, image, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3669
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphicsEGLRegisterImage(<cydriver.CUgraphicsResource*>pCudaResource, image, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3668
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsEGLRegisterImage(<cydriver.CUgraphicsResource*>pCudaResource, image, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3670
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsEGLRegisterImage(<cydriver.CUgraphicsResource*>pCudaResource, image, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsEGLRegisterImage(((CUgraphicsResource *)__pyx_v_pCudaResource), __pyx_v_image, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3670, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3671
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsEGLRegisterImage(<cydriver.CUgraphicsResource*>pCudaResource, image, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3672
 *     err = <cudaError_t>cydriver._cuGraphicsEGLRegisterImage(<cydriver.CUgraphicsResource*>pCudaResource, image, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3672, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3671
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphicsEGLRegisterImage(<cydriver.CUgraphicsResource*>pCudaResource, image, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3673
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3665
 *     return err
 * 
 * cdef cudaError_t _cudaGraphicsEGLRegisterImage(cudaGraphicsResource_t* pCudaResource, EGLImageKHR image, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphicsEGLRegisterImage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3675
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamConsumerConnect(__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_8bindings_9cyruntime_EGLStreamKHR __pyx_v_eglStream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEGLStreamConsumerConnect", __pyx_f[0], 3675, 1, __PYX_ERR(0, 3675, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3676
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3677
 * cdef cudaError_t _cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3677, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3678
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3679
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3678
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3680
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerConnect(((__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *)__pyx_v_conn), __pyx_v_eglStream); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3680, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3681
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3682
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3682, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3681
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3683
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3675
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEGLStreamConsumerConnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3685
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamConsumerConnectWithFlags(__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_8bindings_9cyruntime_EGLStreamKHR __pyx_v_eglStream, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEGLStreamConsumerConnectWithFlags", __pyx_f[0], 3685, 1, __PYX_ERR(0, 3685, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3686
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3687
 * cdef cudaError_t _cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3687, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3688
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnectWithFlags(<cydriver.CUeglStreamConnection*>conn, eglStream, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3689
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnectWithFlags(<cydriver.CUeglStreamConnection*>conn, eglStream, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3688
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnectWithFlags(<cydriver.CUeglStreamConnection*>conn, eglStream, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3690
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnectWithFlags(<cydriver.CUeglStreamConnection*>conn, eglStream, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerConnectWithFlags(((__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *)__pyx_v_conn), __pyx_v_eglStream, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3690, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3691
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnectWithFlags(<cydriver.CUeglStreamConnection*>conn, eglStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3692
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnectWithFlags(<cydriver.CUeglStreamConnection*>conn, eglStream, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3692, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3691
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerConnectWithFlags(<cydriver.CUeglStreamConnection*>conn, eglStream, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3693
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3685
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerConnectWithFlags(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEGLStreamConsumerConnectWithFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3695
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamConsumerDisconnect(__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *__pyx_v_conn) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEGLStreamConsumerDisconnect", __pyx_f[0], 3695, 1, __PYX_ERR(0, 3695, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3696
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3697
 * cdef cudaError_t _cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3697, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3698
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3699
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3698
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3700
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerDisconnect(<cydriver.CUeglStreamConnection*>conn)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerDisconnect(((__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *)__pyx_v_conn)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3700, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3701
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3702
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3702, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3701
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3703
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3695
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEGLStreamConsumerDisconnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3705
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamConsumerAcquireFrame(__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *__pyx_v_conn, cudaGraphicsResource_t *__pyx_v_pCudaResource, cudaStream_t *__pyx_v_pStream, unsigned int __pyx_v_timeout) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEGLStreamConsumerAcquireFrame", __pyx_f[0], 3705, 1, __PYX_ERR(0, 3705, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3706
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3707
 * cdef cudaError_t _cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3707, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3708
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerAcquireFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource*>pCudaResource, <cydriver.CUstream*>pStream, timeout)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3709
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerAcquireFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource*>pCudaResource, <cydriver.CUstream*>pStream, timeout)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3708
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerAcquireFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource*>pCudaResource, <cydriver.CUstream*>pStream, timeout)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3710
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerAcquireFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource*>pCudaResource, <cydriver.CUstream*>pStream, timeout)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerAcquireFrame(((__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *)__pyx_v_conn), ((CUgraphicsResource *)__pyx_v_pCudaResource), ((CUstream *)__pyx_v_pStream), __pyx_v_timeout); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3710, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3711
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerAcquireFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource*>pCudaResource, <cydriver.CUstream*>pStream, timeout)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3712
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerAcquireFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource*>pCudaResource, <cydriver.CUstream*>pStream, timeout)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3712, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3711
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerAcquireFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource*>pCudaResource, <cydriver.CUstream*>pStream, timeout)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3713
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3705
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerAcquireFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEGLStreamConsumerAcquireFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3715
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamConsumerReleaseFrame(__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *__pyx_v_conn, cudaGraphicsResource_t __pyx_v_pCudaResource, cudaStream_t *__pyx_v_pStream) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEGLStreamConsumerReleaseFrame", __pyx_f[0], 3715, 1, __PYX_ERR(0, 3715, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3716
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3717
 * cdef cudaError_t _cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3717, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3718
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerReleaseFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource>pCudaResource, <cydriver.CUstream*>pStream)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3719
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerReleaseFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource>pCudaResource, <cydriver.CUstream*>pStream)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3718
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerReleaseFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource>pCudaResource, <cydriver.CUstream*>pStream)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3720
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerReleaseFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource>pCudaResource, <cydriver.CUstream*>pStream)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerReleaseFrame(((__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *)__pyx_v_conn), ((CUgraphicsResource)__pyx_v_pCudaResource), ((CUstream *)__pyx_v_pStream)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3720, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3721
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerReleaseFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource>pCudaResource, <cydriver.CUstream*>pStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3722
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerReleaseFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource>pCudaResource, <cydriver.CUstream*>pStream)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3722, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3721
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamConsumerReleaseFrame(<cydriver.CUeglStreamConnection*>conn, <cydriver.CUgraphicsResource>pCudaResource, <cydriver.CUstream*>pStream)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3723
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3715
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamConsumerReleaseFrame(cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEGLStreamConsumerReleaseFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3725
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamProducerConnect(__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *__pyx_v_conn, __pyx_t_4cuda_8bindings_9cyruntime_EGLStreamKHR __pyx_v_eglStream, __pyx_t_4cuda_8bindings_9cyruntime_EGLint __pyx_v_width, __pyx_t_4cuda_8bindings_9cyruntime_EGLint __pyx_v_height) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEGLStreamProducerConnect", __pyx_f[0], 3725, 1, __PYX_ERR(0, 3725, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3726
 * 
 * cdef cudaError_t _cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3727
 * cdef cudaError_t _cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3727, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3728
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream, width, height)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3729
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream, width, height)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3728
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream, width, height)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3730
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream, width, height)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerConnect(((__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *)__pyx_v_conn), __pyx_v_eglStream, __pyx_v_width, __pyx_v_height); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3730, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3731
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream, width, height)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3732
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream, width, height)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3732, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3731
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerConnect(<cydriver.CUeglStreamConnection*>conn, eglStream, width, height)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3733
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3725
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamProducerConnect(cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEGLStreamProducerConnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3735
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamProducerDisconnect(__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *__pyx_v_conn) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEGLStreamProducerDisconnect", __pyx_f[0], 3735, 1, __PYX_ERR(0, 3735, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3736
 * 
 * cdef cudaError_t _cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3737
 * cdef cudaError_t _cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3737, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3738
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3739
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3738
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3740
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerDisconnect(<cydriver.CUeglStreamConnection*>conn)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerDisconnect(((__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *)__pyx_v_conn)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3740, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3741
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3742
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3742, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3741
 *         return err
 *     err = <cudaError_t>cydriver._cuEGLStreamProducerDisconnect(<cydriver.CUeglStreamConnection*>conn)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3743
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3735
 *     return err
 * 
 * cdef cudaError_t _cudaEGLStreamProducerDisconnect(cudaEglStreamConnection* conn) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEGLStreamProducerDisconnect", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3745
 *     return err
 * 
 * cdef cudaError_t _cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventCreateFromEGLSync(cudaEvent_t *__pyx_v_phEvent, __pyx_t_4cuda_8bindings_9cyruntime_EGLSyncKHR __pyx_v_eglSync, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaEventCreateFromEGLSync", __pyx_f[0], 3745, 1, __PYX_ERR(0, 3745, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3746
 * 
 * cdef cudaError_t _cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3747
 * cdef cudaError_t _cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3747, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3748
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreateFromEGLSync(<cydriver.CUevent*>phEvent, eglSync, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3749
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuEventCreateFromEGLSync(<cydriver.CUevent*>phEvent, eglSync, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3748
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreateFromEGLSync(<cydriver.CUevent*>phEvent, eglSync, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3750
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreateFromEGLSync(<cydriver.CUevent*>phEvent, eglSync, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventCreateFromEGLSync(((CUevent *)__pyx_v_phEvent), __pyx_v_eglSync, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3750, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3751
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreateFromEGLSync(<cydriver.CUevent*>phEvent, eglSync, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3752
 *     err = <cudaError_t>cydriver._cuEventCreateFromEGLSync(<cydriver.CUevent*>phEvent, eglSync, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3752, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3751
 *         return err
 *     err = <cudaError_t>cydriver._cuEventCreateFromEGLSync(<cydriver.CUevent*>phEvent, eglSync, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3753
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaInitDevice(int deviceOrdinal, unsigned int deviceFlags, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3745
 *     return err
 * 
 * cdef cudaError_t _cudaEventCreateFromEGLSync(cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaEventCreateFromEGLSync", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3755
 *     return err
 * 
 * cdef cudaError_t _cudaInitDevice(int deviceOrdinal, unsigned int deviceFlags, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaPythonDevice *device
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaInitDevice(int __pyx_v_deviceOrdinal, unsigned int __pyx_v_deviceFlags, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *__pyx_v_device;
  unsigned int __pyx_v_scheduleFlags;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaInitDevice", __pyx_f[0], 3755, 1, __PYX_ERR(0, 3755, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3756
 * 
 * cdef cudaError_t _cudaInitDevice(int deviceOrdinal, unsigned int deviceFlags, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cudaPythonDevice *device
 *     cdef unsigned int scheduleFlags
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3760
 *     cdef unsigned int scheduleFlags
 * 
 *     err = m_global.lazyInitDriver()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitDriver(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3760, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3761
 * 
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3762
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 * 
 *     device = m_global.getDevice(deviceOrdinal)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3761
 * 
 *     err = m_global.lazyInitDriver()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3764
 *         return err
 * 
 *     device = m_global.getDevice(deviceOrdinal)             # <<<<<<<<<<<<<<
 *     if device == NULL:
 *         _setLastError(cudaErrorInvalidDevice)
 */
  __pyx_v_device = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->getDevice(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, __pyx_v_deviceOrdinal);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3765
 * 
 *     device = m_global.getDevice(deviceOrdinal)
 *     if device == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidDevice)
 *         return cudaErrorInvalidDevice
 */
  __pyx_t_2 = (__pyx_v_device == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3766
 *     device = m_global.getDevice(deviceOrdinal)
 *     if device == NULL:
 *         _setLastError(cudaErrorInvalidDevice)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidDevice
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidDevice); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3766, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3767
 *     if device == NULL:
 *         _setLastError(cudaErrorInvalidDevice)
 *         return cudaErrorInvalidDevice             # <<<<<<<<<<<<<<
 * 
 *     if device.primaryContext == NULL:
 */
    __pyx_r = cudaErrorInvalidDevice;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3765
 * 
 *     device = m_global.getDevice(deviceOrdinal)
 *     if device == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidDevice)
 *         return cudaErrorInvalidDevice
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3769
 *         return cudaErrorInvalidDevice
 * 
 *     if device.primaryContext == NULL:             # <<<<<<<<<<<<<<
 *         initPrimaryContext(device)
 * 
 */
  __pyx_t_2 = (__pyx_v_device->primaryContext == NULL);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3770
 * 
 *     if device.primaryContext == NULL:
 *         initPrimaryContext(device)             # <<<<<<<<<<<<<<
 * 
 *     if flags & cudaInitDeviceFlagsAreValid:
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_initPrimaryContext(__pyx_v_device); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3770, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3769
 *         return cudaErrorInvalidDevice
 * 
 *     if device.primaryContext == NULL:             # <<<<<<<<<<<<<<
 *         initPrimaryContext(device)
 * 
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3772
 *         initPrimaryContext(device)
 * 
 *     if flags & cudaInitDeviceFlagsAreValid:             # <<<<<<<<<<<<<<
 *         scheduleFlags = deviceFlags & cudaDeviceScheduleMask
 *         deviceFlags &= ~cudaDeviceMapHost
 */
  __pyx_t_2 = ((__pyx_v_flags & __pyx_e_4cuda_8bindings_9cyruntime_cudaInitDeviceFlagsAreValid) != 0);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3773
 * 
 *     if flags & cudaInitDeviceFlagsAreValid:
 *         scheduleFlags = deviceFlags & cudaDeviceScheduleMask             # <<<<<<<<<<<<<<
 *         deviceFlags &= ~cudaDeviceMapHost
 *         if deviceFlags & ~cudaDeviceMask:
 */
    __pyx_v_scheduleFlags = (__pyx_v_deviceFlags & __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleMask);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3774
 *     if flags & cudaInitDeviceFlagsAreValid:
 *         scheduleFlags = deviceFlags & cudaDeviceScheduleMask
 *         deviceFlags &= ~cudaDeviceMapHost             # <<<<<<<<<<<<<<
 *         if deviceFlags & ~cudaDeviceMask:
 *             _setLastError(cudaErrorInvalidValue)
 */
    __pyx_v_deviceFlags = (__pyx_v_deviceFlags & (~__pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceMapHost));

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3775
 *         scheduleFlags = deviceFlags & cudaDeviceScheduleMask
 *         deviceFlags &= ~cudaDeviceMapHost
 *         if deviceFlags & ~cudaDeviceMask:             # <<<<<<<<<<<<<<
 *             _setLastError(cudaErrorInvalidValue)
 *             return cudaErrorInvalidValue
 */
    __pyx_t_2 = ((__pyx_v_deviceFlags & (~__pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceMask)) != 0);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3776
 *         deviceFlags &= ~cudaDeviceMapHost
 *         if deviceFlags & ~cudaDeviceMask:
 *             _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *             return cudaErrorInvalidValue
 *         if scheduleFlags:
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3776, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3777
 *         if deviceFlags & ~cudaDeviceMask:
 *             _setLastError(cudaErrorInvalidValue)
 *             return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *         if scheduleFlags:
 *             if scheduleFlags != cudaDeviceScheduleSpin and scheduleFlags != cudaDeviceScheduleYield and scheduleFlags != cudaDeviceScheduleBlockingSync:
 */
      __pyx_r = cudaErrorInvalidValue;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3775
 *         scheduleFlags = deviceFlags & cudaDeviceScheduleMask
 *         deviceFlags &= ~cudaDeviceMapHost
 *         if deviceFlags & ~cudaDeviceMask:             # <<<<<<<<<<<<<<
 *             _setLastError(cudaErrorInvalidValue)
 *             return cudaErrorInvalidValue
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3778
 *             _setLastError(cudaErrorInvalidValue)
 *             return cudaErrorInvalidValue
 *         if scheduleFlags:             # <<<<<<<<<<<<<<
 *             if scheduleFlags != cudaDeviceScheduleSpin and scheduleFlags != cudaDeviceScheduleYield and scheduleFlags != cudaDeviceScheduleBlockingSync:
 *                 _setLastError(cudaErrorInvalidValue)
 */
    __pyx_t_2 = (__pyx_v_scheduleFlags != 0);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3779
 *             return cudaErrorInvalidValue
 *         if scheduleFlags:
 *             if scheduleFlags != cudaDeviceScheduleSpin and scheduleFlags != cudaDeviceScheduleYield and scheduleFlags != cudaDeviceScheduleBlockingSync:             # <<<<<<<<<<<<<<
 *                 _setLastError(cudaErrorInvalidValue)
 *                 return cudaErrorInvalidValue
 */
      switch (__pyx_v_scheduleFlags) {
        case __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleSpin:
        case __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleYield:
        case __pyx_e_4cuda_8bindings_9cyruntime_cudaDeviceScheduleBlockingSync:
        __pyx_t_2 = 0;
        break;
        default:
        __pyx_t_2 = 1;
        break;
      }
      if (__pyx_t_2) {

        /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3780
 *         if scheduleFlags:
 *             if scheduleFlags != cudaDeviceScheduleSpin and scheduleFlags != cudaDeviceScheduleYield and scheduleFlags != cudaDeviceScheduleBlockingSync:
 *                 _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *                 return cudaErrorInvalidValue
 * 
 */
        __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3780, __pyx_L1_error)

        /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3781
 *             if scheduleFlags != cudaDeviceScheduleSpin and scheduleFlags != cudaDeviceScheduleYield and scheduleFlags != cudaDeviceScheduleBlockingSync:
 *                 _setLastError(cudaErrorInvalidValue)
 *                 return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 * 
 *         err = <cudaError_t>cydriver._cuDevicePrimaryCtxSetFlags_v2(device[0].driverDevice, deviceFlags)
 */
        __pyx_r = cudaErrorInvalidValue;
        goto __pyx_L0;

        /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3779
 *             return cudaErrorInvalidValue
 *         if scheduleFlags:
 *             if scheduleFlags != cudaDeviceScheduleSpin and scheduleFlags != cudaDeviceScheduleYield and scheduleFlags != cudaDeviceScheduleBlockingSync:             # <<<<<<<<<<<<<<
 *                 _setLastError(cudaErrorInvalidValue)
 *                 return cudaErrorInvalidValue
 */
      }

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3778
 *             _setLastError(cudaErrorInvalidValue)
 *             return cudaErrorInvalidValue
 *         if scheduleFlags:             # <<<<<<<<<<<<<<
 *             if scheduleFlags != cudaDeviceScheduleSpin and scheduleFlags != cudaDeviceScheduleYield and scheduleFlags != cudaDeviceScheduleBlockingSync:
 *                 _setLastError(cudaErrorInvalidValue)
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3783
 *                 return cudaErrorInvalidValue
 * 
 *         err = <cudaError_t>cydriver._cuDevicePrimaryCtxSetFlags_v2(device[0].driverDevice, deviceFlags)             # <<<<<<<<<<<<<<
 *         if err != cudaSuccess:
 *             _setLastError(err)
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDevicePrimaryCtxSetFlags_v2((__pyx_v_device[0]).driverDevice, __pyx_v_deviceFlags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3783, __pyx_L1_error)
    __pyx_v_err = ((cudaError_t)__pyx_t_3);

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3784
 * 
 *         err = <cudaError_t>cydriver._cuDevicePrimaryCtxSetFlags_v2(device[0].driverDevice, deviceFlags)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    __pyx_t_2 = (__pyx_v_err != cudaSuccess);
    if (__pyx_t_2) {

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3785
 *         err = <cudaError_t>cydriver._cuDevicePrimaryCtxSetFlags_v2(device[0].driverDevice, deviceFlags)
 *         if err != cudaSuccess:
 *             _setLastError(err)             # <<<<<<<<<<<<<<
 *             return err
 *     return cudaSuccess
 */
      __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3785, __pyx_L1_error)

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3786
 *         if err != cudaSuccess:
 *             _setLastError(err)
 *             return err             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
      __pyx_r = __pyx_v_err;
      goto __pyx_L0;

      /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3784
 * 
 *         err = <cudaError_t>cydriver._cuDevicePrimaryCtxSetFlags_v2(device[0].driverDevice, deviceFlags)
 *         if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *             _setLastError(err)
 *             return err
 */
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3772
 *         initPrimaryContext(device)
 * 
 *     if flags & cudaInitDeviceFlagsAreValid:             # <<<<<<<<<<<<<<
 *         scheduleFlags = deviceFlags & cudaDeviceScheduleMask
 *         deviceFlags &= ~cudaDeviceMapHost
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3787
 *             _setLastError(err)
 *             return err
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamGetId(cudaStream_t hStream, unsigned long long* streamId) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3755
 *     return err
 * 
 * cdef cudaError_t _cudaInitDevice(int deviceOrdinal, unsigned int deviceFlags, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cudaPythonDevice *device
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaInitDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3789
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaStreamGetId(cudaStream_t hStream, unsigned long long* streamId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetId(cudaStream_t __pyx_v_hStream, unsigned PY_LONG_LONG *__pyx_v_streamId) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamGetId", __pyx_f[0], 3789, 1, __PYX_ERR(0, 3789, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3790
 * 
 * cdef cudaError_t _cudaStreamGetId(cudaStream_t hStream, unsigned long long* streamId) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3791
 * cdef cudaError_t _cudaStreamGetId(cudaStream_t hStream, unsigned long long* streamId) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3791, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3792
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetId(<cydriver.CUstream>hStream, streamId)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3793
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamGetId(<cydriver.CUstream>hStream, streamId)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3792
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetId(<cydriver.CUstream>hStream, streamId)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3794
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetId(<cydriver.CUstream>hStream, streamId)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetId(((CUstream)__pyx_v_hStream), __pyx_v_streamId); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3794, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3795
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetId(<cydriver.CUstream>hStream, streamId)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3796
 *     err = <cudaError_t>cydriver._cuStreamGetId(<cydriver.CUstream>hStream, streamId)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3796, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3795
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamGetId(<cydriver.CUstream>hStream, streamId)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3797
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphInstantiateWithParams(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams* instantiateParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3789
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaStreamGetId(cudaStream_t hStream, unsigned long long* streamId) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamGetId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3799
 *     return err
 * 
 * cdef cudaError_t _cudaGraphInstantiateWithParams(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams* instantiateParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphInstantiateWithParams(cudaGraphExec_t *__pyx_v_pGraphExec, cudaGraph_t __pyx_v_graph, cudaGraphInstantiateParams *__pyx_v_instantiateParams) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphInstantiateWithParams", __pyx_f[0], 3799, 1, __PYX_ERR(0, 3799, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3800
 * 
 * cdef cudaError_t _cudaGraphInstantiateWithParams(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams* instantiateParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3801
 * cdef cudaError_t _cudaGraphInstantiateWithParams(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams* instantiateParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3801, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3802
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithParams(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, <cydriver.CUDA_GRAPH_INSTANTIATE_PARAMS*>instantiateParams)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3803
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithParams(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, <cydriver.CUDA_GRAPH_INSTANTIATE_PARAMS*>instantiateParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3802
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithParams(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, <cydriver.CUDA_GRAPH_INSTANTIATE_PARAMS*>instantiateParams)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3804
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithParams(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, <cydriver.CUDA_GRAPH_INSTANTIATE_PARAMS*>instantiateParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphInstantiateWithParams(((CUgraphExec *)__pyx_v_pGraphExec), ((CUgraph)__pyx_v_graph), ((CUDA_GRAPH_INSTANTIATE_PARAMS *)__pyx_v_instantiateParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3804, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3805
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithParams(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, <cydriver.CUDA_GRAPH_INSTANTIATE_PARAMS*>instantiateParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3806
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithParams(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, <cydriver.CUDA_GRAPH_INSTANTIATE_PARAMS*>instantiateParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3806, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3805
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphInstantiateWithParams(<cydriver.CUgraphExec*>pGraphExec, <cydriver.CUgraph>graph, <cydriver.CUDA_GRAPH_INSTANTIATE_PARAMS*>instantiateParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3807
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3799
 *     return err
 * 
 * cdef cudaError_t _cudaGraphInstantiateWithParams(cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams* instantiateParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphInstantiateWithParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3809
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecGetFlags(cudaGraphExec_t __pyx_v_graphExec, unsigned PY_LONG_LONG *__pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecGetFlags", __pyx_f[0], 3809, 1, __PYX_ERR(0, 3809, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3810
 * 
 * cdef cudaError_t _cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3811
 * cdef cudaError_t _cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long* flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3811, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3812
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecGetFlags(<cydriver.CUgraphExec>graphExec, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3813
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExecGetFlags(<cydriver.CUgraphExec>graphExec, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3812
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecGetFlags(<cydriver.CUgraphExec>graphExec, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3814
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecGetFlags(<cydriver.CUgraphExec>graphExec, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecGetFlags(((CUgraphExec)__pyx_v_graphExec), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3814, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3815
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecGetFlags(<cydriver.CUgraphExec>graphExec, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3816
 *     err = <cudaError_t>cydriver._cuGraphExecGetFlags(<cydriver.CUgraphExec>graphExec, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3816, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3815
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecGetFlags(<cydriver.CUgraphExec>graphExec, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3817
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGetKernel(cudaKernel_t* kernelPtr, const void* entryFuncAddr) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3809
 *     return err
 * 
 * cdef cudaError_t _cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long* flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecGetFlags", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3819
 *     return err
 * 
 * cdef cudaError_t _cudaGetKernel(cudaKernel_t* kernelPtr, const void* entryFuncAddr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if kernelPtr == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetKernel(cudaKernel_t *__pyx_v_kernelPtr, void const *__pyx_v_entryFuncAddr) {
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetKernel", __pyx_f[0], 3819, 1, __PYX_ERR(0, 3819, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3820
 * 
 * cdef cudaError_t _cudaGetKernel(cudaKernel_t* kernelPtr, const void* entryFuncAddr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if kernelPtr == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_kernelPtr == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3821
 * cdef cudaError_t _cudaGetKernel(cudaKernel_t* kernelPtr, const void* entryFuncAddr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if kernelPtr == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 *     if entryFuncAddr == NULL:
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3821, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3822
 *     if kernelPtr == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *     if entryFuncAddr == NULL:
 *         _setLastError(cudaErrorInvalidDeviceFunction)
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3820
 * 
 * cdef cudaError_t _cudaGetKernel(cudaKernel_t* kernelPtr, const void* entryFuncAddr) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if kernelPtr == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3823
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 *     if entryFuncAddr == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidDeviceFunction)
 *         return cudaErrorInvalidDeviceFunction
 */
  __pyx_t_1 = (__pyx_v_entryFuncAddr == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3824
 *         return cudaErrorInvalidValue
 *     if entryFuncAddr == NULL:
 *         _setLastError(cudaErrorInvalidDeviceFunction)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidDeviceFunction
 * 
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidDeviceFunction); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3824, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3825
 *     if entryFuncAddr == NULL:
 *         _setLastError(cudaErrorInvalidDeviceFunction)
 *         return cudaErrorInvalidDeviceFunction             # <<<<<<<<<<<<<<
 * 
 *     kernelPtr[0] = <cudaKernel_t>entryFuncAddr;
 */
    __pyx_r = cudaErrorInvalidDeviceFunction;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3823
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 *     if entryFuncAddr == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidDeviceFunction)
 *         return cudaErrorInvalidDeviceFunction
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3827
 *         return cudaErrorInvalidDeviceFunction
 * 
 *     kernelPtr[0] = <cudaKernel_t>entryFuncAddr;             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
  (__pyx_v_kernelPtr[0]) = ((cudaKernel_t)__pyx_v_entryFuncAddr);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3828
 * 
 *     kernelPtr[0] = <cudaKernel_t>entryFuncAddr;
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3819
 *     return err
 * 
 * cdef cudaError_t _cudaGetKernel(cudaKernel_t* kernelPtr, const void* entryFuncAddr) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if kernelPtr == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetKernel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3830
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaGraphAddNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddNode(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, size_t __pyx_v_numDependencies, struct cudaGraphNodeParams *__pyx_v_nodeParams) {
  cudaError_t __pyx_v_err;
  CUgraphNodeParams __pyx_v_driverNodeParams;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddNode", __pyx_f[0], 3830, 1, __PYX_ERR(0, 3830, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3831
 * 
 * cdef cudaError_t _cudaGraphAddNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_nodeParams == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3832
 * cdef cudaError_t _cudaGraphAddNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3832, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3833
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3831
 * 
 * cdef cudaError_t _cudaGraphAddNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3834
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3835
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3835, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3836
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3837
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3837, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3838
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3836
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3840
 *         return err
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverGraphNodeParams(__pyx_v_nodeParams, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3840, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3841
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3842
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams)
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3842, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3843
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3841
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3844
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddNode(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, __pyx_v_numDependencies, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3844, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3845
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3846
 *     err = <cudaError_t>cydriver._cuGraphAddNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams)
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3846, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3847
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams)
 *     return cudaSuccess
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3845
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddNode(pGraphNode, graph, pDependencies, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3848
 *         _setLastError(err)
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams)             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
  __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toCudartGraphNodeOutParams((&__pyx_v_driverNodeParams), __pyx_v_nodeParams);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3849
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams)
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3830
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaGraphAddNode(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3851
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeSetParams(cudaGraphNode_t __pyx_v_node, struct cudaGraphNodeParams *__pyx_v_nodeParams) {
  cudaError_t __pyx_v_err;
  CUgraphNodeParams __pyx_v_driverNodeParams;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphNodeSetParams", __pyx_f[0], 3851, 1, __PYX_ERR(0, 3851, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3852
 * 
 * cdef cudaError_t _cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_nodeParams == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3853
 * cdef cudaError_t _cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3853, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3854
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3852
 * 
 * cdef cudaError_t _cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3855
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3856
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3856, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3857
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3858
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3858, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3859
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3857
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3861
 *         return err
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverGraphNodeParams(__pyx_v_nodeParams, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3861, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3862
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3863
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeSetParams(node, &driverNodeParams)
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3863, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3864
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphNodeSetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3862
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3865
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeSetParams(node, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeSetParams(__pyx_v_node, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3865, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3866
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeSetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3867
 *     err = <cudaError_t>cydriver._cuGraphNodeSetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams);
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3867, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3868
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams);
 *     return cudaSuccess
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3866
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeSetParams(node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3869
 *         _setLastError(err)
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams);             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
  __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toCudartGraphNodeOutParams((&__pyx_v_driverNodeParams), __pyx_v_nodeParams);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3870
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams);
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3851
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3872
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecNodeSetParams(cudaGraphExec_t __pyx_v_graphExec, cudaGraphNode_t __pyx_v_node, struct cudaGraphNodeParams *__pyx_v_nodeParams) {
  cudaError_t __pyx_v_err;
  CUgraphNodeParams __pyx_v_driverNodeParams;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphExecNodeSetParams", __pyx_f[0], 3872, 1, __PYX_ERR(0, 3872, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3873
 * 
 * cdef cudaError_t _cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_nodeParams == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3874
 * cdef cudaError_t _cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3874, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3875
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3873
 * 
 * cdef cudaError_t _cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3876
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3877
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3877, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3878
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3879
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3879, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3880
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3878
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3882
 *         return err
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverGraphNodeParams(__pyx_v_nodeParams, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3882, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3883
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3884
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecNodeSetParams(graphExec, node, &driverNodeParams)
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3884, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3885
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphExecNodeSetParams(graphExec, node, &driverNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3883
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3886
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecNodeSetParams(graphExec, node, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecNodeSetParams(__pyx_v_graphExec, __pyx_v_node, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3886, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3887
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecNodeSetParams(graphExec, node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3888
 *     err = <cudaError_t>cydriver._cuGraphExecNodeSetParams(graphExec, node, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams);
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3888, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3889
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams);
 *     return cudaSuccess
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3887
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphExecNodeSetParams(graphExec, node, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3890
 *         _setLastError(err)
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams);             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * 
 */
  __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toCudartGraphNodeOutParams((&__pyx_v_driverNodeParams), __pyx_v_nodeParams);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3891
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams);
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle* pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3872
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphExecNodeSetParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3893
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle* pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUcontext context
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle *__pyx_v_pHandle_out, cudaGraph_t __pyx_v_graph, unsigned int __pyx_v_defaultLaunchValue, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  CUcontext __pyx_v_context;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphConditionalHandleCreate", __pyx_f[0], 3893, 1, __PYX_ERR(0, 3893, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3894
 * 
 * cdef cudaError_t _cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle* pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUcontext context
 *     err = m_global.lazyInitContextState()
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3896
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUcontext context
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3896, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3897
 *     cdef cydriver.CUcontext context
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3898
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3897
 *     cdef cydriver.CUcontext context
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3899
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent((&__pyx_v_context)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3899, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3900
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3901
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphConditionalHandleCreate(<cydriver.CUgraphConditionalHandle *>pHandle_out, graph, context, defaultLaunchValue, flags)
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3901, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3902
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphConditionalHandleCreate(<cydriver.CUgraphConditionalHandle *>pHandle_out, graph, context, defaultLaunchValue, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3900
 *         return err
 *     err = <cudaError_t>cydriver._cuCtxGetCurrent(&context)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3903
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphConditionalHandleCreate(<cydriver.CUgraphConditionalHandle *>pHandle_out, graph, context, defaultLaunchValue, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphConditionalHandleCreate(((CUgraphConditionalHandle *)__pyx_v_pHandle_out), __pyx_v_graph, __pyx_v_context, __pyx_v_defaultLaunchValue, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3903, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3904
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphConditionalHandleCreate(<cydriver.CUgraphConditionalHandle *>pHandle_out, graph, context, defaultLaunchValue, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3905
 *     err = <cudaError_t>cydriver._cuGraphConditionalHandleCreate(<cydriver.CUgraphConditionalHandle *>pHandle_out, graph, context, defaultLaunchValue, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3905, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3904
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphConditionalHandleCreate(<cydriver.CUgraphConditionalHandle *>pHandle_out, graph, context, defaultLaunchValue, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3906
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, const cudaGraphEdgeData** edgeData_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3893
 *     return cudaSuccess
 * 
 * cdef cudaError_t _cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle* pHandle_out, cudaGraph_t graph, unsigned int defaultLaunchValue, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     cdef cydriver.CUcontext context
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphConditionalHandleCreate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3908
 *     return err
 * 
 * cdef cudaError_t _cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, const cudaGraphEdgeData** edgeData_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetCaptureInfo_v3(cudaStream_t __pyx_v_stream, enum cudaStreamCaptureStatus *__pyx_v_captureStatus_out, unsigned PY_LONG_LONG *__pyx_v_id_out, cudaGraph_t *__pyx_v_graph_out, cudaGraphNode_t const **__pyx_v_dependencies_out, cudaGraphEdgeData const **__pyx_v_edgeData_out, size_t *__pyx_v_numDependencies_out) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamGetCaptureInfo_v3", __pyx_f[0], 3908, 1, __PYX_ERR(0, 3908, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3909
 * 
 * cdef cudaError_t _cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, const cudaGraphEdgeData** edgeData_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3910
 * cdef cudaError_t _cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, const cudaGraphEdgeData** edgeData_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3910, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3911
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = streamGetCaptureInfoCommon_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3912
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = streamGetCaptureInfoCommon_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3911
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = streamGetCaptureInfoCommon_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3913
 *     if err != cudaSuccess:
 *         return err
 *     err = streamGetCaptureInfoCommon_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamGetCaptureInfoCommon_v3(__pyx_v_stream, __pyx_v_captureStatus_out, __pyx_v_id_out, __pyx_v_graph_out, __pyx_v_dependencies_out, __pyx_v_edgeData_out, __pyx_v_numDependencies_out); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3913, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3914
 *         return err
 *     err = streamGetCaptureInfoCommon_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3915
 *     err = streamGetCaptureInfoCommon_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3915, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3914
 *         return err
 *     err = streamGetCaptureInfoCommon_v3(stream, captureStatus_out, id_out, graph_out, dependencies_out, edgeData_out, numDependencies_out)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3916
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3908
 *     return err
 * 
 * cdef cudaError_t _cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus* captureStatus_out, unsigned long long* id_out, cudaGraph_t* graph_out, const cudaGraphNode_t** dependencies_out, const cudaGraphEdgeData** edgeData_out, size_t* numDependencies_out) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamGetCaptureInfo_v3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3918
 *     return err
 * 
 * cdef cudaError_t _cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamUpdateCaptureDependencies_v2(cudaStream_t __pyx_v_stream, cudaGraphNode_t *__pyx_v_dependencies, cudaGraphEdgeData const *__pyx_v_dependencyData, size_t __pyx_v_numDependencies, unsigned int __pyx_v_flags) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaStreamUpdateCaptureDependencies_v2", __pyx_f[0], 3918, 1, __PYX_ERR(0, 3918, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3919
 * 
 * cdef cudaError_t _cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3920
 * cdef cudaError_t _cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3920, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3921
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies_v2(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, flags)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3922
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies_v2(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, flags)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3921
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies_v2(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, flags)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3923
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies_v2(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, flags)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamUpdateCaptureDependencies_v2(((CUstream)__pyx_v_stream), ((CUgraphNode *)__pyx_v_dependencies), ((CUgraphEdgeData const *)__pyx_v_dependencyData), __pyx_v_numDependencies, __pyx_v_flags); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3923, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3924
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies_v2(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3925
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies_v2(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, flags)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3925, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3924
 *         return err
 *     err = <cudaError_t>cydriver._cuStreamUpdateCaptureDependencies_v2(<cydriver.CUstream>stream, <cydriver.CUgraphNode*>dependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, flags)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3926
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, cudaGraphEdgeData* edgeData, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3918
 *     return err
 * 
 * cdef cudaError_t _cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t* dependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, unsigned int flags) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaStreamUpdateCaptureDependencies_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3928
 *     return err
 * 
 * cdef cudaError_t _cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, cudaGraphEdgeData* edgeData, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphGetEdges_v2(cudaGraph_t __pyx_v_graph, cudaGraphNode_t *__pyx_v_from_, cudaGraphNode_t *__pyx_v_to, cudaGraphEdgeData *__pyx_v_edgeData, size_t *__pyx_v_numEdges) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphGetEdges_v2", __pyx_f[0], 3928, 1, __PYX_ERR(0, 3928, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3929
 * 
 * cdef cudaError_t _cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, cudaGraphEdgeData* edgeData, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3930
 * cdef cudaError_t _cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, cudaGraphEdgeData* edgeData, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3930, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3931
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetEdges_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <cydriver.CUgraphEdgeData*>edgeData, numEdges)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3932
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphGetEdges_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <cydriver.CUgraphEdgeData*>edgeData, numEdges)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3931
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetEdges_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <cydriver.CUgraphEdgeData*>edgeData, numEdges)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3933
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetEdges_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <cydriver.CUgraphEdgeData*>edgeData, numEdges)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetEdges_v2(((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_from_), ((CUgraphNode *)__pyx_v_to), ((CUgraphEdgeData *)__pyx_v_edgeData), __pyx_v_numEdges); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3933, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3934
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetEdges_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <cydriver.CUgraphEdgeData*>edgeData, numEdges)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3935
 *     err = <cudaError_t>cydriver._cuGraphGetEdges_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <cydriver.CUgraphEdgeData*>edgeData, numEdges)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3935, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3934
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphGetEdges_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <cydriver.CUgraphEdgeData*>edgeData, numEdges)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3936
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, cudaGraphEdgeData* edgeData, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3928
 *     return err
 * 
 * cdef cudaError_t _cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t* from_, cudaGraphNode_t* to, cudaGraphEdgeData* edgeData, size_t* numEdges) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphGetEdges_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3938
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, cudaGraphEdgeData* edgeData, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetDependencies_v2(cudaGraphNode_t __pyx_v_node, cudaGraphNode_t *__pyx_v_pDependencies, cudaGraphEdgeData *__pyx_v_edgeData, size_t *__pyx_v_pNumDependencies) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphNodeGetDependencies_v2", __pyx_f[0], 3938, 1, __PYX_ERR(0, 3938, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3939
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, cudaGraphEdgeData* edgeData, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3940
 * cdef cudaError_t _cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, cudaGraphEdgeData* edgeData, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3940, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3941
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, <cydriver.CUgraphEdgeData*>edgeData, pNumDependencies)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3942
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, <cydriver.CUgraphEdgeData*>edgeData, pNumDependencies)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3941
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, <cydriver.CUgraphEdgeData*>edgeData, pNumDependencies)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3943
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, <cydriver.CUgraphEdgeData*>edgeData, pNumDependencies)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependencies_v2(((CUgraphNode)__pyx_v_node), ((CUgraphNode *)__pyx_v_pDependencies), ((CUgraphEdgeData *)__pyx_v_edgeData), __pyx_v_pNumDependencies); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3943, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3944
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, <cydriver.CUgraphEdgeData*>edgeData, pNumDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3945
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, <cydriver.CUgraphEdgeData*>edgeData, pNumDependencies)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3945, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3944
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependencies_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependencies, <cydriver.CUgraphEdgeData*>edgeData, pNumDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3946
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, cudaGraphEdgeData* edgeData, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3938
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependencies, cudaGraphEdgeData* edgeData, size_t* pNumDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphNodeGetDependencies_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3948
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, cudaGraphEdgeData* edgeData, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t __pyx_v_node, cudaGraphNode_t *__pyx_v_pDependentNodes, cudaGraphEdgeData *__pyx_v_edgeData, size_t *__pyx_v_pNumDependentNodes) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphNodeGetDependentNodes_v2", __pyx_f[0], 3948, 1, __PYX_ERR(0, 3948, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3949
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, cudaGraphEdgeData* edgeData, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3950
 * cdef cudaError_t _cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, cudaGraphEdgeData* edgeData, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3950, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3951
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, <cydriver.CUgraphEdgeData*>edgeData, pNumDependentNodes)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3952
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, <cydriver.CUgraphEdgeData*>edgeData, pNumDependentNodes)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3951
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, <cydriver.CUgraphEdgeData*>edgeData, pNumDependentNodes)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3953
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, <cydriver.CUgraphEdgeData*>edgeData, pNumDependentNodes)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependentNodes_v2(((CUgraphNode)__pyx_v_node), ((CUgraphNode *)__pyx_v_pDependentNodes), ((CUgraphEdgeData *)__pyx_v_edgeData), __pyx_v_pNumDependentNodes); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3953, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3954
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, <cydriver.CUgraphEdgeData*>edgeData, pNumDependentNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3955
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, <cydriver.CUgraphEdgeData*>edgeData, pNumDependentNodes)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3955, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3954
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphNodeGetDependentNodes_v2(<cydriver.CUgraphNode>node, <cydriver.CUgraphNode*>pDependentNodes, <cydriver.CUgraphEdgeData*>edgeData, pNumDependentNodes)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3956
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3948
 *     return err
 * 
 * cdef cudaError_t _cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, cudaGraphEdgeData* edgeData, size_t* pNumDependentNodes) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphNodeGetDependentNodes_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3958
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddDependencies_v2(cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_from_, cudaGraphNode_t const *__pyx_v_to, cudaGraphEdgeData const *__pyx_v_edgeData, size_t __pyx_v_numDependencies) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddDependencies_v2", __pyx_f[0], 3958, 1, __PYX_ERR(0, 3958, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3959
 * 
 * cdef cudaError_t _cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3960
 * cdef cudaError_t _cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3960, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3961
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3962
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3961
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3963
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddDependencies_v2(((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_from_), ((CUgraphNode *)__pyx_v_to), ((CUgraphEdgeData const *)__pyx_v_edgeData), __pyx_v_numDependencies); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3963, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3964
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3965
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3965, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3964
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3966
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3958
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddDependencies_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3968
 *     return err
 * 
 * cdef cudaError_t _cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphRemoveDependencies_v2(cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_from_, cudaGraphNode_t const *__pyx_v_to, cudaGraphEdgeData const *__pyx_v_edgeData, size_t __pyx_v_numDependencies) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphRemoveDependencies_v2", __pyx_f[0], 3968, 1, __PYX_ERR(0, 3968, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3969
 * 
 * cdef cudaError_t _cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3970
 * cdef cudaError_t _cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         return err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3970, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3971
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3972
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3971
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3973
 *     if err != cudaSuccess:
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphRemoveDependencies_v2(((CUgraph)__pyx_v_graph), ((CUgraphNode *)__pyx_v_from_), ((CUgraphNode *)__pyx_v_to), ((CUgraphEdgeData const *)__pyx_v_edgeData), __pyx_v_numDependencies); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3973, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3974
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3975
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3975, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3974
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphRemoveDependencies_v2(<cydriver.CUgraph>graph, <cydriver.CUgraphNode*>from_, <cydriver.CUgraphNode*>to, <const cydriver.CUgraphEdgeData*>edgeData, numDependencies)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3976
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGraphAddNode_v2(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3968
 *     return err
 * 
 * cdef cudaError_t _cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t* from_, const cudaGraphNode_t* to, const cudaGraphEdgeData* edgeData, size_t numDependencies) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphRemoveDependencies_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3978
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddNode_v2(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddNode_v2(cudaGraphNode_t *__pyx_v_pGraphNode, cudaGraph_t __pyx_v_graph, cudaGraphNode_t const *__pyx_v_pDependencies, cudaGraphEdgeData const *__pyx_v_dependencyData, size_t __pyx_v_numDependencies, struct cudaGraphNodeParams *__pyx_v_nodeParams) {
  cudaError_t __pyx_v_err;
  CUgraphNodeParams __pyx_v_driverNodeParams;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  int __pyx_t_1;
  cudaError_t __pyx_t_2;
  CUresult __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGraphAddNode_v2", __pyx_f[0], 3978, 1, __PYX_ERR(0, 3978, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3979
 * 
 * cdef cudaError_t _cudaGraphAddNode_v2(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  __pyx_t_1 = (__pyx_v_nodeParams == NULL);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3980
 * cdef cudaError_t _cudaGraphAddNode_v2(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)             # <<<<<<<<<<<<<<
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(cudaErrorInvalidValue); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3980, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3981
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 */
    __pyx_r = cudaErrorInvalidValue;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3979
 * 
 * cdef cudaError_t _cudaGraphAddNode_v2(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     if nodeParams == NULL:             # <<<<<<<<<<<<<<
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3982
 *         _setLastError(cudaErrorInvalidValue)
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3983
 *         return cudaErrorInvalidValue
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global->__pyx_vtab)->lazyInitContextState(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3983, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3984
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3985
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3985, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3986
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3984
 *     cdef cudaError_t err = cudaSuccess
 *     err = m_global.lazyInitContextState()
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3988
 *         return err
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverGraphNodeParams(__pyx_v_nodeParams, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3988, __pyx_L1_error)
  __pyx_v_err = __pyx_t_2;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3989
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3990
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddNode_v2(pGraphNode, graph, pDependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, &driverNodeParams)
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3990, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3991
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGraphAddNode_v2(pGraphNode, graph, pDependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3989
 *     cdef cydriver.CUgraphNodeParams driverNodeParams
 *     err = toDriverGraphNodeParams(nodeParams, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3992
 *         _setLastError(err)
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddNode_v2(pGraphNode, graph, pDependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, &driverNodeParams)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_3 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddNode_v2(__pyx_v_pGraphNode, __pyx_v_graph, __pyx_v_pDependencies, ((CUgraphEdgeData const *)__pyx_v_dependencyData), __pyx_v_numDependencies, (&__pyx_v_driverNodeParams)); if (unlikely(__pyx_t_3 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3992, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_3);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3993
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddNode_v2(pGraphNode, graph, pDependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  __pyx_t_1 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_1) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3994
 *     err = <cudaError_t>cydriver._cuGraphAddNode_v2(pGraphNode, graph, pDependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams)
 */
    __pyx_t_2 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_2 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 3994, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3995
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *         return err             # <<<<<<<<<<<<<<
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams)
 *     return cudaSuccess
 */
    __pyx_r = __pyx_v_err;
    goto __pyx_L0;

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3993
 *         return err
 *     err = <cudaError_t>cydriver._cuGraphAddNode_v2(pGraphNode, graph, pDependencies, <const cydriver.CUgraphEdgeData*>dependencyData, numDependencies, &driverNodeParams)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *         return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3996
 *         _setLastError(err)
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams)             # <<<<<<<<<<<<<<
 *     return cudaSuccess
 * cimport cuda.bindings._lib.dlfcn as dlfcn
 */
  __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toCudartGraphNodeOutParams((&__pyx_v_driverNodeParams), __pyx_v_nodeParams);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3997
 *         return err
 *     toCudartGraphNodeOutParams(&driverNodeParams, nodeParams)
 *     return cudaSuccess             # <<<<<<<<<<<<<<
 * cimport cuda.bindings._lib.dlfcn as dlfcn
 * 
 */
  __pyx_r = cudaSuccess;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":3978
 *     return err
 * 
 * cdef cudaError_t _cudaGraphAddNode_v2(cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, const cudaGraphEdgeData* dependencyData, size_t numDependencies, cudaGraphNodeParams* nodeParams) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     if nodeParams == NULL:
 *         _setLastError(cudaErrorInvalidValue)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGraphAddNode_v2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4000
 * cimport cuda.bindings._lib.dlfcn as dlfcn
 * 
 * cdef cudaError_t _getLocalRuntimeVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     # Load
 *     handle = dlfcn.dlopen('libcudart.so.12', dlfcn.RTLD_NOW)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__getLocalRuntimeVersion(int *__pyx_v_runtimeVersion) {
  void *__pyx_v_handle;
  void *__pyx_v___cudaRuntimeGetVersion;
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_RefNannySetupContext("_getLocalRuntimeVersion", 1);
  __Pyx_TraceCall("_getLocalRuntimeVersion", __pyx_f[0], 4000, 1, __PYX_ERR(0, 4000, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4002
 * cdef cudaError_t _getLocalRuntimeVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     # Load
 *     handle = dlfcn.dlopen('libcudart.so.12', dlfcn.RTLD_NOW)             # <<<<<<<<<<<<<<
 *     if handle == NULL:
 *         with gil:
 */
  __pyx_v_handle = dlopen(((char const *)"libcudart.so.12"), RTLD_NOW);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4003
 *     # Load
 *     handle = dlfcn.dlopen('libcudart.so.12', dlfcn.RTLD_NOW)
 *     if handle == NULL:             # <<<<<<<<<<<<<<
 *         with gil:
 *             raise RuntimeError(f'Failed to dlopen libcudart.so.12')
 */
  __pyx_t_1 = (__pyx_v_handle == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4004
 *     handle = dlfcn.dlopen('libcudart.so.12', dlfcn.RTLD_NOW)
 *     if handle == NULL:
 *         with gil:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(f'Failed to dlopen libcudart.so.12')
 * 
 */
    {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        /*try:*/ {

          /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4005
 *     if handle == NULL:
 *         with gil:
 *             raise RuntimeError(f'Failed to dlopen libcudart.so.12')             # <<<<<<<<<<<<<<
 * 
 *     __cudaRuntimeGetVersion = dlfcn.dlsym(handle, 'cudaRuntimeGetVersion')
 */
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4005, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __PYX_ERR(0, 4005, __pyx_L5_error)
        }

        /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4004
 *     handle = dlfcn.dlopen('libcudart.so.12', dlfcn.RTLD_NOW)
 *     if handle == NULL:
 *         with gil:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(f'Failed to dlopen libcudart.so.12')
 * 
 */
        /*finally:*/ {
          __pyx_L5_error: {
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            goto __pyx_L1_error;
          }
        }
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4003
 *     # Load
 *     handle = dlfcn.dlopen('libcudart.so.12', dlfcn.RTLD_NOW)
 *     if handle == NULL:             # <<<<<<<<<<<<<<
 *         with gil:
 *             raise RuntimeError(f'Failed to dlopen libcudart.so.12')
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4007
 *             raise RuntimeError(f'Failed to dlopen libcudart.so.12')
 * 
 *     __cudaRuntimeGetVersion = dlfcn.dlsym(handle, 'cudaRuntimeGetVersion')             # <<<<<<<<<<<<<<
 * 
 *     if __cudaRuntimeGetVersion == NULL:
 */
  __pyx_v___cudaRuntimeGetVersion = dlsym(__pyx_v_handle, ((char const *)"cudaRuntimeGetVersion"));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4009
 *     __cudaRuntimeGetVersion = dlfcn.dlsym(handle, 'cudaRuntimeGetVersion')
 * 
 *     if __cudaRuntimeGetVersion == NULL:             # <<<<<<<<<<<<<<
 *         with gil:
 *             raise RuntimeError(f'Function "cudaRuntimeGetVersion" not found in libcudart.so.12')
 */
  __pyx_t_1 = (__pyx_v___cudaRuntimeGetVersion == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4010
 * 
 *     if __cudaRuntimeGetVersion == NULL:
 *         with gil:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(f'Function "cudaRuntimeGetVersion" not found in libcudart.so.12')
 * 
 */
    {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        /*try:*/ {

          /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4011
 *     if __cudaRuntimeGetVersion == NULL:
 *         with gil:
 *             raise RuntimeError(f'Function "cudaRuntimeGetVersion" not found in libcudart.so.12')             # <<<<<<<<<<<<<<
 * 
 *     # Call
 */
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4011, __pyx_L9_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_Raise(__pyx_t_2, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __PYX_ERR(0, 4011, __pyx_L9_error)
        }

        /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4010
 * 
 *     if __cudaRuntimeGetVersion == NULL:
 *         with gil:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(f'Function "cudaRuntimeGetVersion" not found in libcudart.so.12')
 * 
 */
        /*finally:*/ {
          __pyx_L9_error: {
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            goto __pyx_L1_error;
          }
        }
    }

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4009
 *     __cudaRuntimeGetVersion = dlfcn.dlsym(handle, 'cudaRuntimeGetVersion')
 * 
 *     if __cudaRuntimeGetVersion == NULL:             # <<<<<<<<<<<<<<
 *         with gil:
 *             raise RuntimeError(f'Function "cudaRuntimeGetVersion" not found in libcudart.so.12')
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4014
 * 
 *     # Call
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = (<cudaError_t (*)(int*) except ?cudaErrorCallRequiresNewerDriver nogil> __cudaRuntimeGetVersion)(runtimeVersion)
 * 
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4015
 *     # Call
 *     cdef cudaError_t err = cudaSuccess
 *     err = (<cudaError_t (*)(int*) except ?cudaErrorCallRequiresNewerDriver nogil> __cudaRuntimeGetVersion)(runtimeVersion)             # <<<<<<<<<<<<<<
 * 
 *     # Unload
 */
  __pyx_t_3 = ((cudaError_t (*)(int *))__pyx_v___cudaRuntimeGetVersion)(__pyx_v_runtimeVersion); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 4015, __pyx_L1_error)
  __pyx_v_err = __pyx_t_3;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4018
 * 
 *     # Unload
 *     dlfcn.dlclose(handle)             # <<<<<<<<<<<<<<
 * 
 *     # Return
 */
  (void)(dlclose(__pyx_v_handle));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4021
 * 
 *     # Return
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceRegisterAsyncNotification(int device, cudaAsyncCallback callbackFunc, void* userData, cudaAsyncCallbackHandle_t* callback) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4000
 * cimport cuda.bindings._lib.dlfcn as dlfcn
 * 
 * cdef cudaError_t _getLocalRuntimeVersion(int* runtimeVersion) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     # Load
 *     handle = dlfcn.dlopen('libcudart.so.12', dlfcn.RTLD_NOW)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._getLocalRuntimeVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  __Pyx_RefNannyFinishContextNogil()
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4023
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceRegisterAsyncNotification(int device, cudaAsyncCallback callbackFunc, void* userData, cudaAsyncCallbackHandle_t* callback) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = DeviceRegisterAsyncNotificationCommon(device, callbackFunc, userData, callback)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceRegisterAsyncNotification(int __pyx_v_device, cudaAsyncCallback __pyx_v_callbackFunc, void *__pyx_v_userData, cudaAsyncCallbackHandle_t *__pyx_v_callback) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceRegisterAsyncNotification", __pyx_f[0], 4023, 1, __PYX_ERR(0, 4023, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4024
 * 
 * cdef cudaError_t _cudaDeviceRegisterAsyncNotification(int device, cudaAsyncCallback callbackFunc, void* userData, cudaAsyncCallbackHandle_t* callback) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = DeviceRegisterAsyncNotificationCommon(device, callbackFunc, userData, callback)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4025
 * cdef cudaError_t _cudaDeviceRegisterAsyncNotification(int device, cudaAsyncCallback callbackFunc, void* userData, cudaAsyncCallbackHandle_t* callback) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = DeviceRegisterAsyncNotificationCommon(device, callbackFunc, userData, callback)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_DeviceRegisterAsyncNotificationCommon(__pyx_v_device, __pyx_v_callbackFunc, __pyx_v_userData, __pyx_v_callback); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 4025, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4026
 *     cdef cudaError_t err = cudaSuccess
 *     err = DeviceRegisterAsyncNotificationCommon(device, callbackFunc, userData, callback)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4027
 *     err = DeviceRegisterAsyncNotificationCommon(device, callbackFunc, userData, callback)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 4027, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4026
 *     cdef cudaError_t err = cudaSuccess
 *     err = DeviceRegisterAsyncNotificationCommon(device, callbackFunc, userData, callback)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4028
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaDeviceUnregisterAsyncNotification(int device, cudaAsyncCallbackHandle_t callback) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4023
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceRegisterAsyncNotification(int device, cudaAsyncCallback callbackFunc, void* userData, cudaAsyncCallbackHandle_t* callback) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = DeviceRegisterAsyncNotificationCommon(device, callbackFunc, userData, callback)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceRegisterAsyncNotification", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4030
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceUnregisterAsyncNotification(int device, cudaAsyncCallbackHandle_t callback) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = DeviceUnregisterAsyncNotificationCommon(device, callback)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceUnregisterAsyncNotification(int __pyx_v_device, cudaAsyncCallbackHandle_t __pyx_v_callback) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  cudaError_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaDeviceUnregisterAsyncNotification", __pyx_f[0], 4030, 1, __PYX_ERR(0, 4030, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4031
 * 
 * cdef cudaError_t _cudaDeviceUnregisterAsyncNotification(int device, cudaAsyncCallbackHandle_t callback) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = DeviceUnregisterAsyncNotificationCommon(device, callback)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4032
 * cdef cudaError_t _cudaDeviceUnregisterAsyncNotification(int device, cudaAsyncCallbackHandle_t callback) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = DeviceUnregisterAsyncNotificationCommon(device, callback)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_DeviceUnregisterAsyncNotificationCommon(__pyx_v_device, __pyx_v_callback); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 4032, __pyx_L1_error)
  __pyx_v_err = __pyx_t_1;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4033
 *     cdef cudaError_t err = cudaSuccess
 *     err = DeviceUnregisterAsyncNotificationCommon(device, callback)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4034
 *     err = DeviceUnregisterAsyncNotificationCommon(device, callback)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 * 
 */
    __pyx_t_1 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_1 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 4034, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4033
 *     cdef cudaError_t err = cudaSuccess
 *     err = DeviceUnregisterAsyncNotificationCommon(device, callback)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4035
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaGetDriverEntryPointByVersion(const char* symbol, void** funcPtr, unsigned int cudaVersion, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4030
 *     return err
 * 
 * cdef cudaError_t _cudaDeviceUnregisterAsyncNotification(int device, cudaAsyncCallbackHandle_t callback) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = DeviceUnregisterAsyncNotificationCommon(device, callback)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaDeviceUnregisterAsyncNotification", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

/* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4037
 *     return err
 * 
 * cdef cudaError_t _cudaGetDriverEntryPointByVersion(const char* symbol, void** funcPtr, unsigned int cudaVersion, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, cudaVersion, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 */

static cudaError_t __pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDriverEntryPointByVersion(char const *__pyx_v_symbol, void **__pyx_v_funcPtr, unsigned int __pyx_v_cudaVersion, unsigned PY_LONG_LONG __pyx_v_flags, enum cudaDriverEntryPointQueryResult *__pyx_v_driverStatus) {
  cudaError_t __pyx_v_err;
  cudaError_t __pyx_r;
  __Pyx_TraceDeclarations
  CUresult __pyx_t_1;
  int __pyx_t_2;
  cudaError_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif
  __Pyx_TraceCall("_cudaGetDriverEntryPointByVersion", __pyx_f[0], 4037, 1, __PYX_ERR(0, 4037, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4038
 * 
 * cdef cudaError_t _cudaGetDriverEntryPointByVersion(const char* symbol, void** funcPtr, unsigned int cudaVersion, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess             # <<<<<<<<<<<<<<
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, cudaVersion, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 *     if err != cudaSuccess:
 */
  __pyx_v_err = cudaSuccess;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4039
 * cdef cudaError_t _cudaGetDriverEntryPointByVersion(const char* symbol, void** funcPtr, unsigned int cudaVersion, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, cudaVersion, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)             # <<<<<<<<<<<<<<
 *     if err != cudaSuccess:
 *         _setLastError(err)
 */
  __pyx_t_1 = __pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGetProcAddress_v2(__pyx_v_symbol, __pyx_v_funcPtr, __pyx_v_cudaVersion, __pyx_v_flags, ((CUdriverProcAddressQueryResult *)__pyx_v_driverStatus)); if (unlikely(__pyx_t_1 == ((CUresult)CUDA_ERROR_NOT_FOUND) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 4039, __pyx_L1_error)
  __pyx_v_err = ((cudaError_t)__pyx_t_1);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4040
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, cudaVersion, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  __pyx_t_2 = (__pyx_v_err != cudaSuccess);
  if (__pyx_t_2) {

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4041
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, cudaVersion, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 *     if err != cudaSuccess:
 *         _setLastError(err)             # <<<<<<<<<<<<<<
 *     return err
 */
    __pyx_t_3 = __pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError(__pyx_v_err); if (unlikely(__pyx_t_3 == ((cudaError_t)cudaErrorCallRequiresNewerDriver) && __Pyx_ErrOccurredWithGIL())) __PYX_ERR(0, 4041, __pyx_L1_error)

    /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4040
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, cudaVersion, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 *     if err != cudaSuccess:             # <<<<<<<<<<<<<<
 *         _setLastError(err)
 *     return err
 */
  }

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4042
 *     if err != cudaSuccess:
 *         _setLastError(err)
 *     return err             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_err;
  goto __pyx_L0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4037
 *     return err
 * 
 * cdef cudaError_t _cudaGetDriverEntryPointByVersion(const char* symbol, void** funcPtr, unsigned int cudaVersion, unsigned long long flags, cudaDriverEntryPointQueryResult* driverStatus) except ?cudaErrorCallRequiresNewerDriver nogil:             # <<<<<<<<<<<<<<
 *     cdef cudaError_t err = cudaSuccess
 *     err = <cudaError_t>cydriver._cuGetProcAddress_v2(symbol, funcPtr, cudaVersion, flags, <cydriver.CUdriverProcAddressQueryResult*>driverStatus)
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("cuda.bindings._lib.cyruntime.cyruntime._cudaGetDriverEntryPointByVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = cudaErrorCallRequiresNewerDriver;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 1);
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_Failed_to_dlopen_libcudart_so_12, __pyx_k_Failed_to_dlopen_libcudart_so_12, sizeof(__pyx_k_Failed_to_dlopen_libcudart_so_12), 0, 1, 0, 0},
    {&__pyx_kp_u_Function_cudaRuntimeGetVersion_n, __pyx_k_Function_cudaRuntimeGetVersion_n, sizeof(__pyx_k_Function_cudaRuntimeGetVersion_n), 0, 1, 0, 0},
    {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
    {&__pyx_n_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 1124, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 4005, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4005
 *     if handle == NULL:
 *         with gil:
 *             raise RuntimeError(f'Failed to dlopen libcudart.so.12')             # <<<<<<<<<<<<<<
 * 
 *     __cudaRuntimeGetVersion = dlfcn.dlsym(handle, 'cudaRuntimeGetVersion')
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_Failed_to_dlopen_libcudart_so_12); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 4005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":4011
 *     if __cudaRuntimeGetVersion == NULL:
 *         with gil:
 *             raise RuntimeError(f'Function "cudaRuntimeGetVersion" not found in libcudart.so.12')             # <<<<<<<<<<<<<<
 * 
 *     # Call
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_Function_cudaRuntimeGetVersion_n); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  return 0;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global = ((struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("_cudaMemcpy", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy, "cudaError_t (void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamCreate", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamCreate, "cudaError_t (cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEventCreate", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventCreate, "cudaError_t (cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEventQuery", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventQuery, "cudaError_t (cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaCreateChannelDesc", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaCreateChannelDesc, "struct cudaChannelFormatDesc (int, int, int, int, enum cudaChannelFormatKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDriverGetVersion", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDriverGetVersion, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaRuntimeGetVersion", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaRuntimeGetVersion, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetTexture1DLinearMaxWidth", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetTexture1DLinearMaxWidth, "cudaError_t (size_t *, struct cudaChannelFormatDesc const *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMallocHost", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocHost, "cudaError_t (void **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMallocPitch", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocPitch, "cudaError_t (void **, size_t *, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMallocMipmappedArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocMipmappedArray, "cudaError_t (cudaMipmappedArray_t *, struct cudaChannelFormatDesc const *, struct cudaExtent, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpy2D", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2D, "cudaError_t (void *, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpy2DAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DAsync, "cudaError_t (void *, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpyAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyAsync, "cudaError_t (void *, void const *, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddMemcpyNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddMemcpyNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddMemcpyNode1D", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddMemcpyNode1D, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphMemcpyNodeSetParams1D", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemcpyNodeSetParams1D, "cudaError_t (cudaGraphNode_t, void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecMemcpyNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecMemcpyNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecMemcpyNodeSetParams1D", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecMemcpyNodeSetParams1D, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetDriverEntryPoint", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDriverEntryPoint, "cudaError_t (char const *, void **, unsigned PY_LONG_LONG, enum cudaDriverEntryPointQueryResult *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddMemsetNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddMemsetNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecMemsetNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecMemsetNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphMemcpyNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemcpyNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphMemcpyNodeGetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemcpyNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemcpy3DParms *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaFuncGetAttributes", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFuncGetAttributes, "cudaError_t (struct cudaFuncAttributes *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMallocArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocArray, "cudaError_t (cudaArray_t *, struct cudaChannelFormatDesc const *, size_t, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMalloc3D", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMalloc3D, "cudaError_t (struct cudaPitchedPtr *, struct cudaExtent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMalloc3DArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMalloc3DArray, "cudaError_t (cudaArray_t *, struct cudaChannelFormatDesc const *, struct cudaExtent, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetErrorString", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetErrorString, "char const *(cudaError_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamAddCallback", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamAddCallback, "cudaError_t (cudaStream_t, cudaStreamCallback_t, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamGetCaptureInfo_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetCaptureInfo_v2, "cudaError_t (cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaImportExternalSemaphore", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaImportExternalSemaphore, "cudaError_t (cudaExternalSemaphore_t *, struct cudaExternalSemaphoreHandleDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaSignalExternalSemaphoresAsync_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaSignalExternalSemaphoresAsync_v2, "cudaError_t (cudaExternalSemaphore_t const *, struct cudaExternalSemaphoreSignalParams const *, unsigned int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaWaitExternalSemaphoresAsync_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaWaitExternalSemaphoresAsync_v2, "cudaError_t (cudaExternalSemaphore_t const *, struct cudaExternalSemaphoreWaitParams const *, unsigned int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaArrayGetInfo", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaArrayGetInfo, "cudaError_t (struct cudaChannelFormatDesc *, struct cudaExtent *, unsigned int *, cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpy2DToArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DToArray, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpy2DFromArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DFromArray, "cudaError_t (void *, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpy2DArrayToArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DArrayToArray, "cudaError_t (cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpy2DToArrayAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DToArrayAsync, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpy2DFromArrayAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy2DFromArrayAsync, "cudaError_t (void *, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemset3D", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemset3D, "cudaError_t (struct cudaPitchedPtr, int, struct cudaExtent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemset3DAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemset3DAsync, "cudaError_t (struct cudaPitchedPtr, int, struct cudaExtent, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpyToArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyToArray, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpyFromArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyFromArray, "cudaError_t (void *, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpyToArrayAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyToArrayAsync, "cudaError_t (cudaArray_t, size_t, size_t, void const *, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpyFromArrayAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyFromArrayAsync, "cudaError_t (void *, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaPointerGetAttributes", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaPointerGetAttributes, "cudaError_t (struct cudaPointerAttributes *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetDeviceFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDeviceFlags, "cudaError_t (unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpy3D", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy3D, "cudaError_t (struct cudaMemcpy3DParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpy3DAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy3DAsync, "cudaError_t (struct cudaMemcpy3DParms const *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPoolSetAccess", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolSetAccess, "cudaError_t (cudaMemPool_t, struct cudaMemAccessDesc const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceReset", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceReset, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetLastError", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetLastError, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaPeekAtLastError", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaPeekAtLastError, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetDevice", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDevice, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaSetDevice", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaSetDevice, "cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetDeviceProperties_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDeviceProperties_v2, "cudaError_t (struct cudaDeviceProp *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaChooseDevice", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaChooseDevice, "cudaError_t (int *, struct cudaDeviceProp const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpyArrayToArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyArrayToArray, "cudaError_t (cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetChannelDesc", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetChannelDesc, "cudaError_t (struct cudaChannelFormatDesc *, cudaArray_const_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaCreateTextureObject", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaCreateTextureObject, "cudaError_t (cudaTextureObject_t *, struct cudaResourceDesc const *, struct cudaTextureDesc const *, struct cudaResourceViewDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetTextureObjectTextureDesc", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetTextureObjectTextureDesc, "cudaError_t (struct cudaTextureDesc *, cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetTextureObjectResourceViewDesc", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetTextureObjectResourceViewDesc, "cudaError_t (struct cudaResourceViewDesc *, cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetExportTable", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetExportTable, "cudaError_t (void const **, cudaUUID_t const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpy3DPeer", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy3DPeer, "cudaError_t (struct cudaMemcpy3DPeerParms const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpy3DPeerAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpy3DPeerAsync, "cudaError_t (struct cudaMemcpy3DPeerParms const *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_make_cudaPitchedPtr", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__make_cudaPitchedPtr, "struct cudaPitchedPtr (void *, size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_make_cudaPos", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__make_cudaPos, "struct cudaPos (size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_make_cudaExtent", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__make_cudaExtent, "struct cudaExtent (size_t, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaSetDeviceFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaSetDeviceFlags, "cudaError_t (unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddMemAllocNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddMemAllocNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaMemAllocNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphMemAllocNodeGetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemAllocNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemAllocNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphMemFreeNodeGetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemFreeNodeGetParams, "cudaError_t (cudaGraphNode_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemAdvise", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemAdvise, "cudaError_t (void const *, size_t, enum cudaMemoryAdvise, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemRangeGetAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemRangeGetAttribute, "cudaError_t (void *, size_t, enum cudaMemRangeAttribute, void const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemRangeGetAttributes", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemRangeGetAttributes, "cudaError_t (void **, size_t *, enum cudaMemRangeAttribute *, size_t, void const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetDeviceCount", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDeviceCount, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetAttribute, "cudaError_t (int *, enum cudaDeviceAttr, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceSetSharedMemConfig", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSetSharedMemConfig, "cudaError_t (enum cudaSharedMemConfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetByPCIBusId", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetByPCIBusId, "cudaError_t (int *, char const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetPCIBusId", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetPCIBusId, "cudaError_t (char *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetP2PAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetP2PAttribute, "cudaError_t (int *, enum cudaDeviceP2PAttr, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaArrayGetSparseProperties", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaArrayGetSparseProperties, "cudaError_t (struct cudaArraySparseProperties *, cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMipmappedArrayGetSparseProperties", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMipmappedArrayGetSparseProperties, "cudaError_t (struct cudaArraySparseProperties *, cudaMipmappedArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceCanAccessPeer", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceCanAccessPeer, "cudaError_t (int *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpyPeer", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyPeer, "cudaError_t (void *, int, void const *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemcpyPeerAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemcpyPeerAsync, "cudaError_t (void *, int, void const *, int, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceEnablePeerAccess", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceEnablePeerAccess, "cudaError_t (int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceDisablePeerAccess", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceDisablePeerAccess, "cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaExternalMemoryGetMappedMipmappedArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaExternalMemoryGetMappedMipmappedArray, "cudaError_t (cudaMipmappedArray_t *, cudaExternalMemory_t, struct cudaExternalMemoryMipmappedArrayDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetSurfaceObjectResourceDesc", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetSurfaceObjectResourceDesc, "cudaError_t (struct cudaResourceDesc *, cudaSurfaceObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphKernelNodeGetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphKernelNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaKernelNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaExternalMemoryGetMappedBuffer", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaExternalMemoryGetMappedBuffer, "cudaError_t (void **, cudaExternalMemory_t, struct cudaExternalMemoryBufferDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaImportExternalMemory", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaImportExternalMemory, "cudaError_t (cudaExternalMemory_t *, struct cudaExternalMemoryHandleDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaCreateSurfaceObject", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaCreateSurfaceObject, "cudaError_t (cudaSurfaceObject_t *, struct cudaResourceDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetTextureObjectResourceDesc", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetTextureObjectResourceDesc, "cudaError_t (struct cudaResourceDesc *, cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsEGLRegisterImage", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsEGLRegisterImage, "cudaError_t (cudaGraphicsResource_t *, __pyx_t_4cuda_8bindings_9cyruntime_EGLImageKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEGLStreamProducerPresentFrame", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamProducerPresentFrame, "cudaError_t (__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *, __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame, cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEGLStreamProducerReturnFrame", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamProducerReturnFrame, "cudaError_t (__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *, __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame *, cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsResourceGetMappedEglFrame", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsResourceGetMappedEglFrame, "cudaError_t (__pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame *, cudaGraphicsResource_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaVDPAUSetVDPAUDevice", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaVDPAUSetVDPAUDevice, "cudaError_t (int, __pyx_t_4cuda_8bindings_9cyruntime_VdpDevice, __pyx_t_4cuda_8bindings_9cyruntime_VdpGetProcAddress *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaArrayGetMemoryRequirements", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaArrayGetMemoryRequirements, "cudaError_t (struct cudaArrayMemoryRequirements *, cudaArray_t, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMipmappedArrayGetMemoryRequirements", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMipmappedArrayGetMemoryRequirements, "cudaError_t (struct cudaArrayMemoryRequirements *, cudaMipmappedArray_t, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamGetAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetAttribute, "cudaError_t (cudaStream_t, __pyx_t_4cuda_8bindings_9cyruntime_cudaStreamAttrID, __pyx_t_4cuda_8bindings_9cyruntime_cudaStreamAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamSetAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamSetAttribute, "cudaError_t (cudaStream_t, __pyx_t_4cuda_8bindings_9cyruntime_cudaStreamAttrID, __pyx_t_4cuda_8bindings_9cyruntime_cudaStreamAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphKernelNodeGetAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphKernelNodeGetAttribute, "cudaError_t (cudaGraphNode_t, __pyx_t_4cuda_8bindings_9cyruntime_cudaKernelNodeAttrID, __pyx_t_4cuda_8bindings_9cyruntime_cudaKernelNodeAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphKernelNodeSetAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphKernelNodeSetAttribute, "cudaError_t (cudaGraphNode_t, __pyx_t_4cuda_8bindings_9cyruntime_cudaKernelNodeAttrID, __pyx_t_4cuda_8bindings_9cyruntime_cudaKernelNodeAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaVDPAUGetDevice", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaVDPAUGetDevice, "cudaError_t (int *, __pyx_t_4cuda_8bindings_9cyruntime_VdpDevice, __pyx_t_4cuda_8bindings_9cyruntime_VdpGetProcAddress *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsVDPAURegisterVideoSurface", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsVDPAURegisterVideoSurface, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_8bindings_9cyruntime_VdpVideoSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsVDPAURegisterOutputSurface", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsVDPAURegisterOutputSurface, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_8bindings_9cyruntime_VdpOutputSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGLGetDevices", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGLGetDevices, "cudaError_t (unsigned int *, int *, unsigned int, enum __pyx_t_4cuda_8bindings_9cyruntime_cudaGLDeviceList)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsGLRegisterImage", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsGLRegisterImage, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_8bindings_9cyruntime_GLuint, __pyx_t_4cuda_8bindings_9cyruntime_GLenum, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsGLRegisterBuffer", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsGLRegisterBuffer, "cudaError_t (struct cudaGraphicsResource **, __pyx_t_4cuda_8bindings_9cyruntime_GLuint, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceSynchronize", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSynchronize, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceSetLimit", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSetLimit, "cudaError_t (enum cudaLimit, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetLimit", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetLimit, "cudaError_t (size_t *, enum cudaLimit)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetCacheConfig", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetCacheConfig, "cudaError_t (enum cudaFuncCache *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetStreamPriorityRange", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetStreamPriorityRange, "cudaError_t (int *, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceSetCacheConfig", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSetCacheConfig, "cudaError_t (enum cudaFuncCache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetSharedMemConfig", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetSharedMemConfig, "cudaError_t (enum cudaSharedMemConfig *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaIpcGetEventHandle", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaIpcGetEventHandle, "cudaError_t (cudaIpcEventHandle_t *, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaIpcOpenEventHandle", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaIpcOpenEventHandle, "cudaError_t (cudaEvent_t *, cudaIpcEventHandle_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaIpcGetMemHandle", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaIpcGetMemHandle, "cudaError_t (cudaIpcMemHandle_t *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaIpcOpenMemHandle", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaIpcOpenMemHandle, "cudaError_t (void **, cudaIpcMemHandle_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaIpcCloseMemHandle", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaIpcCloseMemHandle, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceFlushGPUDirectRDMAWrites", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceFlushGPUDirectRDMAWrites, "cudaError_t (enum cudaFlushGPUDirectRDMAWritesTarget, enum cudaFlushGPUDirectRDMAWritesScope)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetDefaultMemPool", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetDefaultMemPool, "cudaError_t (cudaMemPool_t *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceSetMemPool", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSetMemPool, "cudaError_t (int, cudaMemPool_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetMemPool", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetMemPool, "cudaError_t (cudaMemPool_t *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetNvSciSyncAttributes", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetNvSciSyncAttributes, "cudaError_t (void *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamCreateWithFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamCreateWithFlags, "cudaError_t (cudaStream_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamCreateWithPriority", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamCreateWithPriority, "cudaError_t (cudaStream_t *, unsigned int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamGetPriority", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetPriority, "cudaError_t (cudaStream_t, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamGetFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetFlags, "cudaError_t (cudaStream_t, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaCtxResetPersistingL2Cache", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaCtxResetPersistingL2Cache, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamCopyAttributes", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamCopyAttributes, "cudaError_t (cudaStream_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamDestroy", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamDestroy, "cudaError_t (cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamWaitEvent", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamWaitEvent, "cudaError_t (cudaStream_t, cudaEvent_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamSynchronize", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamSynchronize, "cudaError_t (cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamQuery", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamQuery, "cudaError_t (cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamAttachMemAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamAttachMemAsync, "cudaError_t (cudaStream_t, void *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamBeginCapture", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamBeginCapture, "cudaError_t (cudaStream_t, enum cudaStreamCaptureMode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamBeginCaptureToGraph", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamBeginCaptureToGraph, "cudaError_t (cudaStream_t, cudaGraph_t, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t, enum cudaStreamCaptureMode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaThreadExchangeStreamCaptureMode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaThreadExchangeStreamCaptureMode, "cudaError_t (enum cudaStreamCaptureMode *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamEndCapture", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamEndCapture, "cudaError_t (cudaStream_t, cudaGraph_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamIsCapturing", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamIsCapturing, "cudaError_t (cudaStream_t, enum cudaStreamCaptureStatus *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamUpdateCaptureDependencies", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamUpdateCaptureDependencies, "cudaError_t (cudaStream_t, cudaGraphNode_t *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEventCreateWithFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventCreateWithFlags, "cudaError_t (cudaEvent_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEventRecord", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventRecord, "cudaError_t (cudaEvent_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEventRecordWithFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventRecordWithFlags, "cudaError_t (cudaEvent_t, cudaStream_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEventSynchronize", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventSynchronize, "cudaError_t (cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEventDestroy", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventDestroy, "cudaError_t (cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEventElapsedTime", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventElapsedTime, "cudaError_t (float *, cudaEvent_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDestroyExternalMemory", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDestroyExternalMemory, "cudaError_t (cudaExternalMemory_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDestroyExternalSemaphore", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDestroyExternalSemaphore, "cudaError_t (cudaExternalSemaphore_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaFuncSetCacheConfig", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFuncSetCacheConfig, "cudaError_t (void const *, enum cudaFuncCache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaFuncSetSharedMemConfig", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFuncSetSharedMemConfig, "cudaError_t (void const *, enum cudaSharedMemConfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaFuncSetAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFuncSetAttribute, "cudaError_t (void const *, enum cudaFuncAttribute, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaLaunchHostFunc", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaLaunchHostFunc, "cudaError_t (cudaStream_t, cudaHostFn_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaOccupancyMaxActiveBlocksPerMultiprocessor", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaOccupancyMaxActiveBlocksPerMultiprocessor, "cudaError_t (int *, void const *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaOccupancyAvailableDynamicSMemPerBlock", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaOccupancyAvailableDynamicSMemPerBlock, "cudaError_t (size_t *, void const *, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, "cudaError_t (int *, void const *, int, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMallocManaged", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocManaged, "cudaError_t (void **, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMalloc", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMalloc, "cudaError_t (void **, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaFree", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFree, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaFreeHost", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFreeHost, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaFreeArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFreeArray, "cudaError_t (cudaArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaFreeMipmappedArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFreeMipmappedArray, "cudaError_t (cudaMipmappedArray_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaHostAlloc", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaHostAlloc, "cudaError_t (void **, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaHostRegister", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaHostRegister, "cudaError_t (void *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaHostUnregister", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaHostUnregister, "cudaError_t (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaHostGetDevicePointer", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaHostGetDevicePointer, "cudaError_t (void **, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaHostGetFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaHostGetFlags, "cudaError_t (unsigned int *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetMipmappedArrayLevel", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetMipmappedArrayLevel, "cudaError_t (cudaArray_t *, cudaMipmappedArray_const_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemGetInfo", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemGetInfo, "cudaError_t (size_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaArrayGetPlane", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaArrayGetPlane, "cudaError_t (cudaArray_t *, cudaArray_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemset", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemset, "cudaError_t (void *, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemset2D", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemset2D, "cudaError_t (void *, size_t, int, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemsetAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemsetAsync, "cudaError_t (void *, int, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemset2DAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemset2DAsync, "cudaError_t (void *, size_t, int, size_t, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPrefetchAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPrefetchAsync, "cudaError_t (void const *, size_t, int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMallocAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocAsync, "cudaError_t (void **, size_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaFreeAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaFreeAsync, "cudaError_t (void *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPoolTrimTo", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolTrimTo, "cudaError_t (cudaMemPool_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPoolSetAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolSetAttribute, "cudaError_t (cudaMemPool_t, enum cudaMemPoolAttr, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPoolGetAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolGetAttribute, "cudaError_t (cudaMemPool_t, enum cudaMemPoolAttr, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPoolGetAccess", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolGetAccess, "cudaError_t (enum cudaMemAccessFlags *, cudaMemPool_t, struct cudaMemLocation *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPoolCreate", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolCreate, "cudaError_t (cudaMemPool_t *, struct cudaMemPoolProps const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPoolDestroy", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolDestroy, "cudaError_t (cudaMemPool_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMallocFromPoolAsync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMallocFromPoolAsync, "cudaError_t (void **, size_t, cudaMemPool_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPoolExportToShareableHandle", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolExportToShareableHandle, "cudaError_t (void *, cudaMemPool_t, enum cudaMemAllocationHandleType, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPoolImportFromShareableHandle", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolImportFromShareableHandle, "cudaError_t (cudaMemPool_t *, void *, enum cudaMemAllocationHandleType, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPoolExportPointer", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolExportPointer, "cudaError_t (struct cudaMemPoolPtrExportData *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPoolImportPointer", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPoolImportPointer, "cudaError_t (void **, cudaMemPool_t, struct cudaMemPoolPtrExportData *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsUnregisterResource", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsUnregisterResource, "cudaError_t (cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsResourceSetMapFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsResourceSetMapFlags, "cudaError_t (cudaGraphicsResource_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsMapResources", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsMapResources, "cudaError_t (int, cudaGraphicsResource_t *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsUnmapResources", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsUnmapResources, "cudaError_t (int, cudaGraphicsResource_t *, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsResourceGetMappedPointer", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsResourceGetMappedPointer, "cudaError_t (void **, size_t *, cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsSubResourceGetMappedArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsSubResourceGetMappedArray, "cudaError_t (cudaArray_t *, cudaGraphicsResource_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphicsResourceGetMappedMipmappedArray", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphicsResourceGetMappedMipmappedArray, "cudaError_t (cudaMipmappedArray_t *, cudaGraphicsResource_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDestroyTextureObject", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDestroyTextureObject, "cudaError_t (cudaTextureObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDestroySurfaceObject", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDestroySurfaceObject, "cudaError_t (cudaSurfaceObject_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphCreate", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphCreate, "cudaError_t (cudaGraph_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddKernelNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddKernelNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphKernelNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphKernelNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphKernelNodeCopyAttributes", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphKernelNodeCopyAttributes, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphMemsetNodeGetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemsetNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemsetParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphMemsetNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphMemsetNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaMemsetParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddHostNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddHostNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphHostNodeGetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphHostNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaHostNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphHostNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphHostNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddChildGraphNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddChildGraphNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphChildGraphNodeGetGraph", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphChildGraphNodeGetGraph, "cudaError_t (cudaGraphNode_t, cudaGraph_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddEmptyNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddEmptyNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddEventRecordNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddEventRecordNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphEventRecordNodeGetEvent", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphEventRecordNodeGetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphEventRecordNodeSetEvent", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphEventRecordNodeSetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddEventWaitNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddEventWaitNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphEventWaitNodeGetEvent", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphEventWaitNodeGetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphEventWaitNodeSetEvent", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphEventWaitNodeSetEvent, "cudaError_t (cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddExternalSemaphoresSignalNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddExternalSemaphoresSignalNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExternalSemaphoresSignalNodeGetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExternalSemaphoresSignalNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExternalSemaphoresSignalNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExternalSemaphoresSignalNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddExternalSemaphoresWaitNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddExternalSemaphoresWaitNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExternalSemaphoresWaitNodeGetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExternalSemaphoresWaitNodeGetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExternalSemaphoresWaitNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExternalSemaphoresWaitNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddMemFreeNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddMemFreeNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGraphMemTrim", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGraphMemTrim, "cudaError_t (int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceGetGraphMemAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceGetGraphMemAttribute, "cudaError_t (int, enum cudaGraphMemAttributeType, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceSetGraphMemAttribute", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceSetGraphMemAttribute, "cudaError_t (int, enum cudaGraphMemAttributeType, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphClone", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphClone, "cudaError_t (cudaGraph_t *, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphNodeFindInClone", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeFindInClone, "cudaError_t (cudaGraphNode_t *, cudaGraphNode_t, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphNodeGetType", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetType, "cudaError_t (cudaGraphNode_t, enum cudaGraphNodeType *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphGetNodes", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphGetNodes, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphGetRootNodes", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphGetRootNodes, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphGetEdges", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphGetEdges, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphNodeGetDependencies", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetDependencies, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphNodeGetDependentNodes", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetDependentNodes, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddDependencies", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddDependencies, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphRemoveDependencies", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphRemoveDependencies, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphDestroyNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphDestroyNode, "cudaError_t (cudaGraphNode_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphInstantiate", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphInstantiate, "cudaError_t (cudaGraphExec_t *, cudaGraph_t, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphInstantiateWithFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphInstantiateWithFlags, "cudaError_t (cudaGraphExec_t *, cudaGraph_t, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecKernelNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecKernelNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaKernelNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecHostNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecHostNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaHostNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecChildGraphNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecChildGraphNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecEventRecordNodeSetEvent", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecEventRecordNodeSetEvent, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecEventWaitNodeSetEvent", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecEventWaitNodeSetEvent, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, cudaEvent_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecExternalSemaphoresSignalNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecExternalSemaphoresSignalNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaExternalSemaphoreSignalNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecExternalSemaphoresWaitNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecExternalSemaphoresWaitNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaExternalSemaphoreWaitNodeParams const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphNodeSetEnabled", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeSetEnabled, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphNodeGetEnabled", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetEnabled, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecUpdate", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecUpdate, "cudaError_t (cudaGraphExec_t, cudaGraph_t, cudaGraphExecUpdateResultInfo *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphUpload", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphUpload, "cudaError_t (cudaGraphExec_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphLaunch", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphLaunch, "cudaError_t (cudaGraphExec_t, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecDestroy", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecDestroy, "cudaError_t (cudaGraphExec_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphDestroy", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphDestroy, "cudaError_t (cudaGraph_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphDebugDotPrint", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphDebugDotPrint, "cudaError_t (cudaGraph_t, char const *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaUserObjectCreate", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaUserObjectCreate, "cudaError_t (cudaUserObject_t *, void *, cudaHostFn_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaUserObjectRetain", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaUserObjectRetain, "cudaError_t (cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaUserObjectRelease", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaUserObjectRelease, "cudaError_t (cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphRetainUserObject", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphRetainUserObject, "cudaError_t (cudaGraph_t, cudaUserObject_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphReleaseUserObject", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphReleaseUserObject, "cudaError_t (cudaGraph_t, cudaUserObject_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaProfilerStart", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaProfilerStart, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaProfilerStop", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaProfilerStop, "cudaError_t (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEGLStreamConsumerConnect", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamConsumerConnect, "cudaError_t (__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *, __pyx_t_4cuda_8bindings_9cyruntime_EGLStreamKHR)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEGLStreamConsumerConnectWithFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamConsumerConnectWithFlags, "cudaError_t (__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *, __pyx_t_4cuda_8bindings_9cyruntime_EGLStreamKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEGLStreamConsumerDisconnect", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamConsumerDisconnect, "cudaError_t (__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEGLStreamConsumerAcquireFrame", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamConsumerAcquireFrame, "cudaError_t (__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *, cudaGraphicsResource_t *, cudaStream_t *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEGLStreamConsumerReleaseFrame", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamConsumerReleaseFrame, "cudaError_t (__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *, cudaGraphicsResource_t, cudaStream_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEGLStreamProducerConnect", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamProducerConnect, "cudaError_t (__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *, __pyx_t_4cuda_8bindings_9cyruntime_EGLStreamKHR, __pyx_t_4cuda_8bindings_9cyruntime_EGLint, __pyx_t_4cuda_8bindings_9cyruntime_EGLint)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEGLStreamProducerDisconnect", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEGLStreamProducerDisconnect, "cudaError_t (__pyx_t_4cuda_8bindings_9cyruntime_cudaEglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaEventCreateFromEGLSync", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaEventCreateFromEGLSync, "cudaError_t (cudaEvent_t *, __pyx_t_4cuda_8bindings_9cyruntime_EGLSyncKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaInitDevice", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaInitDevice, "cudaError_t (int, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamGetId", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetId, "cudaError_t (cudaStream_t, unsigned PY_LONG_LONG *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphInstantiateWithParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphInstantiateWithParams, "cudaError_t (cudaGraphExec_t *, cudaGraph_t, cudaGraphInstantiateParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecGetFlags", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecGetFlags, "cudaError_t (cudaGraphExec_t, unsigned PY_LONG_LONG *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetKernel", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetKernel, "cudaError_t (cudaKernel_t *, void const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddNode", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddNode, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, size_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeSetParams, "cudaError_t (cudaGraphNode_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphExecNodeSetParams", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphExecNodeSetParams, "cudaError_t (cudaGraphExec_t, cudaGraphNode_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemPrefetchAsync_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemPrefetchAsync_v2, "cudaError_t (void const *, size_t, struct cudaMemLocation, unsigned int, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaMemAdvise_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaMemAdvise_v2, "cudaError_t (void const *, size_t, enum cudaMemoryAdvise, struct cudaMemLocation)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphConditionalHandleCreate", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphConditionalHandleCreate, "cudaError_t (cudaGraphConditionalHandle *, cudaGraph_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamGetCaptureInfo_v3", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamGetCaptureInfo_v3, "cudaError_t (cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, cudaGraphEdgeData const **, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaStreamUpdateCaptureDependencies_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaStreamUpdateCaptureDependencies_v2, "cudaError_t (cudaStream_t, cudaGraphNode_t *, cudaGraphEdgeData const *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphGetEdges_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphGetEdges_v2, "cudaError_t (cudaGraph_t, cudaGraphNode_t *, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphNodeGetDependencies_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetDependencies_v2, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphNodeGetDependentNodes_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphNodeGetDependentNodes_v2, "cudaError_t (cudaGraphNode_t, cudaGraphNode_t *, cudaGraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddDependencies_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddDependencies_v2, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphRemoveDependencies_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphRemoveDependencies_v2, "cudaError_t (cudaGraph_t, cudaGraphNode_t const *, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGraphAddNode_v2", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGraphAddNode_v2, "cudaError_t (cudaGraphNode_t *, cudaGraph_t, cudaGraphNode_t const *, cudaGraphEdgeData const *, size_t, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_getLocalRuntimeVersion", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__getLocalRuntimeVersion, "cudaError_t (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceRegisterAsyncNotification", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceRegisterAsyncNotification, "cudaError_t (int, cudaAsyncCallback, void *, cudaAsyncCallbackHandle_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaDeviceUnregisterAsyncNotification", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaDeviceUnregisterAsyncNotification, "cudaError_t (int, cudaAsyncCallbackHandle_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("_cudaGetDriverEntryPointByVersion", (void (*)(void))__pyx_f_4cuda_8bindings_4_lib_9cyruntime_9cyruntime__cudaGetDriverEntryPointByVersion, "cudaError_t (char const *, void **, unsigned int, unsigned PY_LONG_LONG, enum cudaDriverEntryPointQueryResult *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cuda.bindings._lib.cyruntime.utils"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal = __Pyx_ImportType_3_0_11(__pyx_t_1, "cuda.bindings._lib.cyruntime.utils", "cudaPythonGlobal", sizeof(struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal), __PYX_GET_STRUCT_ALIGNMENT_3_0_11(struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal),__Pyx_ImportType_CheckSize_Warn_3_0_11); if (!__pyx_ptype_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal) __PYX_ERR(1, 28, __pyx_L1_error)
  __pyx_vtabptr_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal = (struct __pyx_vtabstruct_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal*)__Pyx_GetVtable(__pyx_ptype_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal); if (unlikely(!__pyx_vtabptr_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("cuda.bindings.cydriver"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "cuTexObjectGetResourceDesc", (void (**)(void))&__pyx_f_4cuda_8bindings_8cydriver_cuTexObjectGetResourceDesc, "CUresult (CUDA_RESOURCE_DESC *, CUtexObject)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "cuTexObjectGetResourceViewDesc", (void (**)(void))&__pyx_f_4cuda_8bindings_8cydriver_cuTexObjectGetResourceViewDesc, "CUresult (CUDA_RESOURCE_VIEW_DESC *, CUtexObject)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cuda.bindings._bindings.cydriver"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGetErrorString", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGetErrorString, "CUresult (CUresult, char const **)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDriverGetVersion", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDriverGetVersion, "CUresult (int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceGetTexture1DLinearMaxWidth", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetTexture1DLinearMaxWidth, "CUresult (size_t *, CUarray_format, unsigned int, CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceGetAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetAttribute, "CUresult (int *, CUdevice_attribute, CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceGetNvSciSyncAttributes", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetNvSciSyncAttributes, "CUresult (void *, CUdevice, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceSetMemPool", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceSetMemPool, "CUresult (CUdevice, CUmemoryPool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceGetMemPool", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetMemPool, "CUresult (CUmemoryPool *, CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceGetDefaultMemPool", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetDefaultMemPool, "CUresult (CUmemoryPool *, CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuFlushGPUDirectRDMAWrites", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFlushGPUDirectRDMAWrites, "CUresult (CUflushGPUDirectRDMAWritesTarget, CUflushGPUDirectRDMAWritesScope)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDevicePrimaryCtxSetFlags_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDevicePrimaryCtxSetFlags_v2, "CUresult (CUdevice, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDevicePrimaryCtxGetState", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDevicePrimaryCtxGetState, "CUresult (CUdevice, unsigned int *, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxSetCurrent", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetCurrent, "CUresult (CUcontext)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxGetCurrent", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCurrent, "CUresult (CUcontext *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxGetDevice", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetDevice, "CUresult (CUdevice *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxGetFlags", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetFlags, "CUresult (unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxSynchronize", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSynchronize, "CUresult (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxSetLimit", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetLimit, "CUresult (CUlimit, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxGetLimit", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetLimit, "CUresult (size_t *, CUlimit)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxGetCacheConfig", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetCacheConfig, "CUresult (CUfunc_cache *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxSetCacheConfig", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetCacheConfig, "CUresult (CUfunc_cache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxGetStreamPriorityRange", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetStreamPriorityRange, "CUresult (int *, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxResetPersistingL2Cache", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxResetPersistingL2Cache, "CUresult (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxGetSharedMemConfig", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxGetSharedMemConfig, "CUresult (CUsharedconfig *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxSetSharedMemConfig", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxSetSharedMemConfig, "CUresult (CUsharedconfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemGetInfo_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemGetInfo_v2, "CUresult (size_t *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemAlloc_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAlloc_v2, "CUresult (CUdeviceptr *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemFree_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemFree_v2, "CUresult (CUdeviceptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemFreeHost", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemFreeHost, "CUresult (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemHostAlloc", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostAlloc, "CUresult (void **, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemHostGetDevicePointer_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostGetDevicePointer_v2, "CUresult (CUdeviceptr *, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemHostGetFlags", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostGetFlags, "CUresult (unsigned int *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemAllocManaged", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAllocManaged, "CUresult (CUdeviceptr *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceGetByPCIBusId", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetByPCIBusId, "CUresult (CUdevice *, char const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceGetPCIBusId", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetPCIBusId, "CUresult (char *, int, CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuIpcGetEventHandle", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcGetEventHandle, "CUresult (CUipcEventHandle *, CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuIpcOpenEventHandle", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcOpenEventHandle, "CUresult (CUevent *, CUipcEventHandle)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuIpcGetMemHandle", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcGetMemHandle, "CUresult (CUipcMemHandle *, CUdeviceptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuIpcOpenMemHandle_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcOpenMemHandle_v2, "CUresult (CUdeviceptr *, CUipcMemHandle, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuIpcCloseMemHandle", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuIpcCloseMemHandle, "CUresult (CUdeviceptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemHostRegister_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostRegister_v2, "CUresult (void *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemHostUnregister", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemHostUnregister, "CUresult (void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemcpyPeer", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemcpyPeer, "CUresult (CUdeviceptr, CUcontext, CUdeviceptr, CUcontext, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemcpyPeerAsync", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemcpyPeerAsync, "CUresult (CUdeviceptr, CUcontext, CUdeviceptr, CUcontext, size_t, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemsetD8_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD8_v2, "CUresult (CUdeviceptr, unsigned char, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemsetD2D8_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD2D8_v2, "CUresult (CUdeviceptr, size_t, unsigned char, size_t, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemsetD8Async", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD8Async, "CUresult (CUdeviceptr, unsigned char, size_t, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemsetD2D8Async", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemsetD2D8Async, "CUresult (CUdeviceptr, size_t, unsigned char, size_t, size_t, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuArrayGetSparseProperties", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayGetSparseProperties, "CUresult (CUDA_ARRAY_SPARSE_PROPERTIES *, CUarray)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMipmappedArrayGetSparseProperties", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayGetSparseProperties, "CUresult (CUDA_ARRAY_SPARSE_PROPERTIES *, CUmipmappedArray)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuArrayGetMemoryRequirements", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayGetMemoryRequirements, "CUresult (CUDA_ARRAY_MEMORY_REQUIREMENTS *, CUarray, CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMipmappedArrayGetMemoryRequirements", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayGetMemoryRequirements, "CUresult (CUDA_ARRAY_MEMORY_REQUIREMENTS *, CUmipmappedArray, CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuArrayGetPlane", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayGetPlane, "CUresult (CUarray *, CUarray, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuArrayDestroy", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArrayDestroy, "CUresult (CUarray)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuArray3DGetDescriptor_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuArray3DGetDescriptor_v2, "CUresult (CUDA_ARRAY3D_DESCRIPTOR *, CUarray)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMipmappedArrayGetLevel", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayGetLevel, "CUresult (CUarray *, CUmipmappedArray, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMipmappedArrayDestroy", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMipmappedArrayDestroy, "CUresult (CUmipmappedArray)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemFreeAsync", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemFreeAsync, "CUresult (CUdeviceptr, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemAllocAsync", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAllocAsync, "CUresult (CUdeviceptr *, size_t, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPoolTrimTo", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolTrimTo, "CUresult (CUmemoryPool, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPoolSetAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolSetAttribute, "CUresult (CUmemoryPool, CUmemPool_attribute, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPoolGetAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolGetAttribute, "CUresult (CUmemoryPool, CUmemPool_attribute, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPoolSetAccess", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolSetAccess, "CUresult (CUmemoryPool, CUmemAccessDesc const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPoolGetAccess", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolGetAccess, "CUresult (CUmemAccess_flags *, CUmemoryPool, CUmemLocation *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPoolCreate", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolCreate, "CUresult (CUmemoryPool *, CUmemPoolProps const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPoolDestroy", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolDestroy, "CUresult (CUmemoryPool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemAllocFromPoolAsync", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAllocFromPoolAsync, "CUresult (CUdeviceptr *, size_t, CUmemoryPool, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPoolExportToShareableHandle", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolExportToShareableHandle, "CUresult (void *, CUmemoryPool, CUmemAllocationHandleType, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPoolImportFromShareableHandle", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolImportFromShareableHandle, "CUresult (CUmemoryPool *, void *, CUmemAllocationHandleType, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPoolExportPointer", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolExportPointer, "CUresult (CUmemPoolPtrExportData *, CUdeviceptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPoolImportPointer", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPoolImportPointer, "CUresult (CUdeviceptr *, CUmemoryPool, CUmemPoolPtrExportData *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPrefetchAsync", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPrefetchAsync, "CUresult (CUdeviceptr, size_t, CUdevice, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemPrefetchAsync_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemPrefetchAsync_v2, "CUresult (CUdeviceptr, size_t, CUmemLocation, unsigned int, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemAdvise", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAdvise, "CUresult (CUdeviceptr, size_t, CUmem_advise, CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemAdvise_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemAdvise_v2, "CUresult (CUdeviceptr, size_t, CUmem_advise, CUmemLocation)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemRangeGetAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemRangeGetAttribute, "CUresult (void *, size_t, CUmem_range_attribute, CUdeviceptr, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuMemRangeGetAttributes", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuMemRangeGetAttributes, "CUresult (void **, size_t *, CUmem_range_attribute *, size_t, CUdeviceptr, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuPointerGetAttributes", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuPointerGetAttributes, "CUresult (unsigned int, CUpointer_attribute *, void **, CUdeviceptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamCreate", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamCreate, "CUresult (CUstream *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamCreateWithPriority", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamCreateWithPriority, "CUresult (CUstream *, unsigned int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamGetPriority", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetPriority, "CUresult (CUstream, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamGetFlags", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetFlags, "CUresult (CUstream, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamGetId", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetId, "CUresult (CUstream, unsigned PY_LONG_LONG *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamWaitEvent", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamWaitEvent, "CUresult (CUstream, CUevent, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamBeginCapture_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamBeginCapture_v2, "CUresult (CUstream, CUstreamCaptureMode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamBeginCaptureToGraph", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamBeginCaptureToGraph, "CUresult (CUstream, CUgraph, CUgraphNode const *, CUgraphEdgeData const *, size_t, CUstreamCaptureMode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuThreadExchangeStreamCaptureMode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuThreadExchangeStreamCaptureMode, "CUresult (CUstreamCaptureMode *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamEndCapture", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamEndCapture, "CUresult (CUstream, CUgraph *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamIsCapturing", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamIsCapturing, "CUresult (CUstream, CUstreamCaptureStatus *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamUpdateCaptureDependencies", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamUpdateCaptureDependencies, "CUresult (CUstream, CUgraphNode *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamUpdateCaptureDependencies_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamUpdateCaptureDependencies_v2, "CUresult (CUstream, CUgraphNode *, CUgraphEdgeData const *, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamAttachMemAsync", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamAttachMemAsync, "CUresult (CUstream, CUdeviceptr, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamQuery", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamQuery, "CUresult (CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamSynchronize", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamSynchronize, "CUresult (CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamDestroy_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamDestroy_v2, "CUresult (CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamCopyAttributes", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamCopyAttributes, "CUresult (CUstream, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamGetAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamGetAttribute, "CUresult (CUstream, CUstreamAttrID, CUstreamAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuStreamSetAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuStreamSetAttribute, "CUresult (CUstream, CUstreamAttrID, CUstreamAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEventCreate", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventCreate, "CUresult (CUevent *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEventRecord", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventRecord, "CUresult (CUevent, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEventRecordWithFlags", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventRecordWithFlags, "CUresult (CUevent, CUstream, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEventQuery", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventQuery, "CUresult (CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEventSynchronize", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventSynchronize, "CUresult (CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEventDestroy_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventDestroy_v2, "CUresult (CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEventElapsedTime", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventElapsedTime, "CUresult (float *, CUevent, CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuImportExternalMemory", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuImportExternalMemory, "CUresult (CUexternalMemory *, CUDA_EXTERNAL_MEMORY_HANDLE_DESC const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuExternalMemoryGetMappedBuffer", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuExternalMemoryGetMappedBuffer, "CUresult (CUdeviceptr *, CUexternalMemory, CUDA_EXTERNAL_MEMORY_BUFFER_DESC const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuExternalMemoryGetMappedMipmappedArray", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuExternalMemoryGetMappedMipmappedArray, "CUresult (CUmipmappedArray *, CUexternalMemory, CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDestroyExternalMemory", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDestroyExternalMemory, "CUresult (CUexternalMemory)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuImportExternalSemaphore", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuImportExternalSemaphore, "CUresult (CUexternalSemaphore *, CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuSignalExternalSemaphoresAsync", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSignalExternalSemaphoresAsync, "CUresult (CUexternalSemaphore const *, CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS const *, unsigned int, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuWaitExternalSemaphoresAsync", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuWaitExternalSemaphoresAsync, "CUresult (CUexternalSemaphore const *, CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS const *, unsigned int, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDestroyExternalSemaphore", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDestroyExternalSemaphore, "CUresult (CUexternalSemaphore)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuFuncGetAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncGetAttribute, "CUresult (int *, CUfunction_attribute, CUfunction)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuFuncSetAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncSetAttribute, "CUresult (CUfunction, CUfunction_attribute, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuFuncSetCacheConfig", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncSetCacheConfig, "CUresult (CUfunction, CUfunc_cache)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuFuncSetSharedMemConfig", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuFuncSetSharedMemConfig, "CUresult (CUfunction, CUsharedconfig)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphCreate", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphCreate, "CUresult (CUgraph *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddKernelNode_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddKernelNode_v2, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_KERNEL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphKernelNodeGetParams_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeGetParams_v2, "CUresult (CUgraphNode, CUDA_KERNEL_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphKernelNodeSetParams_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeSetParams_v2, "CUresult (CUgraphNode, CUDA_KERNEL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddMemcpyNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemcpyNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_MEMCPY3D const *, CUcontext)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphMemcpyNodeGetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemcpyNodeGetParams, "CUresult (CUgraphNode, CUDA_MEMCPY3D *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphMemcpyNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemcpyNodeSetParams, "CUresult (CUgraphNode, CUDA_MEMCPY3D const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddMemsetNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemsetNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_MEMSET_NODE_PARAMS const *, CUcontext)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphMemsetNodeGetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemsetNodeGetParams, "CUresult (CUgraphNode, CUDA_MEMSET_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphMemsetNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemsetNodeSetParams, "CUresult (CUgraphNode, CUDA_MEMSET_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddHostNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddHostNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_HOST_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphHostNodeGetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphHostNodeGetParams, "CUresult (CUgraphNode, CUDA_HOST_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphHostNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphHostNodeSetParams, "CUresult (CUgraphNode, CUDA_HOST_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddChildGraphNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddChildGraphNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUgraph)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphChildGraphNodeGetGraph", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphChildGraphNodeGetGraph, "CUresult (CUgraphNode, CUgraph *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddEmptyNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddEmptyNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddEventRecordNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddEventRecordNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphEventRecordNodeGetEvent", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventRecordNodeGetEvent, "CUresult (CUgraphNode, CUevent *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphEventRecordNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventRecordNodeSetEvent, "CUresult (CUgraphNode, CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddEventWaitNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddEventWaitNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphEventWaitNodeGetEvent", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventWaitNodeGetEvent, "CUresult (CUgraphNode, CUevent *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphEventWaitNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphEventWaitNodeSetEvent, "CUresult (CUgraphNode, CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddExternalSemaphoresSignalNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddExternalSemaphoresSignalNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExternalSemaphoresSignalNodeGetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresSignalNodeGetParams, "CUresult (CUgraphNode, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExternalSemaphoresSignalNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresSignalNodeSetParams, "CUresult (CUgraphNode, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddExternalSemaphoresWaitNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddExternalSemaphoresWaitNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_EXT_SEM_WAIT_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExternalSemaphoresWaitNodeGetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresWaitNodeGetParams, "CUresult (CUgraphNode, CUDA_EXT_SEM_WAIT_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExternalSemaphoresWaitNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExternalSemaphoresWaitNodeSetParams, "CUresult (CUgraphNode, CUDA_EXT_SEM_WAIT_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddMemAllocNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemAllocNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUDA_MEM_ALLOC_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphMemAllocNodeGetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemAllocNodeGetParams, "CUresult (CUgraphNode, CUDA_MEM_ALLOC_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddMemFreeNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddMemFreeNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUdeviceptr)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphMemFreeNodeGetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphMemFreeNodeGetParams, "CUresult (CUgraphNode, CUdeviceptr *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceGraphMemTrim", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGraphMemTrim, "CUresult (CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceGetGraphMemAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetGraphMemAttribute, "CUresult (CUdevice, CUgraphMem_attribute, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceSetGraphMemAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceSetGraphMemAttribute, "CUresult (CUdevice, CUgraphMem_attribute, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphClone", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphClone, "CUresult (CUgraph *, CUgraph)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphNodeFindInClone", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeFindInClone, "CUresult (CUgraphNode *, CUgraphNode, CUgraph)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphNodeGetType", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetType, "CUresult (CUgraphNode, CUgraphNodeType *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphGetNodes", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetNodes, "CUresult (CUgraph, CUgraphNode *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphGetRootNodes", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetRootNodes, "CUresult (CUgraph, CUgraphNode *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphGetEdges", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetEdges, "CUresult (CUgraph, CUgraphNode *, CUgraphNode *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphGetEdges_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphGetEdges_v2, "CUresult (CUgraph, CUgraphNode *, CUgraphNode *, CUgraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphNodeGetDependencies", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependencies, "CUresult (CUgraphNode, CUgraphNode *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphNodeGetDependencies_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependencies_v2, "CUresult (CUgraphNode, CUgraphNode *, CUgraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphNodeGetDependentNodes", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependentNodes, "CUresult (CUgraphNode, CUgraphNode *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphNodeGetDependentNodes_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetDependentNodes_v2, "CUresult (CUgraphNode, CUgraphNode *, CUgraphEdgeData *, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddDependencies", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddDependencies, "CUresult (CUgraph, CUgraphNode const *, CUgraphNode const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddDependencies_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddDependencies_v2, "CUresult (CUgraph, CUgraphNode const *, CUgraphNode const *, CUgraphEdgeData const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphRemoveDependencies", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphRemoveDependencies, "CUresult (CUgraph, CUgraphNode const *, CUgraphNode const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphRemoveDependencies_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphRemoveDependencies_v2, "CUresult (CUgraph, CUgraphNode const *, CUgraphNode const *, CUgraphEdgeData const *, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphDestroyNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphDestroyNode, "CUresult (CUgraphNode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphInstantiateWithFlags", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphInstantiateWithFlags, "CUresult (CUgraphExec *, CUgraph, unsigned PY_LONG_LONG)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphInstantiateWithParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphInstantiateWithParams, "CUresult (CUgraphExec *, CUgraph, CUDA_GRAPH_INSTANTIATE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecGetFlags", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecGetFlags, "CUresult (CUgraphExec, cuuint64_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecKernelNodeSetParams_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecKernelNodeSetParams_v2, "CUresult (CUgraphExec, CUgraphNode, CUDA_KERNEL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecMemcpyNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecMemcpyNodeSetParams, "CUresult (CUgraphExec, CUgraphNode, CUDA_MEMCPY3D const *, CUcontext)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecMemsetNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecMemsetNodeSetParams, "CUresult (CUgraphExec, CUgraphNode, CUDA_MEMSET_NODE_PARAMS const *, CUcontext)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecHostNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecHostNodeSetParams, "CUresult (CUgraphExec, CUgraphNode, CUDA_HOST_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecChildGraphNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecChildGraphNodeSetParams, "CUresult (CUgraphExec, CUgraphNode, CUgraph)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecEventRecordNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecEventRecordNodeSetEvent, "CUresult (CUgraphExec, CUgraphNode, CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecEventWaitNodeSetEvent", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecEventWaitNodeSetEvent, "CUresult (CUgraphExec, CUgraphNode, CUevent)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecExternalSemaphoresSignalNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecExternalSemaphoresSignalNodeSetParams, "CUresult (CUgraphExec, CUgraphNode, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecExternalSemaphoresWaitNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecExternalSemaphoresWaitNodeSetParams, "CUresult (CUgraphExec, CUgraphNode, CUDA_EXT_SEM_WAIT_NODE_PARAMS const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphNodeSetEnabled", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeSetEnabled, "CUresult (CUgraphExec, CUgraphNode, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphNodeGetEnabled", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeGetEnabled, "CUresult (CUgraphExec, CUgraphNode, unsigned int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphUpload", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphUpload, "CUresult (CUgraphExec, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphLaunch", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphLaunch, "CUresult (CUgraphExec, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecDestroy", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecDestroy, "CUresult (CUgraphExec)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphDestroy", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphDestroy, "CUresult (CUgraph)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecUpdate_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecUpdate_v2, "CUresult (CUgraphExec, CUgraph, CUgraphExecUpdateResultInfo *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphKernelNodeCopyAttributes", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeCopyAttributes, "CUresult (CUgraphNode, CUgraphNode)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphKernelNodeGetAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeGetAttribute, "CUresult (CUgraphNode, CUkernelNodeAttrID, CUkernelNodeAttrValue *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphKernelNodeSetAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphKernelNodeSetAttribute, "CUresult (CUgraphNode, CUkernelNodeAttrID, CUkernelNodeAttrValue const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphDebugDotPrint", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphDebugDotPrint, "CUresult (CUgraph, char const *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuUserObjectCreate", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuUserObjectCreate, "CUresult (CUuserObject *, void *, CUhostFn, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuUserObjectRetain", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuUserObjectRetain, "CUresult (CUuserObject, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuUserObjectRelease", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuUserObjectRelease, "CUresult (CUuserObject, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphRetainUserObject", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphRetainUserObject, "CUresult (CUgraph, CUuserObject, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphReleaseUserObject", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphReleaseUserObject, "CUresult (CUgraph, CUuserObject, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddNode", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddNode, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, size_t, CUgraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphAddNode_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphAddNode_v2, "CUresult (CUgraphNode *, CUgraph, CUgraphNode const *, CUgraphEdgeData const *, size_t, CUgraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphNodeSetParams, "CUresult (CUgraphNode, CUgraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphExecNodeSetParams", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphExecNodeSetParams, "CUresult (CUgraphExec, CUgraphNode, CUgraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphConditionalHandleCreate", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphConditionalHandleCreate, "CUresult (CUgraphConditionalHandle *, CUgraph, CUcontext, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuOccupancyMaxActiveBlocksPerMultiprocessor", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuOccupancyMaxActiveBlocksPerMultiprocessor, "CUresult (int *, CUfunction, int, size_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, "CUresult (int *, CUfunction, int, size_t, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuOccupancyAvailableDynamicSMemPerBlock", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuOccupancyAvailableDynamicSMemPerBlock, "CUresult (size_t *, CUfunction, int, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuTexObjectCreate", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectCreate, "CUresult (CUtexObject *, CUDA_RESOURCE_DESC const *, CUDA_TEXTURE_DESC const *, CUDA_RESOURCE_VIEW_DESC const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuTexObjectDestroy", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectDestroy, "CUresult (CUtexObject)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuTexObjectGetResourceDesc", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectGetResourceDesc, "CUresult (CUDA_RESOURCE_DESC *, CUtexObject)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuTexObjectGetTextureDesc", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuTexObjectGetTextureDesc, "CUresult (CUDA_TEXTURE_DESC *, CUtexObject)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuSurfObjectCreate", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSurfObjectCreate, "CUresult (CUsurfObject *, CUDA_RESOURCE_DESC const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuSurfObjectDestroy", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSurfObjectDestroy, "CUresult (CUsurfObject)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuSurfObjectGetResourceDesc", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuSurfObjectGetResourceDesc, "CUresult (CUDA_RESOURCE_DESC *, CUsurfObject)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceCanAccessPeer", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceCanAccessPeer, "CUresult (int *, CUdevice, CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxEnablePeerAccess", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxEnablePeerAccess, "CUresult (CUcontext, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuCtxDisablePeerAccess", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuCtxDisablePeerAccess, "CUresult (CUcontext)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuDeviceGetP2PAttribute", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuDeviceGetP2PAttribute, "CUresult (int *, CUdevice_P2PAttribute, CUdevice, CUdevice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsUnregisterResource", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsUnregisterResource, "CUresult (CUgraphicsResource)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsSubResourceGetMappedArray", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsSubResourceGetMappedArray, "CUresult (CUarray *, CUgraphicsResource, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsResourceGetMappedMipmappedArray", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceGetMappedMipmappedArray, "CUresult (CUmipmappedArray *, CUgraphicsResource)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsResourceGetMappedPointer_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceGetMappedPointer_v2, "CUresult (CUdeviceptr *, size_t *, CUgraphicsResource)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsResourceSetMapFlags_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceSetMapFlags_v2, "CUresult (CUgraphicsResource, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsMapResources", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsMapResources, "CUresult (unsigned int, CUgraphicsResource *, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsUnmapResources", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsUnmapResources, "CUresult (unsigned int, CUgraphicsResource *, CUstream)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGetProcAddress_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGetProcAddress_v2, "CUresult (char const *, void **, int, cuuint64_t, CUdriverProcAddressQueryResult *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGetExportTable", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGetExportTable, "CUresult (void const **, CUuuid const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuProfilerStart", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuProfilerStart, "CUresult (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuProfilerStop", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuProfilerStop, "CUresult (void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsEGLRegisterImage", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsEGLRegisterImage, "CUresult (CUgraphicsResource *, __pyx_t_4cuda_8bindings_8cydriver_EGLImageKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEGLStreamConsumerConnect", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerConnect, "CUresult (__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, __pyx_t_4cuda_8bindings_8cydriver_EGLStreamKHR)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEGLStreamConsumerConnectWithFlags", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerConnectWithFlags, "CUresult (__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, __pyx_t_4cuda_8bindings_8cydriver_EGLStreamKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEGLStreamConsumerDisconnect", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerDisconnect, "CUresult (__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEGLStreamConsumerAcquireFrame", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerAcquireFrame, "CUresult (__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, CUgraphicsResource *, CUstream *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEGLStreamConsumerReleaseFrame", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamConsumerReleaseFrame, "CUresult (__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, CUgraphicsResource, CUstream *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEGLStreamProducerConnect", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerConnect, "CUresult (__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, __pyx_t_4cuda_8bindings_8cydriver_EGLStreamKHR, __pyx_t_4cuda_8bindings_8cydriver_EGLint, __pyx_t_4cuda_8bindings_8cydriver_EGLint)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEGLStreamProducerDisconnect", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerDisconnect, "CUresult (__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEGLStreamProducerPresentFrame", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerPresentFrame, "CUresult (__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame, CUstream *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEGLStreamProducerReturnFrame", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEGLStreamProducerReturnFrame, "CUresult (__pyx_t_4cuda_8bindings_8cydriver_CUeglStreamConnection *, __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame *, CUstream *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsResourceGetMappedEglFrame", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsResourceGetMappedEglFrame, "CUresult (__pyx_t_4cuda_8bindings_8cydriver_CUeglFrame *, CUgraphicsResource, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuEventCreateFromEGLSync", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuEventCreateFromEGLSync, "CUresult (CUevent *, __pyx_t_4cuda_8bindings_8cydriver_EGLSyncKHR, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsGLRegisterBuffer", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsGLRegisterBuffer, "CUresult (CUgraphicsResource *, __pyx_t_4cuda_8bindings_8cydriver_GLuint, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsGLRegisterImage", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsGLRegisterImage, "CUresult (CUgraphicsResource *, __pyx_t_4cuda_8bindings_8cydriver_GLuint, __pyx_t_4cuda_8bindings_8cydriver_GLenum, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGLGetDevices_v2", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGLGetDevices_v2, "CUresult (unsigned int *, CUdevice *, unsigned int, __pyx_t_4cuda_8bindings_8cydriver_CUGLDeviceList)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuVDPAUGetDevice", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuVDPAUGetDevice, "CUresult (CUdevice *, __pyx_t_4cuda_8bindings_8cydriver_VdpDevice, __pyx_t_4cuda_8bindings_8cydriver_VdpGetProcAddress *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsVDPAURegisterVideoSurface", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsVDPAURegisterVideoSurface, "CUresult (CUgraphicsResource *, __pyx_t_4cuda_8bindings_8cydriver_VdpVideoSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_cuGraphicsVDPAURegisterOutputSurface", (void (**)(void))&__pyx_f_4cuda_8bindings_9_bindings_8cydriver__cuGraphicsVDPAURegisterOutputSurface, "CUresult (CUgraphicsResource *, __pyx_t_4cuda_8bindings_8cydriver_VdpOutputSurface, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cuda.bindings._lib.cyruntime.utils"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "initPrimaryContext", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_initPrimaryContext, "cudaError_t (struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "resetPrimaryContext", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_resetPrimaryContext, "cudaError_t (struct __pyx_t_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonDevice *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "globalGetInstance", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_globalGetInstance, "struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "_setLastError", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils__setLastError, "cudaError_t (cudaError_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "getDescInfo", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getDescInfo, "cudaError_t (struct cudaChannelFormatDesc const *, int *, CUarray_format *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "streamAddCallbackCommon", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamAddCallbackCommon, "cudaError_t (cudaStream_t, cudaStreamCallback_t, void *, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "streamAddHostCallbackCommon", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamAddHostCallbackCommon, "cudaError_t (cudaStream_t, cudaHostFn_t, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "streamGetCaptureInfoCommon", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamGetCaptureInfoCommon, "cudaError_t (cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "streamGetCaptureInfoCommon_v3", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_streamGetCaptureInfoCommon_v3, "cudaError_t (cudaStream_t, enum cudaStreamCaptureStatus *, unsigned PY_LONG_LONG *, cudaGraph_t *, cudaGraphNode_t const **, cudaGraphEdgeData const **, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "getChannelFormatDescFromDriverDesc", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getChannelFormatDescFromDriverDesc, "cudaError_t (struct cudaChannelFormatDesc *, size_t *, size_t *, size_t *, CUDA_ARRAY3D_DESCRIPTOR_v2 const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "getChannelDesc", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getChannelDesc, "cudaError_t (cudaArray_const_t, struct cudaChannelFormatDesc *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "getDriverResDescFromResDesc", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getDriverResDescFromResDesc, "cudaError_t (CUDA_RESOURCE_DESC *, struct cudaResourceDesc const *, CUDA_TEXTURE_DESC *, struct cudaTextureDesc const *, CUDA_RESOURCE_VIEW_DESC *, struct cudaResourceViewDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "getResDescFromDriverResDesc", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getResDescFromDriverResDesc, "cudaError_t (struct cudaResourceDesc *, CUDA_RESOURCE_DESC const *, struct cudaTextureDesc *, CUDA_TEXTURE_DESC const *, struct cudaResourceViewDesc *, CUDA_RESOURCE_VIEW_DESC const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "copy1DConvertTo3DParams", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_copy1DConvertTo3DParams, "cudaError_t (void *, void const *, size_t, enum cudaMemcpyKind, struct cudaMemcpy3DParms *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "toDriverMemsetNodeParams", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemsetNodeParams, "void (struct cudaMemsetParams const *, CUDA_MEMSET_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "toDriverMemCopy3DParams", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverMemCopy3DParams, "cudaError_t (struct cudaMemcpy3DParms const *, CUDA_MEMCPY3D *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "mallocArray", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocArray, "cudaError_t (cudaArray_t *, struct cudaChannelFormatDesc const *, size_t, size_t, size_t, int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "memcpy2DToArray", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DToArray, "cudaError_t (cudaArray_t, size_t, size_t, char const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t, bool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "memcpyDispatch", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyDispatch, "cudaError_t (void *, void const *, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "mallocHost", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocHost, "cudaError_t (size_t, void **, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "mallocPitch", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocPitch, "cudaError_t (size_t, size_t, size_t, void **, size_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "mallocMipmappedArray", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_mallocMipmappedArray, "cudaError_t (cudaMipmappedArray_t *, struct cudaChannelFormatDesc const *, size_t, size_t, size_t, unsigned int, unsigned int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "memcpy2DPtr", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DPtr, "cudaError_t (char *, size_t, char const *, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t, bool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "memcpy3D", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy3D, "cudaError_t (struct cudaMemcpy3DParms const *, bool, int, int, cudaStream_t, bool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "memcpyAsyncDispatch", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyAsyncDispatch, "cudaError_t (void *, void const *, size_t, enum cudaMemcpyKind, cudaStream_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "toCudartMemCopy3DParams", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toCudartMemCopy3DParams, "cudaError_t (CUDA_MEMCPY3D_v2 const *, struct cudaMemcpy3DParms *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "memcpy2DFromArray", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DFromArray, "cudaError_t (char *, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t, bool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "memcpy2DArrayToArray", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpy2DArrayToArray, "cudaError_t (cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "memset3DPtr", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memset3DPtr, "cudaError_t (struct cudaPitchedPtr, int, struct cudaExtent, cudaStream_t, bool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "memcpyToArray", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyToArray, "cudaError_t (cudaArray_t, size_t, size_t, char const *, size_t, enum cudaMemcpyKind, cudaStream_t, bool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "memcpyFromArray", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyFromArray, "cudaError_t (char *, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind, cudaStream_t, bool)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "memcpyArrayToArray", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_memcpyArrayToArray, "cudaError_t (cudaArray_t, size_t, size_t, cudaArray_const_t, size_t, size_t, size_t, enum cudaMemcpyKind)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "toDriverCudaResourceDesc", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverCudaResourceDesc, "cudaError_t (CUDA_RESOURCE_DESC *, struct cudaResourceDesc const *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "getDriverEglFrame", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getDriverEglFrame, "cudaError_t (__pyx_t_4cuda_8bindings_8cydriver_CUeglFrame *, __pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "getRuntimeEglFrame", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_getRuntimeEglFrame, "cudaError_t (__pyx_t_4cuda_8bindings_9cyruntime_cudaEglFrame *, __pyx_t_4cuda_8bindings_8cydriver_CUeglFrame)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "toDriverGraphNodeParams", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverGraphNodeParams, "cudaError_t (struct cudaGraphNodeParams const *, CUgraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "toCudartGraphNodeOutParams", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toCudartGraphNodeOutParams, "void (CUgraphNodeParams const *, struct cudaGraphNodeParams *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "toDriverKernelNodeParams", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverKernelNodeParams, "cudaError_t (struct cudaKernelNodeParams const *, CUDA_KERNEL_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "toDriverHostNodeParams", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_toDriverHostNodeParams, "void (struct cudaHostNodeParams const *, CUDA_HOST_NODE_PARAMS *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "DeviceRegisterAsyncNotificationCommon", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_DeviceRegisterAsyncNotificationCommon, "cudaError_t (int, cudaAsyncCallback, void *, cudaAsyncCallbackHandle_t *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_11(__pyx_t_1, "DeviceUnregisterAsyncNotificationCommon", (void (**)(void))&__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_DeviceUnregisterAsyncNotificationCommon, "cudaError_t (int, cudaAsyncCallbackHandle_t)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cyruntime(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cyruntime},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "cyruntime",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcyruntime(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcyruntime(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cyruntime(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cyruntime(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cyruntime(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cyruntime' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cyruntime", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "cyruntime" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cyruntime(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_cuda__bindings___lib__cyruntime__cyruntime) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "cuda.bindings._lib.cyruntime.cyruntime")) {
      if (unlikely((PyDict_SetItemString(modules, "cuda.bindings._lib.cyruntime.cyruntime", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely((__Pyx_modinit_function_export_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_init_code();
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely((__Pyx_modinit_function_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_cyruntime(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":15
 * cimport cuda.bindings._bindings.cydriver as cydriver
 * 
 * cdef cudaPythonGlobal m_global = globalGetInstance()             # <<<<<<<<<<<<<<
 * 
 * cdef cudaError_t _cudaMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) except ?cudaErrorCallRequiresNewerDriver nogil:
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_4cuda_8bindings_4_lib_9cyruntime_5utils_globalGetInstance()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF((PyObject *)__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global);
  __Pyx_DECREF_SET(__pyx_v_4cuda_8bindings_4_lib_9cyruntime_9cyruntime_m_global, ((struct __pyx_obj_4cuda_8bindings_4_lib_9cyruntime_5utils_cudaPythonGlobal *)__pyx_t_2));
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "cuda/bindings/_lib/cyruntime/cyruntime.pyx":1
 * # Copyright 2021-2024 NVIDIA Corporation.  All rights reserved.             # <<<<<<<<<<<<<<
 * #
 * # Please refer to the NVIDIA end user license agreement (EULA) associated
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init cuda.bindings._lib.cyruntime.cyruntime", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init cuda.bindings._lib.cyruntime.cyruntime");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    __Pyx_EnterTracing(tstate);
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    __Pyx_LeaveTracing(tstate);
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return __Pyx_IsTracing(tstate, 0, 0) && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* ErrOccurredWithGIL */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
  int err;
  #ifdef WITH_THREAD
  PyGILState_STATE _save = PyGILState_Ensure();
  #endif
  err = !!PyErr_Occurred();
  #ifdef WITH_THREAD
  PyGILState_Release(_save);
  #endif
  return err;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(0);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_11
#define __PYX_HAVE_RT_ImportType_3_0_11
static PyTypeObject *__Pyx_ImportType_3_0_11(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_11 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_11 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_11 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__3);
    }
    return name;
}
#endif

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
    cobj = PyCapsule_New(tmp.p, sig, 0);
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction_3_0_11
#define __PYX_HAVE_RT_ImportFunction_3_0_11
static int __Pyx_ImportFunction_3_0_11(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
#if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
